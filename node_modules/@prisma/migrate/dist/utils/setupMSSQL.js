var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  setupMSSQL: () => setupMSSQL,
  tearDownMSSQL: () => tearDownMSSQL
});
var import_fs = __toModule(require("fs"));
var import_mssql = __toModule(require("mssql"));
var import_path = __toModule(require("path"));
var import_url = __toModule(require("url"));
function getMSSQLConfig(url) {
  const connectionUrl = new import_url.URL(url);
  return {
    user: connectionUrl.username,
    password: connectionUrl.password,
    server: connectionUrl.hostname,
    port: Number(connectionUrl.port),
    database: connectionUrl.pathname.substring(1),
    pool: {
      max: 1
    },
    options: {
      enableArithAbort: false,
      trustServerCertificate: true
    }
  };
}
async function setupMSSQL(options) {
  const { connectionString } = options;
  const { dirname } = options;
  const config = getMSSQLConfig(connectionString);
  const connectionPool = new import_mssql.default.ConnectionPool(config);
  const connection = await connectionPool.connect();
  try {
    await connection.query(`
      CREATE DATABASE [tests-migrate-shadowdb]
      CREATE DATABASE [tests-migrate]
    `);
  } catch (e) {
    console.warn(e);
  }
  if (dirname !== "") {
    let schema = "USE [tests-migrate]\n";
    schema += import_fs.default.readFileSync(import_path.default.join(dirname, "setup.sql"), "utf-8");
    await connection.query(schema);
  }
  await connection.close();
}
async function tearDownMSSQL(options) {
  const { connectionString } = options;
  const config = getMSSQLConfig(connectionString);
  const connectionPool = new import_mssql.default.ConnectionPool(config);
  const connection = await connectionPool.connect();
  await connection.query(`
    DROP DATABASE IF EXISTS "tests-migrate-shadowdb";
    DROP DATABASE IF EXISTS "tests-migrate";
`);
  await connection.close();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setupMSSQL,
  tearDownMSSQL
});
