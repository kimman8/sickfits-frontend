{
  "version": 3,
  "sources": ["../../src/commands/MigrateCommand.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  Commands,\n  format,\n  HelpError,\n  isError,\n  logger,\n  link,\n  unknownCommand,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport { ExperimentalFlagWithNewMigrateError } from '../utils/flagErrors'\n\nexport class MigrateCommand implements Command {\n  public static new(cmds: Commands): MigrateCommand {\n    return new MigrateCommand(cmds)\n  }\n\n  private static help = format(`\nUpdate the database schema with migrations\n  \n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma migrate [command] [options]\n\n${chalk.bold('Commands for development')}\n\n         dev   Create a migration from changes in Prisma schema, apply it to the database\n               trigger generators (e.g. Prisma Client)\n       reset   Reset your database and apply all migrations, all data will be lost\n\n${chalk.bold('Commands for production/staging')}\n\n      deploy   Apply pending migrations to the database \n      status   Check the status of your database migrations\n     resolve   Resolve issues with database migrations, i.e. baseline, failed migration, hotfix\n\n${chalk.bold('Options')}\n\n  -h, --help   Display this help message\n    --schema   Custom path to your Prisma schema\n\n${chalk.bold('Examples')}\n\n  Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)\n  ${chalk.dim('$')} prisma migrate dev\n\n  Reset your database and apply all migrations\n  ${chalk.dim('$')} prisma migrate reset\n\n  Apply pending migrations to the database in production/staging\n  ${chalk.dim('$')} prisma migrate deploy\n\n  Check the status of migrations in the production/staging database\n  ${chalk.dim('$')} prisma migrate status\n\n  Specify a schema\n  ${chalk.dim('$')} prisma migrate status --schema=./schema.prisma\n\n`)\n\n  private constructor(private readonly cmds: Commands) {}\n\n  /* eslint-disable-next-line @typescript-eslint/require-await */\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(argv, {\n      '--help': Boolean,\n      '-h': '--help',\n      '--experimental': Boolean,\n      '--preview-feature': Boolean,\n      '--early-access-feature': Boolean,\n      '--telemetry-information': String,\n    })\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--experimental']) {\n      throw new ExperimentalFlagWithNewMigrateError()\n    }\n\n    // display help for help flag or no subcommand\n    if (args._.length === 0 || args['--help']) {\n      return this.help()\n    }\n\n    if (['up', 'save', 'down'].includes(args._[0])) {\n      throw new Error(\n        `The current command \"${\n          args._[0]\n        }\" doesn't exist in the new version of Prisma Migrate.\nRead more about how to upgrade: ${link('https://pris.ly/d/migrate-upgrade')}`,\n      )\n    }\n\n    if (args['--preview-feature']) {\n      logger.warn(`Prisma Migrate was in Preview and is now Generally Available.\nYou can now remove the ${chalk.red('--preview-feature')} flag.`)\n    }\n\n    const filteredArgs = args._.filter((item) => item !== '--preview-feature')\n\n    // check if we have that subcommand\n    const cmd = this.cmds[filteredArgs[0]]\n    if (cmd) {\n      return cmd.parse(filteredArgs.slice(1))\n    }\n\n    return unknownCommand(MigrateCommand.help, args._[0])\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(\n        `\\n${chalk.bold.red(`!`)} ${error}\\n${MigrateCommand.help}`,\n      )\n    }\n    return MigrateCommand.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAUO;AACP,mBAAkB;AAClB,wBAAoD;AAE7C,8BAAwC;AAAA,EAgDrC,YAA6B,MAAgB;AAAhB;AAAA;AAAA,SA/CvB,IAAI,MAAgC;AAChD,WAAO,IAAI,gBAAe;AAAA;AAAA,QAiDf,MAAM,MAAyC;AAC1D,UAAM,OAAO,oBAAI,MAAM;AAAA,MACrB,UAAU;AAAA,MACV,MAAM;AAAA,MACN,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,MACrB,0BAA0B;AAAA,MAC1B,2BAA2B;AAAA;AAG7B,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAGxB,QAAI,KAAK,mBAAmB;AAC1B,YAAM,IAAI;AAAA;AAIZ,QAAI,KAAK,EAAE,WAAW,KAAK,KAAK,WAAW;AACzC,aAAO,KAAK;AAAA;AAGd,QAAI,CAAC,MAAM,QAAQ,QAAQ,SAAS,KAAK,EAAE,KAAK;AAC9C,YAAM,IAAI,MACR,wBACE,KAAK,EAAE;AAAA,kCAEiB,qBAAK;AAAA;AAInC,QAAI,KAAK,sBAAsB;AAC7B,wBAAO,KAAK;AAAA,yBACO,qBAAM,IAAI;AAAA;AAG/B,UAAM,eAAe,KAAK,EAAE,OAAO,CAAC,SAAS,SAAS;AAGtD,UAAM,MAAM,KAAK,KAAK,aAAa;AACnC,QAAI,KAAK;AACP,aAAO,IAAI,MAAM,aAAa,MAAM;AAAA;AAGtC,WAAO,+BAAe,gBAAe,MAAM,KAAK,EAAE;AAAA;AAAA,EAG7C,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBACT;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,gBAAe;AAAA;AAGzD,WAAO,gBAAe;AAAA;AAAA;AAzGnB;AAKU,AALV,eAKU,OAAO,uBAAO;AAAA;AAAA;AAAA,EAG7B,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,qBAAM,KAAK;AAAA;AAAA;AAAA,IAGT,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;",
  "names": []
}
