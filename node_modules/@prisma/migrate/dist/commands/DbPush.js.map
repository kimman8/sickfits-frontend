{
  "version": 3,
  "sources": ["../../src/commands/DbPush.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  HelpError,\n  isError,\n  getSchemaPath,\n  logger,\n  isCi,\n  getCommandWithExecutor,\n} from '@prisma/sdk'\nimport path from 'path'\nimport chalk from 'chalk'\nimport prompt from 'prompts'\nimport { Migrate } from '../Migrate'\nimport { ensureDatabaseExists, getDbInfo } from '../utils/ensureDatabaseExists'\nimport { formatms } from '../utils/formatms'\nimport {\n  DbPushIgnoreWarningsWithFlagError,\n  DbPushForceFlagRenamedError,\n  NoSchemaFoundError,\n} from '../utils/errors'\nimport { printDatasource } from '../utils/printDatasource'\nimport { EngineResults } from '../types'\n\nexport class DbPush implements Command {\n  public static new(): DbPush {\n    return new DbPush()\n  }\n\n  private static help = format(`\n${\n  process.platform === 'win32' ? '' : chalk.bold('\uD83D\uDE4C  ')\n}Push the state from your Prisma schema to your database\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma db push [options]\n\n${chalk.bold('Options')}\n\n           -h, --help   Display this help message\n             --schema   Custom path to your Prisma schema\n   --accept-data-loss   Ignore data loss warnings\n        --force-reset   Force a reset of the database before push \n      --skip-generate   Skip triggering generators (e.g. Prisma Client)\n\n${chalk.bold('Examples')}\n\n  Push the Prisma schema state to the database\n  ${chalk.dim('$')} prisma db push\n\n  Specify a schema\n  ${chalk.dim('$')} prisma db push --schema=./schema.prisma\n\n  Ignore data loss warnings\n  ${chalk.dim('$')} prisma db push --accept-data-loss\n`)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(\n      argv,\n      {\n        '--help': Boolean,\n        '-h': '--help',\n        '--preview-feature': Boolean,\n        '--accept-data-loss': Boolean,\n        '--force-reset': Boolean,\n        '--skip-generate': Boolean,\n        '--schema': String,\n        '--telemetry-information': String,\n        // Deprecated\n        // --force renamed to --accept-data-loss in 2.17.0\n        '--force': Boolean,\n        '-f': '--force',\n      },\n      false,\n    )\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (args['--preview-feature']) {\n      logger.warn(`Prisma \"db push\" was in Preview and is now Generally Available.\nYou can now remove the ${chalk.red('--preview-feature')} flag.`)\n    }\n\n    if (args['--force']) {\n      throw new DbPushForceFlagRenamedError()\n    }\n\n    const schemaPath = await getSchemaPath(args['--schema'])\n\n    if (!schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    console.info(\n      chalk.dim(\n        `Prisma schema loaded from ${path.relative(process.cwd(), schemaPath)}`,\n      ),\n    )\n\n    await printDatasource(schemaPath)\n\n    const dbInfo = await getDbInfo(schemaPath)\n\n    const migrate = new Migrate(schemaPath)\n\n    // Automatically create the database if it doesn't exist\n    const wasDbCreated = await ensureDatabaseExists('push', true, schemaPath)\n    if (wasDbCreated) {\n      console.info()\n      console.info(wasDbCreated)\n    }\n\n    let wasDatabaseReset = false\n    if (args['--force-reset']) {\n      console.info()\n      try {\n        await migrate.reset()\n      } catch (e) {\n        migrate.stop()\n        throw e\n      }\n      if (dbInfo.dbName && dbInfo.dbLocation) {\n        console.info(\n          `The ${dbInfo.dbType} ${dbInfo.schemaWord} \"${dbInfo.dbName}\" from \"${dbInfo.dbLocation}\" was successfully reset.`,\n        )\n      } else {\n        console.info(\n          `The ${dbInfo.dbType} ${dbInfo.schemaWord} was successfully reset.`,\n        )\n      }\n      wasDatabaseReset = true\n    }\n\n    const before = Date.now()\n    let migration: EngineResults.SchemaPush\n    try {\n      migration = await migrate.push({\n        force: args['--accept-data-loss'],\n      })\n    } catch (e) {\n      migrate.stop()\n      throw e\n    }\n\n    if (migration.unexecutable && migration.unexecutable.length > 0) {\n      const messages: string[] = []\n      messages.push(\n        `${chalk.bold.red('\\n\u26A0\uFE0F We found changes that cannot be executed:\\n')}`,\n      )\n      for (const item of migration.unexecutable) {\n        messages.push(`${chalk(`  \u2022 ${item}`)}`)\n      }\n      console.info() // empty line\n\n      // We use prompts.inject() for testing in our CI\n      if (isCi() && Boolean((prompt as any)._injected?.length) === false) {\n        migrate.stop()\n        throw new Error(`${messages.join('\\n')}\\n\nUse the --force-reset flag to drop the database before push like ${chalk.bold.greenBright(\n          getCommandWithExecutor('prisma db push --force-reset'),\n        )}\n${chalk.bold.redBright('All data will be lost.')}\n        `)\n      } else {\n        console.info(`${messages.join('\\n')}\\n`)\n      }\n\n      console.info() // empty line\n      const confirmation = await prompt({\n        type: 'confirm',\n        name: 'value',\n        message: `To apply this change we need to reset the database, do you want to continue? ${chalk.red(\n          'All data will be lost',\n        )}.`,\n      })\n\n      if (!confirmation.value) {\n        console.info('Reset cancelled.')\n        migrate.stop()\n        process.exit(0)\n        // For snapshot test, because exit() is mocked\n        return ``\n      }\n\n      try {\n        // Reset first to remove all structure and data\n        await migrate.reset()\n        if (dbInfo.dbName && dbInfo.dbLocation) {\n          console.info(\n            `The ${dbInfo.dbType} ${dbInfo.schemaWord} \"${dbInfo.dbName}\" from \"${dbInfo.dbLocation}\" was successfully reset.`,\n          )\n        } else {\n          console.info(\n            `The ${dbInfo.dbType} ${dbInfo.schemaWord} was successfully reset.`,\n          )\n        }\n        wasDatabaseReset = true\n\n        // And now we can db push\n        await migrate.push({})\n      } catch (e) {\n        migrate.stop()\n        throw e\n      }\n    }\n\n    if (migration.warnings && migration.warnings.length > 0) {\n      console.info(\n        chalk.bold.yellow(\n          `\\n\u26A0\uFE0F  There might be data loss when applying the changes:\\n`,\n        ),\n      )\n\n      for (const warning of migration.warnings) {\n        console.info(chalk(`  \u2022 ${warning}`))\n      }\n      console.info() // empty line\n\n      if (!args['--accept-data-loss']) {\n        // We use prompts.inject() for testing in our CI\n        if (isCi() && Boolean((prompt as any)._injected?.length) === false) {\n          migrate.stop()\n          throw new DbPushIgnoreWarningsWithFlagError()\n        }\n\n        console.info() // empty line\n        const confirmation = await prompt({\n          type: 'confirm',\n          name: 'value',\n          message: `Do you want to ignore the warning(s)?`,\n        })\n\n        if (!confirmation.value) {\n          console.info('Push cancelled.')\n          migrate.stop()\n          process.exit(0)\n          // For snapshot test, because exit() is mocked\n          return ``\n        }\n\n        try {\n          await migrate.push({\n            force: true,\n          })\n        } catch (e) {\n          migrate.stop()\n          throw e\n        }\n      }\n    }\n\n    migrate.stop()\n\n    if (\n      !wasDatabaseReset &&\n      migration.warnings.length === 0 &&\n      migration.executedSteps === 0\n    ) {\n      console.info(`\\nThe database is already in sync with the Prisma schema.`)\n    } else {\n      console.info(\n        `\\n${\n          process.platform === 'win32' ? '' : '\uD83D\uDE80  '\n        }Your database is now in sync with your schema. Done in ${formatms(\n          Date.now() - before,\n        )}`,\n      )\n    }\n\n    // Run if not skipped\n    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args['--skip-generate']) {\n      await migrate.tryToRunGenerate()\n    }\n\n    return ``\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(`\\n${chalk.bold.red(`!`)} ${error}\\n${DbPush.help}`)\n    }\n    return DbPush.help\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
