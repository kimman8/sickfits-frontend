var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  printDatamodelObject: () => printDatamodelObject,
  printDatasources: () => printDatasources
});
var import_indent_string = __toModule(require("indent-string"));
function printDatasources(internalDatasources) {
  return internalDatasources.map((d) => String(new InternalDataSourceClass(d))).join("\n\n");
}
const tab = 2;
class InternalDataSourceClass {
  constructor(dataSource) {
    this.dataSource = dataSource;
  }
  toString() {
    const { dataSource } = this;
    const obj = {
      provider: dataSource.provider,
      url: dataSource.url
    };
    if (dataSource.config && typeof dataSource.config === "object") {
      Object.assign(obj, dataSource.config);
    }
    return `datasource ${dataSource.name} {
${(0, import_indent_string.default)(printDatamodelObject(obj), tab)}
}`;
  }
}
function printDatamodelObject(obj) {
  const maxLength = Object.keys(obj).reduce((max, curr) => Math.max(max, curr.length), 0);
  return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${typeof value === "object" && value && value.value ? JSON.stringify(value.value) : JSON.stringify(value)}`).join("\n");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  printDatamodelObject,
  printDatasources
});
