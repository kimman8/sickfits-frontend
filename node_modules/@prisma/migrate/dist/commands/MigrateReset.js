var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  MigrateReset: () => MigrateReset
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_path = __toModule(require("path"));
var import_prompts = __toModule(require("prompts"));
var import_Migrate = __toModule(require("../Migrate"));
var import_flagErrors = __toModule(require("../utils/flagErrors"));
var import_errors = __toModule(require("../utils/errors"));
var import_printFiles = __toModule(require("../utils/printFiles"));
var import_detectOldMigrate = __toModule(require("../utils/detectOldMigrate"));
var import_ensureDatabaseExists = __toModule(require("../utils/ensureDatabaseExists"));
var import_printDatasource = __toModule(require("../utils/printDatasource"));
var import_seed = __toModule(require("../utils/seed"));
const _MigrateReset = class {
  static new() {
    return new _MigrateReset();
  }
  async parse(argv) {
    var _a;
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--force": Boolean,
      "-f": "--force",
      "--skip-generate": Boolean,
      "--skip-seed": Boolean,
      "--experimental": Boolean,
      "--early-access-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    });
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithNewMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithNewMigrateError();
    }
    const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    console.info(import_chalk.default.dim(`Prisma schema loaded from ${import_path.default.relative(process.cwd(), schemaPath)}`));
    await (0, import_printDatasource.printDatasource)(schemaPath);
    console.info();
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const wasDbCreated = await (0, import_ensureDatabaseExists.ensureDatabaseExists)("create", true, schemaPath);
    if (wasDbCreated) {
      console.info(wasDbCreated);
    }
    if (!args["--force"]) {
      if ((0, import_sdk.isCi)() && Boolean((_a = import_prompts.default._injected) == null ? void 0 : _a.length) === false) {
        throw new import_errors.MigrateResetEnvNonInteractiveError();
      }
      console.info();
      const confirmation = await (0, import_prompts.default)({
        type: "confirm",
        name: "value",
        message: `Are you sure you want to reset your database? ${import_chalk.default.red("All data will be lost")}.`
      });
      if (!confirmation.value) {
        console.info("Reset cancelled.");
        process.exit(0);
        return ``;
      }
    }
    const migrate = new import_Migrate.Migrate(schemaPath);
    let migrationIds;
    try {
      await migrate.reset();
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      migrate.stop();
    }
    if (migrationIds.length === 0) {
      console.info(`${import_chalk.default.green("Database reset successful")}`);
    } else {
      console.info(`${import_chalk.default.green("Database reset successful")}

The following migration(s) have been applied:

${(0, import_chalk.default)((0, import_printFiles.printFilesFromMigrationIds)("migrations", migrationIds, {
        "migration.sql": ""
      }))}`);
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
      await migrate.tryToRunGenerate();
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_SEED && !args["--skip-seed"]) {
      const detected = (0, import_seed.detectSeedFiles)(schemaPath);
      if (detected.numberOfSeedFiles > 0) {
        await (0, import_seed.tryToRunSeed)(schemaPath);
      }
    }
    return ``;
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateReset.help}`);
    }
    return _MigrateReset.help;
  }
};
let MigrateReset = _MigrateReset;
MigrateReset.help = (0, import_sdk.format)(`
Reset your database and apply all migrations, all data will be lost

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate reset [options]

${import_chalk.default.bold("Options")}

       -h, --help   Display this help message
         --schema   Custom path to your Prisma schema
  --skip-generate   Skip triggering generators (e.g. Prisma Client)
      --skip-seed   Skip triggering seed
      -f, --force   Skip the confirmation prompt

${import_chalk.default.bold("Examples")}

  Reset your database and apply all migrations, all data will be lost
  ${import_chalk.default.dim("$")} prisma migrate reset

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate reset --schema=./schema.prisma 

  Use --force to skip the confirmation prompt
  ${import_chalk.default.dim("$")} prisma migrate reset --force
  `);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateReset
});
