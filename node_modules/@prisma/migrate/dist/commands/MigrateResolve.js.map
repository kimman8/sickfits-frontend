{
  "version": 3,
  "sources": ["../../src/commands/MigrateResolve.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  getSchemaPath,\n  HelpError,\n  isError,\n  getCommandWithExecutor,\n  link,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport path from 'path'\nimport { ensureCanConnectToDatabase } from '../utils/ensureDatabaseExists'\nimport { Migrate } from '../Migrate'\nimport {\n  ExperimentalFlagWithNewMigrateError,\n  EarlyAccessFeatureFlagWithNewMigrateError,\n} from '../utils/flagErrors'\nimport { NoSchemaFoundError } from '../utils/errors'\nimport { throwUpgradeErrorIfOldMigrate } from '../utils/detectOldMigrate'\nimport { printDatasource } from '../utils/printDatasource'\nexport class MigrateResolve implements Command {\n  public static new(): MigrateResolve {\n    return new MigrateResolve()\n  }\n\n  private static help = format(`\nResolve issues with database migrations in deployment databases: \n- recover from failed migrations\n- baseline databases when starting to use Prisma Migrate on existing databases\n- reconcile hotfixes done manually on databases with your migration history\n\nRun \"prisma migrate status\" to identify if you need to use resolve.\n\nRead more about resolving migration history issues: ${link(\n    'https://pris.ly/d/migrate-resolve',\n  )}\n \n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma migrate resolve [options]\n  \n${chalk.bold('Options')}\n\n    -h, --help   Display this help message\n      --schema   Custom path to your Prisma schema\n     --applied   Record a specific migration as applied\n --rolled-back   Record a specific migration as rolled back\n\n${chalk.bold('Examples')}\n\n  Update migrations table, recording a specific migration as applied \n  ${chalk.dim(\n    '$',\n  )} prisma migrate resolve --applied 20201231000000_add_users_table\n\n  Update migrations table, recording a specific migration as rolled back\n  ${chalk.dim(\n    '$',\n  )} prisma migrate resolve --rolled-back 20201231000000_add_users_table\n\n  Specify a schema\n  ${chalk.dim(\n    '$',\n  )} prisma migrate resolve --rolled-back 20201231000000_add_users_table --schema=./schema.prisma\n`)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(\n      argv,\n      {\n        '--help': Boolean,\n        '-h': '--help',\n        '--applied': String,\n        '--rolled-back': String,\n        '--experimental': Boolean,\n        '--early-access-feature': Boolean,\n        '--schema': String,\n        '--telemetry-information': String,\n      },\n      false,\n    )\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (args['--experimental']) {\n      throw new ExperimentalFlagWithNewMigrateError()\n    }\n\n    if (args['--early-access-feature']) {\n      throw new EarlyAccessFeatureFlagWithNewMigrateError()\n    }\n\n    const schemaPath = await getSchemaPath(args['--schema'])\n\n    if (!schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    console.info(\n      chalk.dim(\n        `Prisma schema loaded from ${path.relative(process.cwd(), schemaPath)}`,\n      ),\n    )\n\n    await printDatasource(schemaPath)\n\n    throwUpgradeErrorIfOldMigrate(schemaPath)\n\n    // if both are not defined\n    if (!args['--applied'] && !args['--rolled-back']) {\n      throw new Error(\n        `--applied or --rolled-back must be part of the command like:\n${chalk.bold.green(\n  getCommandWithExecutor(\n    'prisma migrate resolve --applied 20201231000000_example',\n  ),\n)}\n${chalk.bold.green(\n  getCommandWithExecutor(\n    'prisma migrate resolve --rolled-back 20201231000000_example',\n  ),\n)}`,\n      )\n    }\n    // if both are defined\n    else if (args['--applied'] && args['--rolled-back']) {\n      throw new Error('Pass either --applied or --rolled-back, not both.')\n    }\n\n    if (args['--applied']) {\n      if (\n        typeof args['--applied'] !== 'string' ||\n        args['--applied'].length === 0\n      ) {\n        throw new Error(\n          `--applied value must be a string like ${chalk.bold.green(\n            getCommandWithExecutor(\n              'prisma migrate resolve --applied 20201231000000_example',\n            ),\n          )}`,\n        )\n      }\n\n      await ensureCanConnectToDatabase(schemaPath)\n\n      const migrate = new Migrate(schemaPath)\n      try {\n        await migrate.markMigrationApplied({\n          migrationId: args['--applied'],\n        })\n      } finally {\n        migrate.stop()\n      }\n\n      return `Migration ${args['--applied']} marked as applied.`\n    } else {\n      if (\n        typeof args['--rolled-back'] !== 'string' ||\n        args['--rolled-back'].length === 0\n      ) {\n        throw new Error(\n          `--rolled-back value must be a string like ${chalk.bold.green(\n            getCommandWithExecutor(\n              'prisma migrate resolve --rolled-back 20201231000000_example',\n            ),\n          )}`,\n        )\n      }\n\n      await ensureCanConnectToDatabase(schemaPath)\n\n      const migrate = new Migrate(schemaPath)\n      try {\n        await migrate.markMigrationRolledBack({\n          migrationId: args['--rolled-back'],\n        })\n      } finally {\n        migrate.stop()\n      }\n\n      return `Migration ${args['--rolled-back']} marked as rolled back.`\n    }\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(\n        `\\n${chalk.bold.red(`!`)} ${error}\\n${MigrateResolve.help}`,\n      )\n    }\n    return MigrateResolve.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBASO;AACP,mBAAkB;AAClB,kBAAiB;AACjB,kCAA2C;AAC3C,qBAAwB;AACxB,wBAGO;AACP,oBAAmC;AACnC,8BAA8C;AAC9C,6BAAgC;AACzB,8BAAwC;AAAA,SAC/B,MAAsB;AAClC,WAAO,IAAI;AAAA;AAAA,QA4CA,MAAM,MAAyC;AAC1D,UAAM,OAAO,oBACX,MACA;AAAA,MACE,UAAU;AAAA,MACV,MAAM;AAAA,MACN,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,MAC1B,YAAY;AAAA,MACZ,2BAA2B;AAAA,OAE7B;AAGF,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAGxB,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA;AAGd,QAAI,KAAK,mBAAmB;AAC1B,YAAM,IAAI;AAAA;AAGZ,QAAI,KAAK,2BAA2B;AAClC,YAAM,IAAI;AAAA;AAGZ,UAAM,aAAa,MAAM,8BAAc,KAAK;AAE5C,QAAI,CAAC,YAAY;AACf,YAAM,IAAI;AAAA;AAGZ,YAAQ,KACN,qBAAM,IACJ,6BAA6B,oBAAK,SAAS,QAAQ,OAAO;AAI9D,UAAM,4CAAgB;AAEtB,+DAA8B;AAG9B,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,kBAAkB;AAChD,YAAM,IAAI,MACR;AAAA,EACN,qBAAM,KAAK,MACX,uCACE;AAAA,EAGF,qBAAM,KAAK,MACX,uCACE;AAAA,eAMS,KAAK,gBAAgB,KAAK,kBAAkB;AACnD,YAAM,IAAI,MAAM;AAAA;AAGlB,QAAI,KAAK,cAAc;AACrB,UACE,OAAO,KAAK,iBAAiB,YAC7B,KAAK,aAAa,WAAW,GAC7B;AACA,cAAM,IAAI,MACR,yCAAyC,qBAAM,KAAK,MAClD,uCACE;AAAA;AAMR,YAAM,4DAA2B;AAEjC,YAAM,UAAU,IAAI,uBAAQ;AAC5B,UAAI;AACF,cAAM,QAAQ,qBAAqB;AAAA,UACjC,aAAa,KAAK;AAAA;AAAA,gBAEpB;AACA,gBAAQ;AAAA;AAGV,aAAO,aAAa,KAAK;AAAA,WACpB;AACL,UACE,OAAO,KAAK,qBAAqB,YACjC,KAAK,iBAAiB,WAAW,GACjC;AACA,cAAM,IAAI,MACR,6CAA6C,qBAAM,KAAK,MACtD,uCACE;AAAA;AAMR,YAAM,4DAA2B;AAEjC,YAAM,UAAU,IAAI,uBAAQ;AAC5B,UAAI;AACF,cAAM,QAAQ,wBAAwB;AAAA,UACpC,aAAa,KAAK;AAAA;AAAA,gBAEpB;AACA,gBAAQ;AAAA;AAGV,aAAO,aAAa,KAAK;AAAA;AAAA;AAAA,EAItB,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBACT;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,gBAAe;AAAA;AAGzD,WAAO,gBAAe;AAAA;AAAA;AAhLnB;AAKU,AALV,eAKU,OAAO,uBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAQuB,qBAClD;AAAA;AAAA,EAGF,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOX,qBAAM,KAAK;AAAA;AAAA;AAAA,IAGT,qBAAM,IACN;AAAA;AAAA;AAAA,IAIA,qBAAM,IACN;AAAA;AAAA;AAAA,IAIA,qBAAM,IACN;AAAA;",
  "names": []
}
