/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { GraphQLSchema } from 'graphql';
import Iron from '@hapi/iron';
import { SessionStrategy, JSONValue, SessionStoreFunction, SessionContext, CreateContext } from '../types';
declare type StatelessSessionsOptions = {
    /**
     * Secret used by https://github.com/hapijs/iron for encapsulating data. Must be at least 32 characters long
     */
    secret: string;
    /**
     * Iron seal options for customizing the key derivation algorithm used to generate encryption and integrity verification keys as well as the algorithms and salt sizes used.
     * See {@link https://hapi.dev/module/iron/api/?v=6.0.0#options} for available options.
     *
     * @default Iron.defaults
     */
    ironOptions?: Iron.SealOptions;
    /**
     * Specifies the number (in seconds) to be the value for the `Max-Age`
     * `Set-Cookie` attribute.
     *
     * @default 60 * 60 * 8 // 8 hours
     */
    maxAge?: number;
    /**
     * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.5|`Secure` `Set-Cookie` attribute}.
     *
     * *Note* be careful when setting this to `true`, as compliant clients will
     * not send the cookie back to the server in the future if the browser does
     * not have an HTTPS connection.
     *
     * @default process.env.NODE_ENV === 'production'
     */
    secure?: boolean;
    /**
     * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute}.
     *
     * @default '/'
     */
    path?: string;
    /**
     * Specifies the domain for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.3|`Domain` `Set-Cookie` attribute}
     *
     * @default current domain
     */
    domain?: string;
    /**
     * Specifies the boolean or string to be the value for the {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute}.
     *
     * @default 'lax'
     */
    sameSite?: true | false | 'lax' | 'strict' | 'none';
};
export declare function statelessSessions<T>({ secret, maxAge, path, secure, ironOptions, domain, sameSite, }: StatelessSessionsOptions): SessionStrategy<T>;
export declare function storedSessions({ store: storeOption, maxAge, ...statelessSessionsOptions }: {
    store: SessionStoreFunction;
} & StatelessSessionsOptions): SessionStrategy<JSONValue>;
/**
 * This is the function createSystem uses to implement the session strategy provided
 */
export declare function createSessionContext<T>(sessionStrategy: SessionStrategy<T>, req: IncomingMessage, res: ServerResponse, createContext: CreateContext): Promise<SessionContext<T>>;
export declare function sessionSchema(graphQLSchema: GraphQLSchema): GraphQLSchema;
export {};
