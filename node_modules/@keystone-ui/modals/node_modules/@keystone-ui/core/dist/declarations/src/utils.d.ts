import { ComponentPropsWithoutRef, ElementType, ReactElement, ReactNode, Ref, useLayoutEffect } from 'react';
export declare const getChildTag: (parentTag?: ElementType<any> | undefined) => "div" | "li";
export declare function identityType<T>(): <U extends T>(u: U) => U;
export declare const devWarning: (condition: boolean, message: string) => void;
declare type ElementTagNameMap = HTMLElementTagNameMap & Pick<SVGElementTagNameMap, Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>>;
declare type AsProp<Comp extends ElementType, Props> = {
    as?: Comp;
    ref?: Ref<Comp extends keyof ElementTagNameMap ? ElementTagNameMap[Comp] : Comp extends new (...args: any) => any ? InstanceType<Comp> : undefined>;
} & Omit<ComponentPropsWithoutRef<Comp>, 'as' | keyof Props>;
declare type CompWithAsProp<Props, DefaultElementType extends ElementType> = <Comp extends ElementType = DefaultElementType>(props: AsProp<Comp, Props> & Props) => ReactElement;
export declare const forwardRefWithAs: <DefaultElementType extends ElementType<any>, BaseProps>(render: (props: BaseProps & {
    as?: ElementType<any> | undefined;
}, ref: React.Ref<any>) => Exclude<ReactNode, undefined>) => CompWithAsProp<BaseProps, DefaultElementType>;
export declare function makeId(...args: (string | number | null | undefined)[]): string;
export declare const mapResponsiveProp: <Map_1 extends Record<string, string | number>, Keys extends keyof Map_1>(value: Keys | readonly (Keys | null)[], valueMap: Map_1) => any;
export declare const useId: (idFromProps?: string | null | undefined) => string | undefined;
export declare const useSafeLayoutEffect: typeof useLayoutEffect;
declare type Props = {
    children: ReactElement;
};
export declare const Portal: ({ children }: Props) => import("react").ReactPortal | null;
export {};
