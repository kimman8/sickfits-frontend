var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  askToCreateDb: () => askToCreateDb,
  ensureCanConnectToDatabase: () => ensureCanConnectToDatabase,
  ensureDatabaseExists: () => ensureDatabaseExists,
  getDbInfo: () => getDbInfo,
  getDbLocation: () => getDbLocation,
  getDbinfoFromCredentials: () => getDbinfoFromCredentials,
  interactivelyCreateDatabase: () => interactivelyCreateDatabase
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_sdk2 = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_sdk3 = __toModule(require("@prisma/sdk"));
var import_prompts = __toModule(require("prompts"));
async function getDbInfo(schemaPath) {
  const datamodel = await (0, import_sdk.getSchema)(schemaPath);
  const config = await (0, import_sdk2.getConfig)({ datamodel });
  const activeDatasource = config.datasources[0];
  const url = activeDatasource.url.value;
  if (activeDatasource.provider === "sqlserver") {
    return {
      name: activeDatasource.name,
      schemaWord: "database",
      dbType: "SQL Server",
      dbName: void 0,
      dbLocation: void 0,
      url: activeDatasource.url.value
    };
  }
  try {
    const credentials = (0, import_sdk3.uriToCredentials)(url);
    const dbLocation = getDbLocation(credentials);
    const dbinfoFromCredentials = getDbinfoFromCredentials(credentials);
    return {
      name: activeDatasource.name,
      dbLocation,
      ...dbinfoFromCredentials,
      url,
      schema: credentials.schema
    };
  } catch (e) {
    return {
      name: activeDatasource.name,
      schemaWord: "database",
      dbType: void 0,
      dbName: void 0,
      dbLocation: void 0,
      url
    };
  }
}
async function ensureCanConnectToDatabase(schemaPath) {
  const datamodel = await (0, import_sdk.getSchema)(schemaPath);
  const config = await (0, import_sdk2.getConfig)({ datamodel });
  const activeDatasource = config.datasources[0];
  if (!activeDatasource) {
    throw new Error(`Couldn't find a datasource in the schema.prisma file`);
  }
  if (activeDatasource.provider === "mongodb") {
    throw new Error(`"mongodb" provider is not supported with this command. For more info see https://www.prisma.io/docs/concepts/database-connectors/mongodb`);
  }
  const schemaDir = await (0, import_sdk.getSchemaDir)(schemaPath);
  const canConnect = await (0, import_sdk3.canConnectToDatabase)(activeDatasource.url.value, schemaDir);
  if (canConnect === true) {
    return true;
  } else {
    const { code, message } = canConnect;
    throw new Error(`${code}: ${message}`);
  }
}
async function ensureDatabaseExists(action, forceCreate = false, schemaPath) {
  const datamodel = await (0, import_sdk.getSchema)(schemaPath);
  const config = await (0, import_sdk2.getConfig)({ datamodel });
  const activeDatasource = config.datasources[0];
  if (!activeDatasource) {
    throw new Error(`Couldn't find a datasource in the schema.prisma file`);
  }
  if (activeDatasource.provider === "mongodb") {
    throw new Error(`"mongodb" provider is not supported with this command. For more info see https://www.prisma.io/docs/concepts/database-connectors/mongodb`);
  }
  const schemaDir = await (0, import_sdk.getSchemaDir)(schemaPath);
  const canConnect = await (0, import_sdk3.canConnectToDatabase)(activeDatasource.url.value, schemaDir);
  if (canConnect === true) {
    return;
  }
  const { code, message } = canConnect;
  if (code !== "P1003") {
    throw new Error(`${code}: ${message}`);
  }
  if (!schemaDir) {
    throw new Error(`Could not locate ${schemaPath || "schema.prisma"}`);
  }
  if (forceCreate) {
    if (await (0, import_sdk3.createDatabase)(activeDatasource.url.value, schemaDir)) {
      if (activeDatasource.provider === "sqlserver") {
        return `SQL Server database created.
`;
      }
      const credentials = (0, import_sdk3.uriToCredentials)(activeDatasource.url.value);
      const { schemaWord, dbType, dbName } = getDbinfoFromCredentials(credentials);
      if (dbType && dbType !== "SQL Server") {
        return `${dbType} ${schemaWord} ${import_chalk.default.bold(dbName)} created at ${import_chalk.default.bold(getDbLocation(credentials))}
`;
      } else {
        return `${schemaWord} created.
`;
      }
    }
  } else {
    await interactivelyCreateDatabase(activeDatasource.url.value, action, schemaDir);
  }
  return void 0;
}
async function interactivelyCreateDatabase(connectionString, action, schemaDir) {
  await askToCreateDb(connectionString, action, schemaDir);
}
async function askToCreateDb(connectionString, action, schemaDir) {
  const credentials = (0, import_sdk3.uriToCredentials)(connectionString);
  const { schemaWord, dbType, dbName } = getDbinfoFromCredentials(credentials);
  const dbLocation = getDbLocation(credentials);
  let message;
  if (dbName && dbLocation) {
    message = `You are trying to ${action} a migration for ${dbType} ${schemaWord} ${import_chalk.default.bold(dbName)}.
A ${schemaWord} with that name doesn't exist at ${import_chalk.default.bold(dbLocation)}.
`;
  } else {
    message = `You are trying to ${action} a migration for ${dbType} ${schemaWord}.
The ${schemaWord} doesn't exist.
`;
  }
  console.info();
  const response = await (0, import_prompts.default)({
    type: "select",
    name: "value",
    message,
    initial: 0,
    choices: [
      {
        title: "Yes",
        value: true,
        description: `Create new ${dbType} ${schemaWord} ${import_chalk.default.bold(dbName)}`
      },
      {
        title: "No",
        value: false,
        description: `Don't create the ${schemaWord}`
      }
    ]
  });
  if (response.value) {
    await (0, import_sdk3.createDatabase)(connectionString, schemaDir);
  } else {
    process.exit(0);
  }
}
function getDbLocation(credentials) {
  if (credentials.type === "sqlite") {
    return credentials.uri;
  }
  if (!credentials.port) {
    switch (credentials.type) {
      case "mysql":
        credentials.port = 3306;
        break;
      case "postgresql":
        credentials.port = 5432;
        break;
      case "sqlserver":
        credentials.port = 1433;
        break;
    }
  }
  return `${credentials.host}:${credentials.port}`;
}
function getDbinfoFromCredentials(credentials) {
  const dbName = credentials.database;
  let dbType;
  switch (credentials.type) {
    case "mysql":
      dbType = `MySQL`;
      break;
    case "postgresql":
      dbType = `PostgreSQL`;
      break;
    case "sqlite":
      dbType = `SQLite`;
      break;
    case "sqlserver":
      dbType = `SQL Server`;
      break;
  }
  const schemaWord = "database";
  return {
    dbName,
    dbType,
    schemaWord
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  askToCreateDb,
  ensureCanConnectToDatabase,
  ensureDatabaseExists,
  getDbInfo,
  getDbLocation,
  getDbinfoFromCredentials,
  interactivelyCreateDatabase
});
