var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  handleUnexecutableSteps: () => handleUnexecutableSteps
});
var import_chalk = __toModule(require("chalk"));
var import_sdk = __toModule(require("@prisma/sdk"));
function handleUnexecutableSteps(unexecutableSteps, createOnly = false) {
  if (unexecutableSteps && unexecutableSteps.length > 0) {
    const messages = [];
    messages.push(`${import_chalk.default.bold.red("\n\u26A0\uFE0F We found changes that cannot be executed:\n")}`);
    for (const item of unexecutableSteps) {
      messages.push(`${(0, import_chalk.default)(`  \u2022 Step ${item.stepIndex} ${item.message}`)}`);
    }
    console.info();
    if (createOnly) {
      console.error(`${messages.join("\n")}
`);
      return void 0;
    } else {
      return `${messages.join("\n")}

You can use ${(0, import_sdk.getCommandWithExecutor)("prisma migrate dev --create-only")} to create the migration file, and manually modify it to address the underlying issue(s).
Then run ${(0, import_sdk.getCommandWithExecutor)("prisma migrate dev")} to apply it and verify it works.
`;
    }
  }
  return void 0;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handleUnexecutableSteps
});
