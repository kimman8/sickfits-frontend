'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@keystone-ui/core');
var fields = require('@keystone-ui/fields');
var React = require('react');
var copy = require('copy-to-clipboard');
var bytes = require('bytes');
var toast = require('@keystone-ui/toast');
var pill = require('@keystone-ui/pill');
var button = require('@keystone-ui/button');
var fields_types_file_utils_dist_keystone = require('../../utils/dist/keystone.cjs.prod.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var copy__default = /*#__PURE__*/_interopDefault(copy);
var bytes__default = /*#__PURE__*/_interopDefault(bytes);

/** @jsxRuntime classic */
function validateRef({
  ref
}) {
  if (!fields_types_file_utils_dist_keystone.parseFileRef(ref)) {
    return 'Invalid ref';
  }
}

const RefView = ({
  field,
  onChange,
  onCancel,
  error
}) => {
  return core.jsx(React.Fragment, null, core.jsx(core.VisuallyHidden, {
    as: "label",
    htmlFor: `${field.path}--ref-input`
  }, "Paste the file ref here"), core.jsx(core.Stack, {
    gap: "small",
    across: true,
    css: {
      width: '100%',
      justifyContent: 'space-between',
      'div:first-of-type': {
        flex: '2'
      }
    }
  }, core.jsx(fields.TextInput, {
    autoFocus: true,
    id: `${field.path}=--ref-input`,
    placeholder: "Paste the file ref here",
    onChange: event => {
      onChange(event.target.value);
    },
    css: {
      width: '100%'
    }
  }), core.jsx(button.Button, {
    tone: "passive",
    onClick: onCancel
  }, "Cancel"), error ? core.jsx(pill.Pill, {
    weight: "light",
    tone: "negative"
  }, error) : null));
};

function Field({
  autoFocus,
  field,
  value,
  forceValidation,
  onChange
}) {
  const inputRef = React.useRef(null);
  const errorMessage = createErrorMessage(value, forceValidation);

  const onUploadChange = ({
    currentTarget: {
      validity,
      files
    }
  }) => {
    const file = files === null || files === void 0 ? void 0 : files[0];
    if (!file) return; // bail if the user cancels from the file browser

    onChange === null || onChange === void 0 ? void 0 : onChange({
      kind: 'upload',
      data: {
        file,
        validity
      },
      previous: value
    });
  }; // Generate a random input key when the value changes, to ensure the file input is unmounted and
  // remounted (this is the only way to reset its value and ensure onChange will fire again if
  // the user selects the same file again)
  // eslint-disable-next-line react-hooks/exhaustive-deps


  const inputKey = React.useMemo(() => Math.random(), [value]);
  return core.jsx(fields.FieldContainer, {
    as: "fieldset"
  }, core.jsx(fields.FieldLabel, {
    as: "legend"
  }, field.label), value.kind === 'ref' ? core.jsx(RefView, {
    field: field,
    onChange: ref => {
      onChange === null || onChange === void 0 ? void 0 : onChange({
        kind: 'ref',
        data: {
          ref
        },
        previous: value.previous
      });
    },
    error: forceValidation && errorMessage ? errorMessage : undefined,
    onCancel: () => {
      onChange === null || onChange === void 0 ? void 0 : onChange(value.previous);
    }
  }) : core.jsx(FileView, {
    errorMessage: errorMessage,
    value: value,
    onChange: onChange,
    inputRef: inputRef
  }), core.jsx("input", {
    css: {
      display: 'none'
    },
    autoComplete: "off",
    autoFocus: autoFocus,
    ref: inputRef,
    key: inputKey,
    name: field.path,
    onChange: onUploadChange,
    type: "file",
    disabled: onChange === undefined
  }));
}

function FileView({
  errorMessage,
  value,
  onChange,
  inputRef
}) {
  const {
    addToast
  } = toast.useToasts();

  const onSuccess = () => {
    addToast({
      title: 'Copied file ref to clipboard',
      tone: 'positive'
    });
  };

  const onFailure = () => {
    addToast({
      title: 'Failed to copy file ref to clipboard',
      tone: 'negative'
    });
  };

  const copyRef = () => {
    if (value.kind !== 'from-server') {
      return;
    }

    if (navigator) {
      // use the new navigator.clipboard API if it exists
      navigator.clipboard.writeText(value === null || value === void 0 ? void 0 : value.data.ref).then(onSuccess, onFailure);
      return;
    } else {
      // Fallback to a library that leverages document.execCommand
      // for browser versions that dont' support the navigator object.
      // As document.execCommand
      try {
        copy__default['default'](value === null || value === void 0 ? void 0 : value.data.ref);
      } catch (e) {
        addToast({
          title: 'Faild to oopy to clipboard',
          tone: 'negative'
        });
      }

      return;
    }
  };

  return value.kind === 'from-server' || value.kind === 'upload' ? core.jsx(core.Stack, {
    gap: "small",
    across: true,
    align: "center"
  }, onChange && core.jsx(React.Fragment, null, value.kind === 'from-server' && core.jsx(core.Stack, {
    padding: "xxsmall",
    gap: "xxsmall"
  }, core.jsx(core.Stack, {
    across: true,
    align: "center",
    gap: "small"
  }, core.jsx(core.Text, {
    size: "medium"
  }, core.jsx("a", {
    href: value.data.src,
    target: "_blank"
  }, `${value.data.filename}`)), core.jsx(button.Button, {
    size: "small",
    tone: "passive",
    onClick: copyRef
  }, "Copy Ref")), core.jsx(core.Text, {
    size: "xsmall"
  }, bytes__default['default'](value.data.filesize))), core.jsx(core.Stack, {
    across: true,
    gap: "small",
    align: "center"
  }, core.jsx(button.Button, {
    size: "small",
    onClick: () => {
      var _inputRef$current;

      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();
    }
  }, "Change"), value.kind !== 'upload' ? core.jsx(button.Button, {
    size: "small",
    tone: "passive",
    onClick: () => {
      onChange({
        kind: 'ref',
        data: {
          ref: ''
        },
        previous: value
      });
    }
  }, "Paste Ref") : null, value.kind === 'from-server' && core.jsx(button.Button, {
    size: "small",
    tone: "negative",
    onClick: () => {
      onChange({
        kind: 'remove',
        previous: value
      });
    }
  }, "Remove"), value.kind === 'upload' && core.jsx(button.Button, {
    size: "small",
    tone: "negative",
    onClick: () => {
      onChange(value.previous);
    }
  }, "Cancel"), errorMessage ? core.jsx(pill.Pill, {
    tone: "negative",
    weight: "light"
  }, errorMessage) : value.kind === 'upload' && core.jsx(pill.Pill, {
    weight: "light",
    tone: "positive"
  }, "Save to upload this file")))) : core.jsx(core.Stack, {
    gap: "small"
  }, core.jsx(core.Stack, {
    css: {
      alignItems: 'center'
    },
    gap: "small",
    across: true
  }, core.jsx(button.Button, {
    size: "small",
    disabled: onChange === undefined,
    onClick: () => {
      var _inputRef$current2;

      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.click();
    },
    tone: "positive"
  }, "Upload File"), core.jsx(button.Button, {
    size: "small",
    tone: "passive",
    disabled: onChange === undefined,
    onClick: () => {
      onChange === null || onChange === void 0 ? void 0 : onChange({
        kind: 'ref',
        data: {
          ref: ''
        },
        previous: value
      });
    }
  }, "Paste Ref"), value.kind === 'remove' && value.previous && core.jsx(button.Button, {
    size: "small",
    tone: "negative",
    onClick: () => {
      if (value.previous !== undefined) {
        onChange === null || onChange === void 0 ? void 0 : onChange(value === null || value === void 0 ? void 0 : value.previous);
      }
    }
  }, "Undo removal"), value.kind === 'remove' && // NOTE -- UX decision is to not display this, I think it would only be relevant
  // for deleting uploaded images (and we don't support that yet)
  // <Pill weight="light" tone="warning">
  //   Save to remove this image
  // </Pill>
  null));
}

function createErrorMessage(value, forceValidation) {
  if (value.kind === 'upload') {
    return validateFile(value.data);
  } else if (value.kind === 'ref') {
    return forceValidation ? validateRef(value.data) : undefined;
  }
}

function validateFile({
  validity
}) {
  if (!validity.valid) {
    return 'Something went wrong, please reload and try again.';
  }
}

/** @jsxRuntime classic */
const Cell = ({
  item,
  field
}) => {
  const data = item[field.path];
  if (!data) return null;
  return core.jsx("div", {
    css: {
      alignItems: 'center',
      display: 'flex',
      height: 24,
      lineHeight: 0,
      width: 24
    }
  }, data.filename);
};
const CardValue = ({
  item,
  field
}) => {
  const data = item[field.path];
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), data && data.filename);
};
const controller = config => {
  return {
    path: config.path,
    label: config.label,
    graphqlSelection: `${config.path} {
        src
        filename
        ref
        filesize
      }`,
    defaultValue: {
      kind: 'empty'
    },

    deserialize(item) {
      const value = item[config.path];
      if (!value) return {
        kind: 'empty'
      };
      return {
        kind: 'from-server',
        data: {
          src: value.src,
          filename: value.filename,
          ref: value.ref,
          filesize: value.filesize
        }
      };
    },

    validate(value) {
      if (value.kind === 'ref') {
        return validateRef(value.data) === undefined;
      }

      return value.kind !== 'upload' || validateFile(value.data) === undefined;
    },

    serialize(value) {
      if (value.kind === 'upload') {
        return {
          [config.path]: {
            upload: value.data.file
          }
        };
      }

      if (value.kind === 'ref') {
        return {
          [config.path]: {
            ref: value.data.ref
          }
        };
      }

      if (value.kind === 'remove') {
        return {
          [config.path]: null
        };
      }

      return {};
    }

  };
};

exports.CardValue = CardValue;
exports.Cell = Cell;
exports.Field = Field;
exports.controller = controller;
