'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@keystone-ui/core');
var fields = require('@keystone-ui/fields');
var CellContainer = require('../../../../../dist/CellContainer-9804a9fe.cjs.prod.js');
var CellLink = require('../../../../../dist/CellLink-941593c5.cjs.prod.js');
require('@babel/runtime/helpers/defineProperty');
require('react');
require('@keystone-ui/button');
require('@keystone-ui/icons/icons/AlertTriangleIcon');
require('next/link');
require('@keystone-ui/toast');
require('@keystone-ui/loading');
require('@keystone-ui/modals');
require('apollo-upload-client');
require('@babel/runtime/helpers/objectSpread2');
require('@emotion/hash');
require('../../../../../dist/sqlite-bb0466dc.cjs.prod.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@apollo/client');
require('../../../../../dist/admin-meta-graphql-050d49f5.cjs.prod.js');
require('@babel/runtime/helpers/extends');
require('next/router');
require('@keystone-ui/popover');
require('@keystone-ui/icons/icons/MoreHorizontalIcon');
require('@keystone-ui/icons/icons/ChevronRightIcon');
require('../../../../../dist/SignoutButton-abc7d471.cjs.prod.js');
require('fast-deep-equal');
require('@keystone-ui/notice');
require('../../../../../admin-ui/router/dist/keystone.cjs.prod.js');
require('decimal.js');
require('@graphql-ts/schema/api-without-context');
require('@graphql-ts/schema');
require('graphql-type-json');
require('graphql-upload/public/GraphQLUpload.js');
require('@graphql-ts/schema/api-with-context');

/** @jsxRuntime classic */
const Field = ({
  field,
  forceValidation,
  value,
  onChange,
  autoFocus
}) => {
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label, onChange ? core.jsx(core.Stack, null, core.jsx(fields.TextArea, {
    autoFocus: autoFocus,
    onChange: event => onChange(event.target.value),
    value: value
  }), forceValidation && core.jsx(core.Text, {
    color: "red600",
    size: "small"
  }, 'Invalid JSON')) : value));
};
const Cell = ({
  item,
  field,
  linkTo
}) => {
  let value = item[field.path] + '';
  return linkTo ? core.jsx(CellLink.CellLink, linkTo, value) : core.jsx(CellContainer.CellContainer, null, value);
};
Cell.supportsLinkTo = true;
const CardValue = ({
  item,
  field
}) => {
  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), item[field.path]);
};
const controller = config => {
  return {
    path: config.path,
    label: config.label,
    graphqlSelection: config.path,
    defaultValue: '',
    validate: value => {
      if (!value) return true;

      try {
        JSON.parse(value);
        return true;
      } catch (e) {
        return false;
      }
    },
    deserialize: data => {
      const value = data[config.path];
      if (!value) return '';
      return JSON.stringify(value, null, 2);
    },
    serialize: value => {
      let parsedValue;

      if (!value) {
        return {
          [config.path]: null
        };
      }

      try {
        parsedValue = JSON.parse(value);
      } catch (e) {}

      return {
        [config.path]: parsedValue
      };
    }
  };
};

exports.CardValue = CardValue;
exports.Cell = Cell;
exports.Field = Field;
exports.controller = controller;
