#!/usr/bin/env ts-node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_debug = __toModule(require("@prisma/debug"));
var import_MigrateCommand = __toModule(require("./commands/MigrateCommand"));
var import_MigrateDev = __toModule(require("./commands/MigrateDev"));
var import_MigrateReset = __toModule(require("./commands/MigrateReset"));
var import_MigrateDeploy = __toModule(require("./commands/MigrateDeploy"));
var import_MigrateResolve = __toModule(require("./commands/MigrateResolve"));
var import_MigrateStatus = __toModule(require("./commands/MigrateStatus"));
var import_DbPush = __toModule(require("./commands/DbPush"));
var import_DbPull = __toModule(require("./commands/DbPull"));
var import_DbDrop = __toModule(require("./commands/DbDrop"));
var import_DbSeed = __toModule(require("./commands/DbSeed"));
var import_handlePanic = __toModule(require("./utils/handlePanic"));
var import_engines_version = __toModule(require("@prisma/engines-version"));
process.env.NODE_NO_WARNINGS = "1";
process.on("uncaughtException", (e) => {
  console.log(e);
});
process.on("unhandledRejection", (e, promise) => {
  console.log(String(e), String(promise));
});
const commandArray = process.argv.slice(2);
const args = (0, import_sdk.arg)(commandArray, {
  "--schema": String,
  "--telemetry-information": String
}, false, true);
if (process.argv.length > 2) {
  try {
    const envPaths = (0, import_sdk.getEnvPaths)(args["--schema"]);
    const envData = (0, import_sdk.tryLoadEnvs)(envPaths, { conflictCheck: "error" });
    envData && envData.message && console.log(envData.message);
  } catch (e) {
    console.log(e);
  }
}
const packageJson = eval(`require('../package.json')`);
async function main() {
  const cli = import_MigrateCommand.MigrateCommand.new({
    dev: import_MigrateDev.MigrateDev.new(),
    reset: import_MigrateReset.MigrateReset.new(),
    deploy: import_MigrateDeploy.MigrateDeploy.new(),
    status: import_MigrateStatus.MigrateStatus.new(),
    resolve: import_MigrateResolve.MigrateResolve.new(),
    pull: import_DbPull.DbPull.new(),
    push: import_DbPush.DbPush.new(),
    drop: import_DbDrop.DbDrop.new(),
    seed: import_DbSeed.DbSeed.new()
  });
  const result = await cli.parse(commandArray);
  if (result instanceof import_sdk.HelpError) {
    console.error(result);
    return 1;
  } else if ((0, import_sdk.isError)(result)) {
    console.error(result);
    return 1;
  }
  console.log(result);
  return 0;
}
process.on("SIGINT", () => {
  process.exit(1);
});
main().then((code) => {
  if (code !== 0) {
    process.exit(code);
  }
}).catch((error) => {
  if (error.rustStack) {
    (0, import_handlePanic.handlePanic)(error, packageJson.version, import_engines_version.enginesVersion, commandArray.join(" ")).catch((e) => {
      if (import_debug.default.enabled("migrate")) {
        console.error(import_chalk.default.redBright.bold("Error: ") + e.stack);
      } else {
        console.error(import_chalk.default.redBright.bold("Error: ") + e.message);
      }
    }).finally(() => {
      process.exit(1);
    });
  } else {
    if (import_debug.default.enabled("migrate")) {
      console.error(import_chalk.default.redBright.bold("Error: ") + error.stack);
    } else {
      console.error(import_chalk.default.redBright.bold("Error: ") + error.message);
    }
    process.exit(1);
  }
});
