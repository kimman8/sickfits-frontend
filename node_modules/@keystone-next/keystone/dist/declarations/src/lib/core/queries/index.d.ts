import { graphql } from '../../../types';
import { InitialisedList } from '../types-for-lists';
export declare function getQueriesForList(list: InitialisedList): {
    [x: string]: import("@graphql-ts/schema").Field<unknown, import("../../../types").FindManyArgs, graphql.ListType<graphql.NonNullType<graphql.ObjectType<import("../../../types").ItemRootValue>>>, string, import("../../../types").KeystoneContext> | import("@graphql-ts/schema").Field<unknown, {
        where: graphql.Arg<graphql.NonNullType<{
            kind: "input";
            __fields: Record<string, graphql.Arg<graphql.InputType, any>>;
            __context: (context: unknown) => void;
            graphQLType: import("graphql").GraphQLInputObjectType;
        }>, false>;
    }, graphql.ObjectType<import("../../../types").ItemRootValue>, string, import("../../../types").KeystoneContext> | import("@graphql-ts/schema").Field<unknown, {
        where: graphql.Arg<graphql.NonNullType<{
            kind: "input";
            __fields: Record<string, graphql.Arg<graphql.InputType, any>>;
            __context: (context: unknown) => void;
            graphQLType: import("graphql").GraphQLInputObjectType;
        }>, true>;
    }, graphql.ScalarType<number>, string, import("../../../types").KeystoneContext>;
};
