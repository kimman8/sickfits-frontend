{
  "version": 3,
  "sources": ["../../src/commands/MigrateDeploy.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  getSchemaPath,\n  HelpError,\n  isError,\n  getCommandWithExecutor,\n  link,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport path from 'path'\nimport { Migrate } from '../Migrate'\nimport { ensureDatabaseExists } from '../utils/ensureDatabaseExists'\nimport {\n  ExperimentalFlagWithNewMigrateError,\n  EarlyAccessFeatureFlagWithNewMigrateError,\n} from '../utils/flagErrors'\nimport { NoSchemaFoundError } from '../utils/errors'\nimport { printFilesFromMigrationIds } from '../utils/printFiles'\nimport { throwUpgradeErrorIfOldMigrate } from '../utils/detectOldMigrate'\nimport { printDatasource } from '../utils/printDatasource'\nimport Debug from '@prisma/debug'\n\nconst debug = Debug('prisma:migrate:deploy')\n\nexport class MigrateDeploy implements Command {\n  public static new(): MigrateDeploy {\n    return new MigrateDeploy()\n  }\n\n  private static help = format(`\nApply pending migrations to update the database schema in production/staging\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma migrate deploy [options]\n\n${chalk.bold('Options')}\n\n  -h, --help   Display this help message\n    --schema   Custom path to your Prisma schema\n\n${chalk.bold('Examples')}\n\n  Deploy your pending migrations to your production/staging database\n  ${chalk.dim('$')} prisma migrate deploy\n\n  Specify a schema\n  ${chalk.dim('$')} prisma migrate deploy --schema=./schema.prisma\n\n`)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(\n      argv,\n      {\n        '--help': Boolean,\n        '-h': '--help',\n        '--experimental': Boolean,\n        '--early-access-feature': Boolean,\n        '--schema': String,\n        '--telemetry-information': String,\n      },\n      false,\n    )\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (args['--experimental']) {\n      throw new ExperimentalFlagWithNewMigrateError()\n    }\n\n    if (args['--early-access-feature']) {\n      throw new EarlyAccessFeatureFlagWithNewMigrateError()\n    }\n\n    const schemaPath = await getSchemaPath(args['--schema'])\n\n    if (!schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    console.info(\n      chalk.dim(\n        `Prisma schema loaded from ${path.relative(process.cwd(), schemaPath)}`,\n      ),\n    )\n\n    await printDatasource(schemaPath)\n\n    throwUpgradeErrorIfOldMigrate(schemaPath)\n\n    const migrate = new Migrate(schemaPath)\n\n    // Automatically create the database if it doesn't exist\n    const wasDbCreated = await ensureDatabaseExists('apply', true, schemaPath)\n    if (wasDbCreated) {\n      console.info() // empty line\n      console.info(wasDbCreated)\n    }\n\n    const diagnoseResult = await migrate.diagnoseMigrationHistory({\n      optInToShadowDatabase: false,\n    })\n    debug({ diagnoseResult: JSON.stringify(diagnoseResult, null, 2) })\n    const listMigrationDirectoriesResult =\n      await migrate.listMigrationDirectories()\n    debug({ listMigrationDirectoriesResult })\n\n    console.info() // empty line\n    if (listMigrationDirectoriesResult.migrations.length > 0) {\n      const migrations = listMigrationDirectoriesResult.migrations\n      console.info(\n        `${migrations.length} migration${\n          migrations.length > 1 ? 's' : ''\n        } found in prisma/migrations`,\n      )\n    } else {\n      console.info(`No migration found in prisma/migrations`)\n    }\n\n    const editedMigrationNames = diagnoseResult.editedMigrationNames\n    if (editedMigrationNames.length > 0) {\n      console.info(\n        `${chalk.yellow(\n          'WARNING The following migrations have been modified since they were applied:',\n        )}\n${editedMigrationNames.join('\\n')}`,\n      )\n    }\n\n    let migrationIds: string[]\n    try {\n      const { appliedMigrationNames } = await migrate.applyMigrations()\n      migrationIds = appliedMigrationNames\n    } finally {\n      migrate.stop()\n    }\n\n    console.info() // empty line\n    if (migrationIds.length === 0) {\n      return chalk.greenBright(`No pending migrations to apply.`)\n    } else {\n      return `The following migration${\n        migrationIds.length > 1 ? 's' : ''\n      } have been applied:\\n\\n${chalk(\n        printFilesFromMigrationIds('migrations', migrationIds, {\n          'migration.sql': '',\n        }),\n      )}\n      \n${chalk.greenBright('All migrations have been successfully applied.')}`\n    }\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(\n        `\\n${chalk.bold.red(`!`)} ${error}\\n${MigrateDeploy.help}`,\n      )\n    }\n    return MigrateDeploy.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBASO;AACP,mBAAkB;AAClB,kBAAiB;AACjB,qBAAwB;AACxB,kCAAqC;AACrC,wBAGO;AACP,oBAAmC;AACnC,wBAA2C;AAC3C,8BAA8C;AAC9C,6BAAgC;AAChC,mBAAkB;AAElB,MAAM,QAAQ,0BAAM;AAEb,6BAAuC;AAAA,SAC9B,MAAqB;AACjC,WAAO,IAAI;AAAA;AAAA,QAyBA,MAAM,MAAyC;AAC1D,UAAM,OAAO,oBACX,MACA;AAAA,MACE,UAAU;AAAA,MACV,MAAM;AAAA,MACN,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,MAC1B,YAAY;AAAA,MACZ,2BAA2B;AAAA,OAE7B;AAGF,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAGxB,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA;AAGd,QAAI,KAAK,mBAAmB;AAC1B,YAAM,IAAI;AAAA;AAGZ,QAAI,KAAK,2BAA2B;AAClC,YAAM,IAAI;AAAA;AAGZ,UAAM,aAAa,MAAM,8BAAc,KAAK;AAE5C,QAAI,CAAC,YAAY;AACf,YAAM,IAAI;AAAA;AAGZ,YAAQ,KACN,qBAAM,IACJ,6BAA6B,oBAAK,SAAS,QAAQ,OAAO;AAI9D,UAAM,4CAAgB;AAEtB,+DAA8B;AAE9B,UAAM,UAAU,IAAI,uBAAQ;AAG5B,UAAM,eAAe,MAAM,sDAAqB,SAAS,MAAM;AAC/D,QAAI,cAAc;AAChB,cAAQ;AACR,cAAQ,KAAK;AAAA;AAGf,UAAM,iBAAiB,MAAM,QAAQ,yBAAyB;AAAA,MAC5D,uBAAuB;AAAA;AAEzB,UAAM,EAAE,gBAAgB,KAAK,UAAU,gBAAgB,MAAM;AAC7D,UAAM,iCACJ,MAAM,QAAQ;AAChB,UAAM,EAAE;AAER,YAAQ;AACR,QAAI,+BAA+B,WAAW,SAAS,GAAG;AACxD,YAAM,aAAa,+BAA+B;AAClD,cAAQ,KACN,GAAG,WAAW,mBACZ,WAAW,SAAS,IAAI,MAAM;AAAA,WAG7B;AACL,cAAQ,KAAK;AAAA;AAGf,UAAM,uBAAuB,eAAe;AAC5C,QAAI,qBAAqB,SAAS,GAAG;AACnC,cAAQ,KACN,GAAG,qBAAM,OACP;AAAA,EAER,qBAAqB,KAAK;AAAA;AAIxB,QAAI;AACJ,QAAI;AACF,YAAM,EAAE,0BAA0B,MAAM,QAAQ;AAChD,qBAAe;AAAA,cACf;AACA,cAAQ;AAAA;AAGV,YAAQ;AACR,QAAI,aAAa,WAAW,GAAG;AAC7B,aAAO,qBAAM,YAAY;AAAA,WACpB;AACL,aAAO,0BACL,aAAa,SAAS,IAAI,MAAM;AAAA;AAAA,EACR,0BACxB,kDAA2B,cAAc,cAAc;AAAA,QACrD,iBAAiB;AAAA;AAAA;AAAA,EAIzB,qBAAM,YAAY;AAAA;AAAA;AAAA,EAIX,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBACT;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,eAAc;AAAA;AAGxD,WAAO,eAAc;AAAA;AAAA;AA9IlB;AAKU,AALV,cAKU,OAAO,uBAAO;AAAA;AAAA;AAAA,EAG7B,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,qBAAM,KAAK;AAAA;AAAA;AAAA,IAGT,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;",
  "names": []
}
