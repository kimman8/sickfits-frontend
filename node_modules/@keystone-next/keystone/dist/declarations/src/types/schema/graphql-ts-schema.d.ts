import * as graphqlTsSchema from '@graphql-ts/schema';
import type { FileUpload } from 'graphql-upload';
import { KeystoneContext } from '../context';
import { JSONValue } from '../utils';
export { Boolean, Float, ID, Int, String, enum, enumValues, arg, inputObject, list, nonNull, scalar, } from '@graphql-ts/schema/api-without-context';
export type { Arg, EnumType, EnumValue, InferValueFromArg, InferValueFromArgs, InferValueFromInputType, InputObjectType, InferValueFromOutputType, InputType, ListType, NonNullType, NullableInputType, ScalarType, } from '@graphql-ts/schema/api-without-context';
export { bindGraphQLSchemaAPIToContext } from '@graphql-ts/schema';
export { field, fields, interface, interfaceField, object, union } from './schema-api-with-context';
export declare type Context = KeystoneContext;
export declare const JSON: graphqlTsSchema.graphql.ScalarType<JSONValue>;
export declare const Upload: graphqlTsSchema.graphql.ScalarType<Promise<FileUpload>>;
export declare type NullableType = graphqlTsSchema.NullableType<Context>;
export declare type Type = graphqlTsSchema.Type<Context>;
export declare type NullableOutputType = graphqlTsSchema.NullableOutputType<Context>;
export declare type OutputType = graphqlTsSchema.OutputType<Context>;
export declare type Field<RootVal, Args extends Record<string, graphqlTsSchema.Arg<any>>, TType extends OutputType, Key extends string> = graphqlTsSchema.Field<RootVal, Args, TType, Key, Context>;
export declare type FieldResolver<RootVal, Args extends Record<string, graphqlTsSchema.Arg<any>>, TType extends OutputType> = graphqlTsSchema.FieldResolver<RootVal, Args, TType, Context>;
export declare type ObjectType<RootVal> = graphqlTsSchema.ObjectType<RootVal, Context>;
export declare type UnionType<RootVal> = graphqlTsSchema.UnionType<RootVal, Context>;
export declare type InterfaceType<RootVal, Fields extends Record<string, graphqlTsSchema.InterfaceField<any, OutputType, Context>>> = graphqlTsSchema.InterfaceType<RootVal, Fields, Context>;
export declare type InterfaceField<Args extends Record<string, graphqlTsSchema.Arg<any>>, TType extends OutputType> = graphqlTsSchema.InterfaceField<Args, TType, Context>;
