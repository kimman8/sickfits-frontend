{
  "version": 3,
  "sources": ["../../src/utils/getGithubIssueUrl.ts"],
  "sourcesContent": ["import newGithubIssueUrl from 'new-github-issue-url'\nimport open from 'open'\nimport prompt from 'prompts'\nimport stripAnsi from 'strip-ansi'\nimport { getPlatform } from '@prisma/get-platform'\nexport function getGithubIssueUrl({\n  title,\n  user = 'prisma',\n  repo = 'prisma',\n  template = 'bug_report.md',\n  body,\n}: {\n  title: string\n  user?: string\n  repo?: string\n  template?: string\n  body?: string\n}): string {\n  return newGithubIssueUrl({\n    user,\n    repo,\n    template,\n    title,\n    body,\n  })\n}\n\ninterface IssueOptions {\n  error: any\n  cliVersion: string\n  binaryVersion: string\n  command: string\n  prompt: Boolean\n  title?: string\n  reportId?: number\n}\n\nexport async function wouldYouLikeToCreateANewIssue(options: IssueOptions) {\n  let shouldCreateNewIssue\n\n  if (options.prompt) {\n    shouldCreateNewIssue = await prompt({\n      type: 'select',\n      name: 'value',\n      message: 'Would you like to create a Github issue?',\n      initial: 0,\n      choices: [\n        {\n          title: 'Yes',\n          value: true,\n          description: `Create a new GitHub issue`,\n        },\n        {\n          title: 'No',\n          value: false,\n          description: `Don't create a new GitHub issue`,\n        },\n      ],\n    })\n  } else {\n    shouldCreateNewIssue = { value: true }\n  }\n\n  if (shouldCreateNewIssue.value) {\n    const platform = await getPlatform()\n\n    const url = getGithubIssueUrl({\n      title: options.title ?? '',\n      body: issueTemplate(platform, options),\n    })\n    await open(url)\n  }\n}\n\nconst issueTemplate = (platform: string, options: IssueOptions) => {\n  return stripAnsi(`\nHi Prisma Team! Prisma Migrate just crashed. ${\n    options.reportId\n      ? `This is the report:\n  Report Id: ${options.reportId}`\n      : ''\n  }\n\n## Command\n\n\\`${options.command}\\`\n\n## Versions\n      \n| Name        | Version            |\n|-------------|--------------------|\n| Platform    | ${platform.padEnd(19)}| \n| Node        | ${process.version.padEnd(19)}| \n| Prisma CLI  | ${options.cliVersion.padEnd(19)}| \n| Binary      | ${options.binaryVersion.padEnd(19)}| \n\n## Error\n\\`\\`\\`\n${options.error}\n\\`\\`\\`\n\n`)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA8B;AAC9B,kBAAiB;AACjB,qBAAmB;AACnB,wBAAsB;AACtB,0BAA4B;AACrB,2BAA2B;AAAA,EAChC;AAAA,EACA,OAAO;AAAA,EACP,OAAO;AAAA,EACP,WAAW;AAAA,EACX;AAAA,GAOS;AACT,SAAO,yCAAkB;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAcJ,6CAAoD,SAAuB;AArC3E;AAsCE,MAAI;AAEJ,MAAI,QAAQ,QAAQ;AAClB,2BAAuB,MAAM,4BAAO;AAAA,MAClC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,QACP;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,UACP,aAAa;AAAA;AAAA,QAEf;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,UACP,aAAa;AAAA;AAAA;AAAA;AAAA,SAId;AACL,2BAAuB,EAAE,OAAO;AAAA;AAGlC,MAAI,qBAAqB,OAAO;AAC9B,UAAM,WAAW,MAAM;AAEvB,UAAM,MAAM,kBAAkB;AAAA,MAC5B,OAAO,cAAQ,UAAR,YAAiB;AAAA,MACxB,MAAM,cAAc,UAAU;AAAA;AAEhC,UAAM,yBAAK;AAAA;AAAA;AAIf,MAAM,gBAAgB,CAAC,UAAkB,YAA0B;AACjE,SAAO,+BAAU;AAAA,+CAEf,QAAQ,WACJ;AAAA,eACO,QAAQ,aACf;AAAA;AAAA;AAAA;AAAA,IAKJ,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMM,SAAS,OAAO;AAAA,kBAChB,QAAQ,QAAQ,OAAO;AAAA,kBACvB,QAAQ,WAAW,OAAO;AAAA,kBAC1B,QAAQ,cAAc,OAAO;AAAA;AAAA;AAAA;AAAA,EAI7C,QAAQ;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
