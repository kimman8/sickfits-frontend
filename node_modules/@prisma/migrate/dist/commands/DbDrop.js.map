{
  "version": 3,
  "sources": ["../../src/commands/DbDrop.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  getSchemaPath,\n  getSchemaDir,\n  HelpError,\n  isError,\n  isCi,\n  dropDatabase,\n  link,\n} from '@prisma/sdk'\nimport path from 'path'\nimport chalk from 'chalk'\nimport prompt from 'prompts'\nimport { getDbInfo } from '../utils/ensureDatabaseExists'\nimport { PreviewFlagError } from '../utils/flagErrors'\nimport { NoSchemaFoundError, DbNeedsForceError } from '../utils/errors'\nimport { printDatasource } from '../utils/printDatasource'\n\nexport class DbDrop implements Command {\n  public static new(): DbDrop {\n    return new DbDrop()\n  }\n\n  private static help = format(`\n${process.platform === 'win32' ? '' : chalk.bold('\uD83D\uDCA3  ')}Drop the database\n\n${chalk.bold.yellow('WARNING')} ${chalk.bold(\n    `Prisma db drop is currently in Preview (${link(\n      'https://pris.ly/d/preview',\n    )}).\nThere may be bugs and it's not recommended to use it in production environments.`,\n  )}\n${chalk.dim(\n  'When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.',\n)}\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma db drop [options] --preview-feature\n\n${chalk.bold('Options')}\n\n   -h, --help   Display this help message\n     --schema   Custom path to your Prisma schema\n  -f, --force   Skip the confirmation prompt\n\n${chalk.bold('Examples')}\n\n  Drop the database\n  ${chalk.dim('$')} prisma db drop --preview-feature\n\n  Specify a schema\n  ${chalk.dim('$')} prisma db drop --preview-feature --schema=./schema.prisma\n\n  Use --force to skip the confirmation prompt\n  ${chalk.dim('$')} prisma db drop --preview-feature --force\n`)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(argv, {\n      '--help': Boolean,\n      '-h': '--help',\n      '--preview-feature': Boolean,\n      '--force': Boolean,\n      '-f': '--force',\n      '--schema': String,\n      '--telemetry-information': String,\n    })\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (!args['--preview-feature']) {\n      throw new PreviewFlagError()\n    }\n\n    const schemaPath = await getSchemaPath(args['--schema'])\n\n    if (!schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    console.info(\n      chalk.dim(\n        `Prisma schema loaded from ${path.relative(process.cwd(), schemaPath)}`,\n      ),\n    )\n\n    await printDatasource(schemaPath)\n\n    const dbInfo = await getDbInfo(schemaPath)\n    const schemaDir = (await getSchemaDir(schemaPath))!\n\n    console.info() // empty line\n\n    if (!args['--force']) {\n      // We use prompts.inject() for testing in our CI\n      if (isCi() && Boolean((prompt as any)._injected?.length) === false) {\n        throw new DbNeedsForceError('drop')\n      }\n\n      // TODO for mssql\n      const confirmation = await prompt({\n        type: 'text',\n        name: 'value',\n        message: `Enter the ${dbInfo.dbType} ${dbInfo.schemaWord} name \"${\n          dbInfo.dbName\n        }\" to drop it.\\nLocation: \"${dbInfo.dbLocation}\".\\n${chalk.red(\n          'All data will be lost',\n        )}.`,\n      })\n      console.info() // empty line\n\n      if (!confirmation.value) {\n        console.info('Drop cancelled.')\n        process.exit(0)\n      } else if (confirmation.value !== dbInfo.dbName) {\n        throw Error(\n          `The ${dbInfo.schemaWord} name entered \"${confirmation.value}\" doesn't match \"${dbInfo.dbName}\".`,\n        )\n      }\n    }\n\n    if (await dropDatabase(dbInfo.url, schemaDir)) {\n      return `${process.platform === 'win32' ? '' : '\uD83D\uDE80  '}The ${\n        dbInfo.dbType\n      } ${dbInfo.schemaWord} \"${dbInfo.dbName}\" from \"${\n        dbInfo.dbLocation\n      }\" was successfully dropped.\\n`\n    } else {\n      return ''\n    }\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(`\\n${chalk.bold.red(`!`)} ${error}\\n${DbDrop.help}`)\n    }\n    return DbDrop.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAWO;AACP,kBAAiB;AACjB,mBAAkB;AAClB,qBAAmB;AACnB,kCAA0B;AAC1B,wBAAiC;AACjC,oBAAsD;AACtD,6BAAgC;AAEzB,sBAAgC;AAAA,SACvB,MAAc;AAC1B,WAAO,IAAI;AAAA;AAAA,QAsCA,MAAM,MAAyC;AA5D9D;AA6DI,UAAM,OAAO,oBAAI,MAAM;AAAA,MACrB,UAAU;AAAA,MACV,MAAM;AAAA,MACN,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,2BAA2B;AAAA;AAG7B,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAGxB,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA;AAGd,QAAI,CAAC,KAAK,sBAAsB;AAC9B,YAAM,IAAI;AAAA;AAGZ,UAAM,aAAa,MAAM,8BAAc,KAAK;AAE5C,QAAI,CAAC,YAAY;AACf,YAAM,IAAI;AAAA;AAGZ,YAAQ,KACN,qBAAM,IACJ,6BAA6B,oBAAK,SAAS,QAAQ,OAAO;AAI9D,UAAM,4CAAgB;AAEtB,UAAM,SAAS,MAAM,2CAAU;AAC/B,UAAM,YAAa,MAAM,6BAAa;AAEtC,YAAQ;AAER,QAAI,CAAC,KAAK,YAAY;AAEpB,UAAI,0BAAU,QAAS,6BAAe,cAAf,mBAA0B,YAAY,OAAO;AAClE,cAAM,IAAI,gCAAkB;AAAA;AAI9B,YAAM,eAAe,MAAM,4BAAO;AAAA,QAChC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,aAAa,OAAO,UAAU,OAAO,oBAC5C,OAAO;AAAA,aACoB,OAAO;AAAA,EAAiB,qBAAM,IACzD;AAAA;AAGJ,cAAQ;AAER,UAAI,CAAC,aAAa,OAAO;AACvB,gBAAQ,KAAK;AACb,gBAAQ,KAAK;AAAA,iBACJ,aAAa,UAAU,OAAO,QAAQ;AAC/C,cAAM,MACJ,OAAO,OAAO,4BAA4B,aAAa,yBAAyB,OAAO;AAAA;AAAA;AAK7F,QAAI,MAAM,6BAAa,OAAO,KAAK,YAAY;AAC7C,aAAO,GAAG,QAAQ,aAAa,UAAU,KAAK,oBAC5C,OAAO,UACL,OAAO,eAAe,OAAO,iBAC/B,OAAO;AAAA;AAAA,WAEJ;AACL,aAAO;AAAA;AAAA;AAAA,EAIJ,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBAAU;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,QAAO;AAAA;AAEpE,WAAO,QAAO;AAAA;AAAA;AA7HX;AAKU,AALV,OAKU,OAAO,uBAAO;AAAA,EAC7B,QAAQ,aAAa,UAAU,KAAK,qBAAM,KAAK;AAAA;AAAA,EAE/C,qBAAM,KAAK,OAAO,cAAc,qBAAM,KACpC,2CAA2C,qBACzC;AAAA;AAAA,EAIJ,qBAAM,IACN;AAAA;AAAA,EAGA,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,qBAAM,KAAK;AAAA;AAAA;AAAA,IAGT,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;",
  "names": []
}
