{
  "version": 3,
  "sources": ["../src/bin.ts"],
  "sourcesContent": ["#!/usr/bin/env ts-node\n\nprocess.env.NODE_NO_WARNINGS = '1'\n\nprocess.on('uncaughtException', (e) => {\n  console.log(e)\n})\nprocess.on('unhandledRejection', (e, promise) => {\n  console.log(String(e), String(promise))\n})\n\nimport { HelpError, isError, tryLoadEnvs, arg, getEnvPaths } from '@prisma/sdk'\n\nconst commandArray = process.argv.slice(2)\n\n// Parse CLI arguments\nconst args = arg(\n  commandArray,\n  {\n    '--schema': String,\n    '--telemetry-information': String,\n  },\n  false,\n  true,\n)\n\n//\n// Read .env file only if next to schema.prisma\n//\n// if the CLI is called without any command like `dev` we can ignore .env loading\nif (process.argv.length > 2) {\n  try {\n    const envPaths = getEnvPaths(args['--schema'])\n    const envData = tryLoadEnvs(envPaths, { conflictCheck: 'error' })\n    envData && envData.message && console.log(envData.message)\n  } catch (e) {\n    console.log(e)\n  }\n}\n\n/**\n * Dependencies\n */\nimport chalk from 'chalk'\nimport Debug from '@prisma/debug'\n\nimport { MigrateCommand } from './commands/MigrateCommand'\nimport { MigrateDev } from './commands/MigrateDev'\nimport { MigrateReset } from './commands/MigrateReset'\nimport { MigrateDeploy } from './commands/MigrateDeploy'\nimport { MigrateResolve } from './commands/MigrateResolve'\nimport { MigrateStatus } from './commands/MigrateStatus'\nimport { DbPush } from './commands/DbPush'\nimport { DbPull } from './commands/DbPull'\nimport { DbDrop } from './commands/DbDrop'\nimport { DbSeed } from './commands/DbSeed'\nimport { handlePanic } from './utils/handlePanic'\nimport { enginesVersion } from '@prisma/engines-version'\n\nconst packageJson = eval(`require('../package.json')`) // tslint:disable-line\n\n/**\n * Main function\n */\nasync function main(): Promise<number> {\n  // create a new CLI with our subcommands\n  const cli = MigrateCommand.new({\n    dev: MigrateDev.new(),\n    reset: MigrateReset.new(),\n    deploy: MigrateDeploy.new(),\n    status: MigrateStatus.new(),\n    resolve: MigrateResolve.new(),\n    // for convenient debugging\n    pull: DbPull.new(),\n    push: DbPush.new(),\n    drop: DbDrop.new(),\n    seed: DbSeed.new(),\n  })\n  // parse the arguments\n  const result = await cli.parse(commandArray)\n  if (result instanceof HelpError) {\n    console.error(result)\n    return 1\n  } else if (isError(result)) {\n    console.error(result)\n    return 1\n  }\n  console.log(result)\n\n  return 0\n}\nprocess.on('SIGINT', () => {\n  process.exit(1) // now the \"exit\" event will fire\n})\n\n/**\n * Run our program\n */\nmain()\n  .then((code) => {\n    if (code !== 0) {\n      process.exit(code)\n    }\n  })\n  .catch((error) => {\n    if (error.rustStack) {\n      handlePanic(\n        error,\n        packageJson.version,\n        enginesVersion,\n        commandArray.join(' '),\n      )\n        .catch((e) => {\n          if (Debug.enabled('migrate')) {\n            console.error(chalk.redBright.bold('Error: ') + e.stack)\n          } else {\n            console.error(chalk.redBright.bold('Error: ') + e.message)\n          }\n        })\n        .finally(() => {\n          process.exit(1)\n        })\n    } else {\n      if (Debug.enabled('migrate')) {\n        console.error(chalk.redBright.bold('Error: ') + error.stack)\n      } else {\n        console.error(chalk.redBright.bold('Error: ') + error.message)\n      }\n      process.exit(1)\n    }\n  })\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAWA,iBAAkE;AAgClE,mBAAkB;AAClB,mBAAkB;AAElB,4BAA+B;AAC/B,wBAA2B;AAC3B,0BAA6B;AAC7B,2BAA8B;AAC9B,4BAA+B;AAC/B,2BAA8B;AAC9B,oBAAuB;AACvB,oBAAuB;AACvB,oBAAuB;AACvB,oBAAuB;AACvB,yBAA4B;AAC5B,6BAA+B;AAvD/B,QAAQ,IAAI,mBAAmB;AAE/B,QAAQ,GAAG,qBAAqB,CAAC,MAAM;AACrC,UAAQ,IAAI;AAAA;AAEd,QAAQ,GAAG,sBAAsB,CAAC,GAAG,YAAY;AAC/C,UAAQ,IAAI,OAAO,IAAI,OAAO;AAAA;AAKhC,MAAM,eAAe,QAAQ,KAAK,MAAM;AAGxC,MAAM,OAAO,oBACX,cACA;AAAA,EACE,YAAY;AAAA,EACZ,2BAA2B;AAAA,GAE7B,OACA;AAOF,IAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,MAAI;AACF,UAAM,WAAW,4BAAY,KAAK;AAClC,UAAM,UAAU,4BAAY,UAAU,EAAE,eAAe;AACvD,eAAW,QAAQ,WAAW,QAAQ,IAAI,QAAQ;AAAA,WAC3C,GAAP;AACA,YAAQ,IAAI;AAAA;AAAA;AAuBhB,MAAM,cAAc,KAAK;AAKzB,sBAAuC;AAErC,QAAM,MAAM,qCAAe,IAAI;AAAA,IAC7B,KAAK,6BAAW;AAAA,IAChB,OAAO,iCAAa;AAAA,IACpB,QAAQ,mCAAc;AAAA,IACtB,QAAQ,mCAAc;AAAA,IACtB,SAAS,qCAAe;AAAA,IAExB,MAAM,qBAAO;AAAA,IACb,MAAM,qBAAO;AAAA,IACb,MAAM,qBAAO;AAAA,IACb,MAAM,qBAAO;AAAA;AAGf,QAAM,SAAS,MAAM,IAAI,MAAM;AAC/B,MAAI,kBAAkB,sBAAW;AAC/B,YAAQ,MAAM;AACd,WAAO;AAAA,aACE,wBAAQ,SAAS;AAC1B,YAAQ,MAAM;AACd,WAAO;AAAA;AAET,UAAQ,IAAI;AAEZ,SAAO;AAAA;AAET,QAAQ,GAAG,UAAU,MAAM;AACzB,UAAQ,KAAK;AAAA;AAMf,OACG,KAAK,CAAC,SAAS;AACd,MAAI,SAAS,GAAG;AACd,YAAQ,KAAK;AAAA;AAAA,GAGhB,MAAM,CAAC,UAAU;AAChB,MAAI,MAAM,WAAW;AACnB,wCACE,OACA,YAAY,SACZ,uCACA,aAAa,KAAK,MAEjB,MAAM,CAAC,MAAM;AACZ,UAAI,qBAAM,QAAQ,YAAY;AAC5B,gBAAQ,MAAM,qBAAM,UAAU,KAAK,aAAa,EAAE;AAAA,aAC7C;AACL,gBAAQ,MAAM,qBAAM,UAAU,KAAK,aAAa,EAAE;AAAA;AAAA,OAGrD,QAAQ,MAAM;AACb,cAAQ,KAAK;AAAA;AAAA,SAEZ;AACL,QAAI,qBAAM,QAAQ,YAAY;AAC5B,cAAQ,MAAM,qBAAM,UAAU,KAAK,aAAa,MAAM;AAAA,WACjD;AACL,cAAQ,MAAM,qBAAM,UAAU,KAAK,aAAa,MAAM;AAAA;AAExD,YAAQ,KAAK;AAAA;AAAA;",
  "names": []
}
