{
  "version": 3,
  "sources": ["../../src/commands/DbCommand.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  Commands,\n  format,\n  HelpError,\n  isError,\n  unknownCommand,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\n\nexport class DbCommand implements Command {\n  public static new(cmds: Commands): DbCommand {\n    return new DbCommand(cmds)\n  }\n\n  private static help = format(`\n${\n  process.platform === 'win32' ? '' : chalk.bold('\uD83C\uDFCB\uFE0F  ')\n}Manage your database schema and lifecycle during development.\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma db [command] [options]\n\n${chalk.bold('Options')}\n\n  -h, --help   Display this help message\n    --schema   Custom path to your Prisma schema\n\n${chalk.bold('Commands')}\n        pull   Pull the state from the database to the Prisma schema using introspection\n        push   Push the state from Prisma schema to the database during prototyping\n        seed   Seed your database ${chalk.dim('(preview)')} \n\n${chalk.bold('Examples')}\n\n  Using prisma db pull\n  ${chalk.dim('$')} prisma db pull\n\n  Using prisma db push\n  ${chalk.dim('$')} prisma db push\n\n  Using prisma db seed\n  ${chalk.dim('$')} prisma db seed --preview-feature\n`)\n\n  private constructor(private readonly cmds: Commands) {}\n\n  /* eslint-disable-next-line @typescript-eslint/require-await */\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(argv, {\n      '--help': Boolean,\n      '-h': '--help',\n      '--preview-feature': Boolean,\n      '--telemetry-information': String,\n    })\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    // display help for help flag or no subcommand\n    if (args._.length === 0 || args['--help']) {\n      return this.help()\n    }\n\n    // check if we have that subcommand\n    const cmd = this.cmds[args._[0]]\n    if (cmd) {\n      const argsForCmd = args['--preview-feature']\n        ? [...args._.slice(1), `--preview-feature`]\n        : args._.slice(1)\n      return cmd.parse(argsForCmd)\n    }\n\n    return unknownCommand(DbCommand.help, args._[0])\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(\n        `\\n${chalk.bold.red(`!`)} ${error}\\n${DbCommand.help}`,\n      )\n    }\n    return DbCommand.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAQO;AACP,mBAAkB;AAEX,yBAAmC;AAAA,EAoChC,YAA6B,MAAgB;AAAhB;AAAA;AAAA,SAnCvB,IAAI,MAA2B;AAC3C,WAAO,IAAI,WAAU;AAAA;AAAA,QAqCV,MAAM,MAAyC;AAC1D,UAAM,OAAO,oBAAI,MAAM;AAAA,MACrB,UAAU;AAAA,MACV,MAAM;AAAA,MACN,qBAAqB;AAAA,MACrB,2BAA2B;AAAA;AAG7B,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAIxB,QAAI,KAAK,EAAE,WAAW,KAAK,KAAK,WAAW;AACzC,aAAO,KAAK;AAAA;AAId,UAAM,MAAM,KAAK,KAAK,KAAK,EAAE;AAC7B,QAAI,KAAK;AACP,YAAM,aAAa,KAAK,uBACpB,CAAC,GAAG,KAAK,EAAE,MAAM,IAAI,uBACrB,KAAK,EAAE,MAAM;AACjB,aAAO,IAAI,MAAM;AAAA;AAGnB,WAAO,+BAAe,WAAU,MAAM,KAAK,EAAE;AAAA;AAAA,EAGxC,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBACT;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,WAAU;AAAA;AAGpD,WAAO,WAAU;AAAA;AAAA;AA1Ed;AAKU,AALV,UAKU,OAAO,uBAAO;AAAA,EAE7B,QAAQ,aAAa,UAAU,KAAK,qBAAM,KAAK;AAAA;AAAA,EAG/C,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,qBAAM,KAAK;AAAA;AAAA;AAAA,oCAGuB,qBAAM,IAAI;AAAA;AAAA,EAE5C,qBAAM,KAAK;AAAA;AAAA;AAAA,IAGT,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;AAAA;AAAA,IAGV,qBAAM,IAAI;AAAA;",
  "names": []
}
