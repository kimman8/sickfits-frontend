{
  "version": 3,
  "sources": ["../../src/utils/handlePanic.ts"],
  "sourcesContent": ["import chalk from 'chalk'\nimport { RustPanic, sendPanic, link, isCi } from '@prisma/sdk'\nimport prompt from 'prompts'\nimport { wouldYouLikeToCreateANewIssue } from './getGithubIssueUrl'\n\nexport async function handlePanic(\n  error: RustPanic,\n  cliVersion: string,\n  binaryVersion: string,\n  command: string,\n): Promise<void> {\n  if (isCi() && Boolean((prompt as any)._injected?.length) === false) {\n    throw error\n  }\n\n  await panicDialog(error, cliVersion, binaryVersion, command)\n}\n\nasync function panicDialog(error, cliVersion, binaryVersion, command) {\n  const errorMessage = error.message\n    .split('\\n')\n    .slice(0, Math.max(20, process.stdout.rows))\n    .join('\\n')\n\n  console.log(`${chalk.red('Oops, an unexpected error occured!')}\n${chalk.red(errorMessage)}\n\n${chalk.bold('Please help us improve Prisma by submitting an error report.')}\n${chalk.bold(\n  'Error reports never contain personal or other sensitive information.',\n)}\n${chalk.dim(`Learn more: ${link('https://pris.ly/d/telemetry')}`)}\n`)\n\n  const response = await prompt({\n    type: 'select',\n    name: 'value',\n    message: 'Submit error report',\n    initial: 0,\n    choices: [\n      {\n        title: 'Yes',\n        value: true,\n        description: `Send error report once`,\n      },\n      {\n        title: 'No',\n        value: false,\n        description: `Don't send error report`,\n      },\n    ],\n  })\n\n  const reportFailedMessage = `${chalk.bold.red(\n    'Oops. We could not send the error report.',\n  )}`\n\n  if (response.value) {\n    let reportId: number | void\n    try {\n      console.log('Submitting...')\n      reportId = await sendPanic(error, cliVersion, binaryVersion)\n    } catch (error) {\n      console.log(reportFailedMessage)\n    }\n\n    if (reportId) {\n      console.log(\n        `\\n${chalk.bold(\n          `We successfully received the error report id: ${reportId}`,\n        )}`,\n      )\n      console.log(`\\n${chalk.bold('Thanks a lot for your help! \uD83D\uDE4F')}`)\n    }\n  }\n  await wouldYouLikeToCreateANewIssue({\n    prompt: !response.value,\n    error,\n    cliVersion,\n    binaryVersion,\n    command,\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,iBAAiD;AACjD,qBAAmB;AACnB,+BAA8C;AAE9C,2BACE,OACA,YACA,eACA,SACe;AAVjB;AAWE,MAAI,0BAAU,QAAS,6BAAe,cAAf,mBAA0B,YAAY,OAAO;AAClE,UAAM;AAAA;AAGR,QAAM,YAAY,OAAO,YAAY,eAAe;AAAA;AAGtD,2BAA2B,OAAO,YAAY,eAAe,SAAS;AACpE,QAAM,eAAe,MAAM,QACxB,MAAM,MACN,MAAM,GAAG,KAAK,IAAI,IAAI,QAAQ,OAAO,OACrC,KAAK;AAER,UAAQ,IAAI,GAAG,qBAAM,IAAI;AAAA,EACzB,qBAAM,IAAI;AAAA;AAAA,EAEV,qBAAM,KAAK;AAAA,EACX,qBAAM,KACN;AAAA,EAEA,qBAAM,IAAI,eAAe,qBAAK;AAAA;AAG9B,QAAM,WAAW,MAAM,4BAAO;AAAA,IAC5B,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,MACP;AAAA,QACE,OAAO;AAAA,QACP,OAAO;AAAA,QACP,aAAa;AAAA;AAAA,MAEf;AAAA,QACE,OAAO;AAAA,QACP,OAAO;AAAA,QACP,aAAa;AAAA;AAAA;AAAA;AAKnB,QAAM,sBAAsB,GAAG,qBAAM,KAAK,IACxC;AAGF,MAAI,SAAS,OAAO;AAClB,QAAI;AACJ,QAAI;AACF,cAAQ,IAAI;AACZ,iBAAW,MAAM,0BAAU,OAAO,YAAY;AAAA,aACvC,QAAP;AACA,cAAQ,IAAI;AAAA;AAGd,QAAI,UAAU;AACZ,cAAQ,IACN;AAAA,EAAK,qBAAM,KACT,iDAAiD;AAGrD,cAAQ,IAAI;AAAA,EAAK,qBAAM,KAAK;AAAA;AAAA;AAGhC,QAAM,4DAA8B;AAAA,IAClC,QAAQ,CAAC,SAAS;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;",
  "names": []
}
