import { i as initConfig } from '../../../dist/initConfig-f536b388.esm.js';
import { c as createSystem } from '../../../dist/createSystem-0871d001.esm.js';
import { c as createApolloServerMicro } from '../../../dist/createApolloServer-7b3e0bd8.esm.js';
import '@babel/runtime/helpers/objectSpread2';
import 'path';
import 'uuid';
import 'cuid';
import '../../../dist/sqlite-943cbaa7.esm.js';
import 'decimal.js';
import '@graphql-ts/schema/api-without-context';
import '@graphql-ts/schema';
import 'graphql-type-json';
import 'graphql-upload/public/GraphQLUpload.js';
import '@graphql-ts/schema/api-with-context';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../../../dist/package-path-7ba957ae.esm.js';
import '../../../dist/core-3f0f7b15.esm.js';
import 'graphql';
import 'fs-extra';
import 'fast-glob';
import 'prettier';
import 'resolve';
import '@emotion/hash';
import '../../../dist/admin-meta-graphql-c4fe434c.esm.js';
import '@apollo/client';
import '../../../session/dist/keystone.esm.js';
import 'cookie';
import '@hapi/iron';
import 'uid-safe';
import '@babel/runtime/helpers/classPrivateFieldInitSpec';
import '@babel/runtime/helpers/classPrivateFieldGet';
import '@babel/runtime/helpers/classPrivateFieldSet';
import 'p-limit';
import 'pluralize';
import 'apollo-server-errors';
import 'image-type';
import 'image-size';
import '../../../fields/types/image/utils/dist/keystone.esm.js';
import 'node-fetch';
import 'form-data';
import 'crypto';
import 'stream';
import 'filenamify';
import '@sindresorhus/slugify';
import '../../../fields/types/file/utils/dist/keystone.esm.js';
import 'apollo-server-micro';
import 'apollo-server-express';

function nextGraphQLAPIRoute(keystoneConfig, prismaClient) {
  var _keystoneConfig$graph;

  const initializedKeystoneConfig = initConfig(keystoneConfig);
  const {
    graphQLSchema,
    getKeystone
  } = createSystem(initializedKeystoneConfig);
  const keystone = getKeystone(prismaClient);
  keystone.connect();
  const apolloServer = createApolloServerMicro({
    graphQLSchema,
    createContext: keystone.createContext,
    sessionStrategy: initializedKeystoneConfig.session,
    graphqlConfig: initializedKeystoneConfig.graphql,
    connectionPromise: keystone.connect()
  });
  return apolloServer.createHandler({
    path: ((_keystoneConfig$graph = keystoneConfig.graphql) === null || _keystoneConfig$graph === void 0 ? void 0 : _keystoneConfig$graph.path) || '/api/graphql'
  });
}

export { nextGraphQLAPIRoute };
