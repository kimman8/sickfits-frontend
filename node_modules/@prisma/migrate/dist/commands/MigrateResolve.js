var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  MigrateResolve: () => MigrateResolve
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_path = __toModule(require("path"));
var import_ensureDatabaseExists = __toModule(require("../utils/ensureDatabaseExists"));
var import_Migrate = __toModule(require("../Migrate"));
var import_flagErrors = __toModule(require("../utils/flagErrors"));
var import_errors = __toModule(require("../utils/errors"));
var import_detectOldMigrate = __toModule(require("../utils/detectOldMigrate"));
var import_printDatasource = __toModule(require("../utils/printDatasource"));
const _MigrateResolve = class {
  static new() {
    return new _MigrateResolve();
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--applied": String,
      "--rolled-back": String,
      "--experimental": Boolean,
      "--early-access-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    }, false);
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithNewMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithNewMigrateError();
    }
    const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    console.info(import_chalk.default.dim(`Prisma schema loaded from ${import_path.default.relative(process.cwd(), schemaPath)}`));
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    if (!args["--applied"] && !args["--rolled-back"]) {
      throw new Error(`--applied or --rolled-back must be part of the command like:
${import_chalk.default.bold.green((0, import_sdk.getCommandWithExecutor)("prisma migrate resolve --applied 20201231000000_example"))}
${import_chalk.default.bold.green((0, import_sdk.getCommandWithExecutor)("prisma migrate resolve --rolled-back 20201231000000_example"))}`);
    } else if (args["--applied"] && args["--rolled-back"]) {
      throw new Error("Pass either --applied or --rolled-back, not both.");
    }
    if (args["--applied"]) {
      if (typeof args["--applied"] !== "string" || args["--applied"].length === 0) {
        throw new Error(`--applied value must be a string like ${import_chalk.default.bold.green((0, import_sdk.getCommandWithExecutor)("prisma migrate resolve --applied 20201231000000_example"))}`);
      }
      await (0, import_ensureDatabaseExists.ensureCanConnectToDatabase)(schemaPath);
      const migrate = new import_Migrate.Migrate(schemaPath);
      try {
        await migrate.markMigrationApplied({
          migrationId: args["--applied"]
        });
      } finally {
        migrate.stop();
      }
      return `Migration ${args["--applied"]} marked as applied.`;
    } else {
      if (typeof args["--rolled-back"] !== "string" || args["--rolled-back"].length === 0) {
        throw new Error(`--rolled-back value must be a string like ${import_chalk.default.bold.green((0, import_sdk.getCommandWithExecutor)("prisma migrate resolve --rolled-back 20201231000000_example"))}`);
      }
      await (0, import_ensureDatabaseExists.ensureCanConnectToDatabase)(schemaPath);
      const migrate = new import_Migrate.Migrate(schemaPath);
      try {
        await migrate.markMigrationRolledBack({
          migrationId: args["--rolled-back"]
        });
      } finally {
        migrate.stop();
      }
      return `Migration ${args["--rolled-back"]} marked as rolled back.`;
    }
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateResolve.help}`);
    }
    return _MigrateResolve.help;
  }
};
let MigrateResolve = _MigrateResolve;
MigrateResolve.help = (0, import_sdk.format)(`
Resolve issues with database migrations in deployment databases: 
- recover from failed migrations
- baseline databases when starting to use Prisma Migrate on existing databases
- reconcile hotfixes done manually on databases with your migration history

Run "prisma migrate status" to identify if you need to use resolve.

Read more about resolving migration history issues: ${(0, import_sdk.link)("https://pris.ly/d/migrate-resolve")}
 
${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate resolve [options]
  
${import_chalk.default.bold("Options")}

    -h, --help   Display this help message
      --schema   Custom path to your Prisma schema
     --applied   Record a specific migration as applied
 --rolled-back   Record a specific migration as rolled back

${import_chalk.default.bold("Examples")}

  Update migrations table, recording a specific migration as applied 
  ${import_chalk.default.dim("$")} prisma migrate resolve --applied 20201231000000_add_users_table

  Update migrations table, recording a specific migration as rolled back
  ${import_chalk.default.dim("$")} prisma migrate resolve --rolled-back 20201231000000_add_users_table

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate resolve --rolled-back 20201231000000_add_users_table --schema=./schema.prisma
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateResolve
});
