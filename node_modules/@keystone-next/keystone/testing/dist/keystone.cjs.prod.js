'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var Path = require('path');
var crypto = require('crypto');
var fs = require('fs');
var supertest = require('supertest');
var memoizeOne = require('memoize-one');
var artifacts_dist_keystone = require('../../artifacts/dist/keystone.cjs.prod.js');
var migrations = require('../../dist/migrations-3772d5cc.cjs.prod.js');
var createSystem = require('../../dist/createSystem-2b4eda4f.cjs.prod.js');
var createAdminUIMiddleware = require('../../dist/createAdminUIMiddleware-ba7fa348.cjs.prod.js');
var initConfig = require('../../dist/initConfig-66ce50eb.cjs.prod.js');
require('apollo-server-micro');
require('apollo-server-express');
require('@babel/runtime/helpers/objectWithoutProperties');
require('graphql');
require('cookie');
require('@hapi/iron');
require('uid-safe');
require('../../dist/sqlite-bb0466dc.cjs.prod.js');
require('fs-extra');
require('@prisma/sdk');
require('prettier');
require('../../dist/utils-d6a80347.cjs.prod.js');
require('prompts');
require('@babel/runtime/helpers/defineProperty');
require('../../dist/core-fe91e1fc.cjs.prod.js');
require('decimal.js');
require('@graphql-ts/schema/api-without-context');
require('@graphql-ts/schema');
require('graphql-type-json');
require('graphql-upload/public/GraphQLUpload.js');
require('@graphql-ts/schema/api-with-context');
require('fast-glob');
require('resolve');
require('@emotion/hash');
require('../../dist/admin-meta-graphql-050d49f5.cjs.prod.js');
require('@apollo/client');
require('../../session/dist/keystone.cjs.prod.js');
require('@babel/runtime/helpers/classPrivateFieldInitSpec');
require('@babel/runtime/helpers/classPrivateFieldGet');
require('@babel/runtime/helpers/classPrivateFieldSet');
require('p-limit');
require('pluralize');
require('apollo-server-errors');
require('uuid');
require('image-type');
require('image-size');
require('../../fields/types/image/utils/dist/keystone.cjs.prod.js');
require('node-fetch');
require('form-data');
require('stream');
require('filenamify');
require('@sindresorhus/slugify');
require('../../fields/types/file/utils/dist/keystone.cjs.prod.js');
require('@prisma/migrate');
require('chalk');
require('cors');
require('express');
require('graphql-upload');
require('../../dist/createApolloServer-76f83b78.cjs.prod.js');
require('url');
require('cuid');
require('../../dist/package-path-1738a735.cjs.prod.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var Path__default = /*#__PURE__*/_interopDefault(Path);
var crypto__default = /*#__PURE__*/_interopDefault(crypto);
var fs__default = /*#__PURE__*/_interopDefault(fs);
var supertest__default = /*#__PURE__*/_interopDefault(supertest);
var memoizeOne__default = /*#__PURE__*/_interopDefault(memoizeOne);

const _hashPrismaSchema = memoizeOne__default['default'](prismaSchema => crypto__default['default'].createHash('md5').update(prismaSchema).digest('hex'));

const _alreadyGeneratedProjects = new Set();

async function setupTestEnv({
  config: _config
}) {
  // Force the UI to always be disabled.
  const config = initConfig.initConfig(_objectSpread(_objectSpread({}, _config), {}, {
    ui: {
      isDisabled: true
    }
  }));
  const {
    graphQLSchema,
    getKeystone
  } = createSystem.createSystem(config);
  const artifacts = await artifacts_dist_keystone.getCommittedArtifacts(graphQLSchema, config);

  const hash = _hashPrismaSchema(artifacts.prisma);

  const artifactPath = Path__default['default'].resolve('.keystone', 'tests', hash);

  if (!_alreadyGeneratedProjects.has(hash)) {
    _alreadyGeneratedProjects.add(hash);

    fs__default['default'].mkdirSync(artifactPath, {
      recursive: true
    });
    await artifacts_dist_keystone.writeCommittedArtifacts(artifacts, artifactPath);
    await artifacts_dist_keystone.generateNodeModulesArtifacts(graphQLSchema, config, artifactPath);
  }

  await migrations.pushPrismaSchemaToDatabase(config.db.url, artifacts.prisma, Path__default['default'].join(artifactPath, 'schema.prisma'), true // shouldDropDatabase
  );
  const {
    connect,
    disconnect,
    createContext
  } = getKeystone(artifacts_dist_keystone.requirePrismaClient(artifactPath)); // (config, graphQLSchema, createContext, dev, projectAdminPath, isVerbose)

  const app = await createAdminUIMiddleware.createExpressServer(config, graphQLSchema, createContext);

  const graphQLRequest = ({
    query,
    variables = undefined,
    operationName
  }) => {
    var _config$graphql;

    return supertest__default['default'](app).post(((_config$graphql = config.graphql) === null || _config$graphql === void 0 ? void 0 : _config$graphql.path) || '/api/graphql').send({
      query,
      variables,
      operationName
    }).set('Accept', 'application/json');
  };

  return {
    connect,
    disconnect,
    testArgs: {
      context: createContext(),
      graphQLRequest,
      app
    }
  };
}
function setupTestRunner({
  config
}) {
  return testFn => async () => {
    // Reset the database to be empty for every test.
    const {
      connect,
      disconnect,
      testArgs
    } = await setupTestEnv({
      config
    });
    await connect();

    try {
      return await testFn(testArgs);
    } finally {
      await disconnect();
    }
  };
}

exports.setupTestEnv = setupTestEnv;
exports.setupTestRunner = setupTestRunner;
