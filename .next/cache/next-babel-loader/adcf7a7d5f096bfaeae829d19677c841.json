{"ast":null,"code":"import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { createUploadLink } from 'apollo-upload-client';\nimport withApollo from 'next-with-apollo';\nimport { endpoint, prodEndpoint } from '../config';\n\nfunction createClient({\n  headers,\n  initialState\n}) {\n  return new ApolloClient({\n    link: ApolloLink.from([onError(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n      if (networkError) console.log(`[Network error]: ${networkError}. Backend is unreachable. Is it running?`);\n    }), // this uses apollo-link-http under the hood, so all the options here come from that package\n    createUploadLink({\n      uri: true ? endpoint : prodEndpoint,\n      fetchOptions: {\n        credentials: 'include'\n      },\n      // pass the headers along from this request. This enables SSR with logged in state\n      headers\n    })]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {// TODO: We will add this together!\n            // allProducts: paginationField(),\n          }\n        }\n      }\n    }).restore(initialState || {})\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree\n});","map":{"version":3,"sources":["C:/Users/kim/Desktop/js/sickfits-frontend/sickfits-frontend/lib/withData.js"],"names":["ApolloClient","ApolloLink","InMemoryCache","onError","getDataFromTree","createUploadLink","withApollo","endpoint","prodEndpoint","createClient","headers","initialState","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","fetchOptions","credentials","cache","typePolicies","Query","fields","restore"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,aAAnC,QAAwD,gBAAxD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAtB,EAAiD;AAC/C,SAAO,IAAIX,YAAJ,CAAiB;AACtBY,IAAAA,IAAI,EAAEX,UAAU,CAACY,IAAX,CAAgB,CACpBV,OAAO,CAAC,CAAC;AAAEW,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,KAAqC;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAKF,UAAIJ,YAAJ,EACEK,OAAO,CAACC,GAAR,CACG,oBAAmBN,YAAa,0CADnC;AAGH,KAXM,CADa,EAapB;AACAV,IAAAA,gBAAgB,CAAC;AACfiB,MAAAA,GAAG,EAAE,OAAyCf,QAAzC,GAAoDC,YAD1C;AAEfe,MAAAA,YAAY,EAAE;AACZC,QAAAA,WAAW,EAAE;AADD,OAFC;AAKf;AACAd,MAAAA;AANe,KAAD,CAdI,CAAhB,CADgB;AAwBtBe,IAAAA,KAAK,EAAE,IAAIvB,aAAJ,CAAkB;AACvBwB,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,CACN;AACA;AAFM;AADH;AADK;AADS,KAAlB,EASJC,OATI,CASIlB,YAAY,IAAI,EATpB;AAxBe,GAAjB,CAAP;AAmCD;;AAED,eAAeL,UAAU,CAACG,YAAD,EAAe;AAAEL,EAAAA;AAAF,CAAf,CAAzB","sourcesContent":["import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\r\nimport { onError } from '@apollo/link-error';\r\nimport { getDataFromTree } from '@apollo/client/react/ssr';\r\nimport { createUploadLink } from 'apollo-upload-client';\r\nimport withApollo from 'next-with-apollo';\r\nimport { endpoint, prodEndpoint } from '../config';\r\n\r\nfunction createClient({ headers, initialState }) {\r\n  return new ApolloClient({\r\n    link: ApolloLink.from([\r\n      onError(({ graphQLErrors, networkError }) => {\r\n        if (graphQLErrors)\r\n          graphQLErrors.forEach(({ message, locations, path }) =>\r\n            console.log(\r\n              `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n            )\r\n          );\r\n        if (networkError)\r\n          console.log(\r\n            `[Network error]: ${networkError}. Backend is unreachable. Is it running?`\r\n          );\r\n      }),\r\n      // this uses apollo-link-http under the hood, so all the options here come from that package\r\n      createUploadLink({\r\n        uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\r\n        fetchOptions: {\r\n          credentials: 'include',\r\n        },\r\n        // pass the headers along from this request. This enables SSR with logged in state\r\n        headers,\r\n      }),\r\n    ]),\r\n    cache: new InMemoryCache({\r\n      typePolicies: {\r\n        Query: {\r\n          fields: {\r\n            // TODO: We will add this together!\r\n            // allProducts: paginationField(),\r\n          },\r\n        },\r\n      },\r\n    }).restore(initialState || {}),\r\n  });\r\n}\r\n\r\nexport default withApollo(createClient, { getDataFromTree });\r\n"]},"metadata":{},"sourceType":"module"}