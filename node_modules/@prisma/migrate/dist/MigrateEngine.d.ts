import { EngineArgs, EngineResults } from './types';
export interface MigrateEngineOptions {
    projectDir: string;
    schemaPath: string;
    debug?: boolean;
    enabledPreviewFeatures?: string[];
}
export interface RPCPayload {
    id: number;
    jsonrpc: string;
    method: string;
    params: any;
}
export declare class EngineError extends Error {
    code: number;
    constructor(message: string, code: number);
}
export declare class MigrateEngine {
    private projectDir;
    private debug;
    private child?;
    private schemaPath;
    private listeners;
    /**  _All_ the logs from the engine process. */
    private messages;
    private lastRequest?;
    /** The fields of the last engine log event with an `ERROR` level. */
    private lastError;
    private initPromise?;
    private enabledPreviewFeatures?;
    constructor({ projectDir, debug, schemaPath, enabledPreviewFeatures, }: MigrateEngineOptions);
    stop(): void;
    devDiagnostic(args: EngineArgs.DevDiagnosticInput): Promise<EngineResults.DevDiagnosticOutput>;
    listMigrationDirectories(args: EngineArgs.ListMigrationDirectoriesInput): Promise<EngineResults.ListMigrationDirectoriesOutput>;
    markMigrationApplied(args: EngineArgs.MarkMigrationAppliedInput): Promise<void>;
    markMigrationRolledBack(args: EngineArgs.MarkMigrationRolledBackInput): Promise<void>;
    diagnoseMigrationHistory(args: EngineArgs.DiagnoseMigrationHistoryInput): Promise<EngineResults.DiagnoseMigrationHistoryOutput>;
    planMigration(args: EngineArgs.PlanMigrationInput): Promise<EngineResults.PlanMigrationOutput>;
    evaluateDataLoss(args: EngineArgs.EvaluateDataLossInput): Promise<EngineResults.EvaluateDataLossOutput>;
    createMigration(args: EngineArgs.CreateMigrationInput): Promise<EngineResults.CreateMigrationOutput>;
    applyMigrations(args: EngineArgs.ApplyMigrationsInput): Promise<EngineResults.ApplyMigrationsOutput>;
    reset(): Promise<void>;
    getDatabaseVersion(): Promise<string>;
    schemaPush(args: EngineArgs.SchemaPush): Promise<EngineResults.SchemaPush>;
    debugPanic(): Promise<any>;
    private rejectAll;
    private registerCallback;
    private handleResponse;
    private init;
    private internalInit;
    private runCommand;
    private getRPCPayload;
}
