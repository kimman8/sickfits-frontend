{
  "version": 3,
  "sources": ["../../src/utils/setupMysql.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport path from 'path'\nimport { createDatabase, uriToCredentials } from '@prisma/sdk'\nimport mariadb from 'mariadb'\n\nexport type SetupParams = {\n  connectionString: string\n  dirname: string\n}\n\nexport async function setupMysql(options: SetupParams): Promise<void> {\n  const { connectionString } = options\n  const { dirname } = options\n  const credentials = uriToCredentials(connectionString)\n\n  let schema = `\n  CREATE DATABASE IF NOT EXISTS \\`tests-migrate-shadowdb\\`;\n  CREATE DATABASE IF NOT EXISTS \\`${credentials.database}\\`;\n  `\n  if (dirname !== '') {\n    schema += fs.readFileSync(path.join(dirname, 'setup.sql'), 'utf-8')\n  }\n\n  await createDatabase(connectionString).catch((e) => console.error(e))\n\n  const db = await mariadb.createConnection({\n    host: credentials.host,\n    port: credentials.port,\n    database: credentials.database,\n    user: credentials.user,\n    password: credentials.password,\n    multipleStatements: true,\n  })\n\n  await db.query(schema)\n  await db.end()\n}\n\nexport async function tearDownMysql(options: SetupParams) {\n  const { connectionString } = options\n\n  const credentials = uriToCredentials(connectionString)\n\n  const credentialsClone = { ...credentials }\n  credentialsClone.database = 'mysql'\n\n  const db = await mariadb.createConnection({\n    host: credentialsClone.host,\n    port: credentialsClone.port,\n    database: credentialsClone.database,\n    user: credentialsClone.user,\n    password: credentialsClone.password,\n    multipleStatements: true,\n  })\n\n  await db.query(`\n    DROP DATABASE IF EXISTS \\`${credentials.database}\\`;\n  `)\n  await db.end()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AACjB,iBAAiD;AACjD,qBAAoB;AAOpB,0BAAiC,SAAqC;AACpE,QAAM,EAAE,qBAAqB;AAC7B,QAAM,EAAE,YAAY;AACpB,QAAM,cAAc,iCAAiB;AAErC,MAAI,SAAS;AAAA;AAAA,oCAEqB,YAAY;AAAA;AAE9C,MAAI,YAAY,IAAI;AAClB,cAAU,kBAAG,aAAa,oBAAK,KAAK,SAAS,cAAc;AAAA;AAG7D,QAAM,+BAAe,kBAAkB,MAAM,CAAC,MAAM,QAAQ,MAAM;AAElE,QAAM,KAAK,MAAM,uBAAQ,iBAAiB;AAAA,IACxC,MAAM,YAAY;AAAA,IAClB,MAAM,YAAY;AAAA,IAClB,UAAU,YAAY;AAAA,IACtB,MAAM,YAAY;AAAA,IAClB,UAAU,YAAY;AAAA,IACtB,oBAAoB;AAAA;AAGtB,QAAM,GAAG,MAAM;AACf,QAAM,GAAG;AAAA;AAGX,6BAAoC,SAAsB;AACxD,QAAM,EAAE,qBAAqB;AAE7B,QAAM,cAAc,iCAAiB;AAErC,QAAM,mBAAmB,KAAK;AAC9B,mBAAiB,WAAW;AAE5B,QAAM,KAAK,MAAM,uBAAQ,iBAAiB;AAAA,IACxC,MAAM,iBAAiB;AAAA,IACvB,MAAM,iBAAiB;AAAA,IACvB,UAAU,iBAAiB;AAAA,IAC3B,MAAM,iBAAiB;AAAA,IACvB,UAAU,iBAAiB;AAAA,IAC3B,oBAAoB;AAAA;AAGtB,QAAM,GAAG,MAAM;AAAA,gCACe,YAAY;AAAA;AAE1C,QAAM,GAAG;AAAA;",
  "names": []
}
