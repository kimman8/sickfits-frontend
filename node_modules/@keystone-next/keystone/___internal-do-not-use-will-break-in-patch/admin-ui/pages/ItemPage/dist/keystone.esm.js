import _extends from '@babel/runtime/helpers/esm/extends';
import copyToClipboard from 'clipboard-copy';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useMemo, Fragment, useState, useCallback, memo, useRef, useEffect } from 'react';
import { Button } from '@keystone-ui/button';
import { jsx, useTheme, Heading, Center, Box, Stack, Text } from '@keystone-ui/core';
import { LoadingDots } from '@keystone-ui/loading';
import { ClipboardIcon } from '@keystone-ui/icons/icons/ClipboardIcon';
import { ChevronRightIcon } from '@keystone-ui/icons/icons/ChevronRightIcon';
import { AlertDialog } from '@keystone-ui/modals';
import { Notice } from '@keystone-ui/notice';
import { useToasts } from '@keystone-ui/toast';
import { Tooltip } from '@keystone-ui/tooltip';
import { FieldLabel, TextInput } from '@keystone-ui/fields';
import { m as makeDataGetter } from '../../../../../dist/dataGetter-ec7ff440.esm.js';
import { F as Fields } from '../../../../../dist/Fields-81cbbfb4.esm.js';
import '../../../../../dist/getRootGraphQLFieldsFromFieldController-0b023a9c.esm.js';
import { d as deserializeValue, u as useChangedFieldsAndDataForUpdate, a as useInvalidFields } from '../../../../../dist/useInvalidFields-2b707479.esm.js';
import { gql, useQuery, useMutation } from '@apollo/client';
import { useList } from '../../../../../admin-ui/context/dist/keystone.esm.js';
import { P as PageContainer, H as HEADER_HEIGHT } from '../../../../../dist/PageContainer-9addc774.esm.js';
import { G as GraphQLErrorNotice } from '../../../../../dist/GraphQLErrorNotice-6b520996.esm.js';
import 'fast-deep-equal';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import '@babel/runtime/helpers/objectSpread2';
import '@emotion/weak-memoize';
import 'graphql';
import 'apollo-upload-client';
import '@emotion/hash';
import '../../../../../dist/core-3f0f7b15.esm.js';
import '../../../../../dist/sqlite-943cbaa7.esm.js';
import 'decimal.js';
import '@graphql-ts/schema/api-without-context';
import '@graphql-ts/schema';
import 'graphql-type-json';
import 'graphql-upload/public/GraphQLUpload.js';
import '@graphql-ts/schema/api-with-context';
import '../../../../../dist/admin-meta-graphql-c4fe434c.esm.js';
import '@keystone-ui/popover';
import '@keystone-ui/icons/icons/MoreHorizontalIcon';
import '../../../../../admin-ui/router/dist/keystone.esm.js';
import '../../../../../dist/SignoutButton-ca318e88.esm.js';

const _excluded = ["children"];
/**
 * NOTE: should probably come from the DS?
 */

const Container = _ref => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, _excluded);

  return jsx("div", _extends({
    css: {
      minWidth: 0,
      // fix flex text truncation
      maxWidth: 1080 // marginLeft: 'auto',
      // marginRight: 'auto',

    }
  }, props), children);
};

function useEventCallback(callback) {
  const callbackRef = useRef(callback);
  const cb = useCallback((...args) => {
    return callbackRef.current(...args);
  }, []);
  useEffect(() => {
    callbackRef.current = callback;
  });
  return cb;
}

function ItemForm({
  listKey,
  itemGetter,
  selectedFields,
  fieldModes,
  showDelete
}) {
  var _useMemo, _state$item$data, _state$item$data2;

  const list = useList(listKey);
  const [update, {
    loading,
    error,
    data
  }] = useMutation(gql`mutation ($data: ${list.gqlNames.updateInputName}!, $id: ID!) {
      item: ${list.gqlNames.updateMutationName}(where: { id: $id }, data: $data) {
        ${selectedFields}
      }
    }`, {
    errorPolicy: 'all'
  });
  itemGetter = (_useMemo = useMemo(() => {
    if (data) {
      return makeDataGetter(data, error === null || error === void 0 ? void 0 : error.graphQLErrors).get('item');
    }
  }, [data, error])) !== null && _useMemo !== void 0 ? _useMemo : itemGetter;
  const [state, setValue] = useState(() => {
    const value = deserializeValue(list.fields, itemGetter);
    return {
      value,
      item: itemGetter
    };
  });

  if (!loading && state.item.data !== itemGetter.data && (itemGetter.errors || []).every(x => {
    var _x$path;

    return ((_x$path = x.path) === null || _x$path === void 0 ? void 0 : _x$path.length) !== 1;
  })) {
    const value = deserializeValue(list.fields, itemGetter);
    setValue({
      value,
      item: itemGetter
    });
  }

  const {
    changedFields,
    dataForUpdate
  } = useChangedFieldsAndDataForUpdate(list.fields, state.item, state.value);
  const invalidFields = useInvalidFields(list.fields, state.value);
  const [forceValidation, setForceValidation] = useState(false);
  const toasts = useToasts();
  const onSave = useEventCallback(() => {
    const newForceValidation = invalidFields.size !== 0;
    setForceValidation(newForceValidation);
    if (newForceValidation) return;
    update({
      variables: {
        data: dataForUpdate,
        id: state.item.get('id').data
      }
    }) // TODO -- Experimenting with less detail in the toasts, so the data lines are commented
    // out below. If we're happy with this, clean up the unused lines.
    .then(({
      /* data, */
      errors
    }) => {
      // we're checking for path.length === 1 because errors with a path larger than 1 will
      // be field level errors which are handled seperately and do not indicate a failure to
      // update the item
      const error = errors === null || errors === void 0 ? void 0 : errors.find(x => {
        var _x$path2;

        return ((_x$path2 = x.path) === null || _x$path2 === void 0 ? void 0 : _x$path2.length) === 1;
      });

      if (error) {
        toasts.addToast({
          title: 'Failed to update item',
          tone: 'negative',
          message: error.message
        });
      } else {
        toasts.addToast({
          // title: data.item[list.labelField] || data.item.id,
          tone: 'positive',
          title: 'Saved successfully' // message: 'Saved successfully',

        });
      }
    }).catch(err => {
      toasts.addToast({
        title: 'Failed to update item',
        tone: 'negative',
        message: err.message
      });
    });
  });
  const labelFieldValue = (_state$item$data = state.item.data) === null || _state$item$data === void 0 ? void 0 : _state$item$data[list.labelField];
  const itemId = (_state$item$data2 = state.item.data) === null || _state$item$data2 === void 0 ? void 0 : _state$item$data2.id;
  return jsx(Box, {
    marginTop: "xlarge"
  }, jsx(GraphQLErrorNotice, {
    networkError: error === null || error === void 0 ? void 0 : error.networkError // we're checking for path.length === 1 because errors with a path larger than 1 will be field level errors
    // which are handled seperately and do not indicate a failure to update the item
    ,
    errors: error === null || error === void 0 ? void 0 : error.graphQLErrors.filter(x => {
      var _x$path3;

      return ((_x$path3 = x.path) === null || _x$path3 === void 0 ? void 0 : _x$path3.length) === 1;
    })
  }), jsx(Fields, {
    fieldModes: fieldModes,
    fields: list.fields,
    forceValidation: forceValidation,
    invalidFields: invalidFields,
    onChange: useCallback(value => {
      setValue(state => ({
        item: state.item,
        value: value(state.value)
      }));
    }, [setValue]),
    value: state.value
  }), jsx(Toolbar, {
    onSave: onSave,
    hasChangedFields: !!changedFields.size,
    onReset: useEventCallback(() => {
      setValue(state => ({
        item: state.item,
        value: deserializeValue(list.fields, state.item)
      }));
    }),
    loading: loading,
    deleteButton: useMemo(() => showDelete ? jsx(DeleteButton, {
      list: list,
      itemLabel: labelFieldValue !== null && labelFieldValue !== void 0 ? labelFieldValue : itemId,
      itemId: itemId
    }) : undefined, [showDelete, list, labelFieldValue, itemId])
  }));
}

function DeleteButton({
  itemLabel,
  itemId,
  list
}) {
  const toasts = useToasts();
  const [deleteItem, {
    loading
  }] = useMutation(gql`mutation ($id: ID!) {
      ${list.gqlNames.deleteMutationName}(where: { id: $id }) {
        id
      }
    }`, {
    variables: {
      id: itemId
    }
  });
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();
  return jsx(Fragment, null, jsx(Button, {
    tone: "negative",
    onClick: () => {
      setIsOpen(true);
    }
  }, "Delete"), jsx(AlertDialog // TODO: change the copy in the title and body of the modal
  , {
    title: "Delete Confirmation",
    isOpen: isOpen,
    tone: "negative",
    actions: {
      confirm: {
        label: 'Delete',
        action: async () => {
          try {
            await deleteItem();
          } catch (err) {
            return toasts.addToast({
              title: `Failed to delete ${list.singular} item: ${itemLabel}`,
              message: err.message,
              tone: 'negative'
            });
          }

          router.push(`/${list.path}`);
          return toasts.addToast({
            title: itemLabel,
            message: `Deleted ${list.singular} item successfully`,
            tone: 'positive'
          });
        },
        loading
      },
      cancel: {
        label: 'Cancel',
        action: () => {
          setIsOpen(false);
        }
      }
    }
  }, "Are you sure you want to delete ", jsx("strong", null, itemLabel), "?"));
}

const getItemPage = props => () => jsx(ItemPage, props);

const ItemPage = ({
  listKey
}) => {
  var _dataGetter$data2, _dataGetter$data2$key, _dataGetter$data2$key2, _dataGetter$data2$key3;

  const router = useRouter();
  const {
    id
  } = router.query;
  const list = useList(listKey);
  const {
    palette,
    spacing,
    typography
  } = useTheme();
  const {
    query,
    selectedFields
  } = useMemo(() => {
    let selectedFields = Object.keys(list.fields).map(fieldPath => {
      return list.fields[fieldPath].controller.graphqlSelection;
    }).join('\n');
    return {
      selectedFields,
      query: gql`
        query ItemPage($id: ID!, $listKey: String!) {
          item: ${list.gqlNames.itemQueryName}(where: {id: $id}) {
            ${selectedFields}
          }
          keystone {
            adminMeta {
              list(key: $listKey) {
                hideCreate
                hideDelete
                fields {
                  path
                  itemView(id: $id) {
                    fieldMode
                  }
                }
              }
            }
          }
        }
      `
    };
  }, [list]);
  let {
    data,
    error,
    loading
  } = useQuery(query, {
    variables: {
      id,
      listKey
    },
    errorPolicy: 'all',
    skip: id === undefined
  });
  loading || (loading = id === undefined);
  const dataGetter = makeDataGetter(data, error === null || error === void 0 ? void 0 : error.graphQLErrors);
  let itemViewFieldModesByField = useMemo(() => {
    var _dataGetter$data, _dataGetter$data$keys, _dataGetter$data$keys2, _dataGetter$data$keys3, _dataGetter$data$keys4;

    let itemViewFieldModesByField = {};
    (_dataGetter$data = dataGetter.data) === null || _dataGetter$data === void 0 ? void 0 : (_dataGetter$data$keys = _dataGetter$data.keystone) === null || _dataGetter$data$keys === void 0 ? void 0 : (_dataGetter$data$keys2 = _dataGetter$data$keys.adminMeta) === null || _dataGetter$data$keys2 === void 0 ? void 0 : (_dataGetter$data$keys3 = _dataGetter$data$keys2.list) === null || _dataGetter$data$keys3 === void 0 ? void 0 : (_dataGetter$data$keys4 = _dataGetter$data$keys3.fields) === null || _dataGetter$data$keys4 === void 0 ? void 0 : _dataGetter$data$keys4.forEach(field => {
      var _field$itemView;

      if (field !== null && field.path !== null && (field === null || field === void 0 ? void 0 : (_field$itemView = field.itemView) === null || _field$itemView === void 0 ? void 0 : _field$itemView.fieldMode) != null) {
        itemViewFieldModesByField[field.path] = field.itemView.fieldMode;
      }
    });
    return itemViewFieldModesByField;
  }, [(_dataGetter$data2 = dataGetter.data) === null || _dataGetter$data2 === void 0 ? void 0 : (_dataGetter$data2$key = _dataGetter$data2.keystone) === null || _dataGetter$data2$key === void 0 ? void 0 : (_dataGetter$data2$key2 = _dataGetter$data2$key.adminMeta) === null || _dataGetter$data2$key2 === void 0 ? void 0 : (_dataGetter$data2$key3 = _dataGetter$data2$key2.list) === null || _dataGetter$data2$key3 === void 0 ? void 0 : _dataGetter$data2$key3.fields]);
  const metaQueryErrors = dataGetter.get('keystone').errors; // NOTE: The create button is always hidden on this page for now, while we work on the
  // placment of the save and delete buttons.

  const hideCreate = true; // data?.keystone.adminMeta.list.hideCreate;

  return jsx(PageContainer, {
    header: jsx(Container, {
      css: {
        alignItems: 'center',
        display: 'flex',
        flex: 1,
        justifyContent: 'space-between'
      }
    }, jsx("div", {
      css: {
        alignItems: 'center',
        display: 'flex',
        flex: 1,
        minWidth: 0
      }
    }, jsx(Heading, {
      type: "h3"
    }, jsx(Link, {
      href: `/${list.path}`,
      passHref: true
    }, jsx("a", {
      css: {
        textDecoration: 'none'
      }
    }, list.label))), jsx("div", {
      css: {
        color: palette.neutral500,
        marginLeft: spacing.xsmall,
        marginRight: spacing.xsmall
      }
    }, jsx(ChevronRightIcon, null)), jsx(Heading, {
      as: "h1",
      type: "h3",
      css: {
        minWidth: 0,
        maxWidth: '100%',
        overflow: 'hidden',
        flex: 1,
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
      }
    }, loading ? 'Loading...' : data && data.item && (data.item[list.labelField] || data.item.id) || id)), !hideCreate )
  }, loading ? jsx(Center, {
    css: {
      height: `calc(100vh - ${HEADER_HEIGHT}px)`
    }
  }, jsx(LoadingDots, {
    label: "Loading item data",
    size: "large",
    tone: "passive"
  })) : metaQueryErrors ? jsx(Box, {
    marginY: "xlarge"
  }, jsx(Notice, {
    tone: "negative"
  }, metaQueryErrors[0].message)) : jsx(Fragment, null, jsx(ColumnLayout, null, jsx(ItemForm, {
    fieldModes: itemViewFieldModesByField,
    selectedFields: selectedFields,
    showDelete: !data.keystone.adminMeta.list.hideDelete,
    listKey: listKey,
    itemGetter: dataGetter.get('item')
  }), jsx(StickySidebar, null, jsx(FieldLabel, null, "Item ID"), jsx("div", {
    css: {
      display: 'flex',
      alignItems: 'center'
    }
  }, jsx(TextInput, {
    css: {
      marginRight: spacing.medium,
      fontFamily: typography.fontFamily.monospace,
      fontSize: typography.fontSize.small
    },
    readOnly: true,
    value: data.item.id
  }), jsx(Tooltip, {
    content: "Copy ID"
  }, props => jsx(Button, _extends({}, props, {
    "aria-label": "Copy ID",
    onClick: () => {
      copyToClipboard(data.item.id);
    }
  }), jsx(ClipboardIcon, {
    size: "small"
  }))))))));
};
// ------------------------------


const Toolbar = /*#__PURE__*/memo(function Toolbar({
  hasChangedFields,
  loading,
  onSave,
  onReset,
  deleteButton
}) {
  const {
    colors,
    spacing
  } = useTheme();
  return jsx("div", {
    css: {
      background: colors.background,
      borderTop: `1px solid ${colors.border}`,
      bottom: 0,
      display: 'flex',
      justifyContent: 'space-between',
      marginTop: spacing.xlarge,
      paddingBottom: spacing.xlarge,
      paddingTop: spacing.xlarge,
      position: 'sticky',
      zIndex: 10
    }
  }, jsx(Stack, {
    align: "center",
    across: true,
    gap: "small"
  }, jsx(Button, {
    isDisabled: !hasChangedFields,
    isLoading: loading,
    weight: "bold",
    tone: "active",
    onClick: onSave
  }, "Save changes"), hasChangedFields ? jsx(Button, {
    weight: "none",
    onClick: onReset
  }, "Reset changes") : jsx(Text, {
    weight: "medium",
    paddingX: "large",
    color: "neutral600"
  }, "No changes")), deleteButton);
});

const ColumnLayout = props => {
  const {
    spacing
  } = useTheme();
  return (// this container must be relative to catch absolute children
    // particularly the "expanded" document-field, which needs a height of 100%
    jsx(Container, {
      css: {
        position: 'relative',
        height: '100%'
      }
    }, jsx("div", _extends({
      css: {
        alignItems: 'start',
        display: 'grid',
        gap: spacing.xlarge,
        gridTemplateColumns: `2fr 1fr`
      }
    }, props)))
  );
};

const StickySidebar = props => {
  const {
    spacing
  } = useTheme();
  return jsx("div", _extends({
    css: {
      marginTop: spacing.xlarge,
      marginBottom: spacing.xxlarge,
      position: 'sticky',
      top: spacing.xlarge
    }
  }, props));
};

export { getItemPage };
