{
  "version": 3,
  "sources": ["../../src/utils/setupMSSQL.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport mssql from 'mssql'\nimport path from 'path'\nimport { URL } from 'url'\n\nexport type SetupParams = {\n  connectionString: string\n  dirname: string\n}\nfunction getMSSQLConfig(url: string): mssql.config {\n  const connectionUrl = new URL(url)\n  return {\n    user: connectionUrl.username,\n    password: connectionUrl.password,\n    server: connectionUrl.hostname,\n    port: Number(connectionUrl.port),\n    database: connectionUrl.pathname.substring(1),\n    pool: {\n      max: 1,\n    },\n    options: {\n      enableArithAbort: false,\n      trustServerCertificate: true, // change to true for local dev / self-signed certs\n    },\n  }\n}\n\nexport async function setupMSSQL(options: SetupParams): Promise<void> {\n  const { connectionString } = options\n  const { dirname } = options\n  const config = getMSSQLConfig(connectionString)\n  const connectionPool = new mssql.ConnectionPool(config)\n  const connection = await connectionPool.connect()\n\n  try {\n    await connection.query(`\n      CREATE DATABASE [tests-migrate-shadowdb]\n      CREATE DATABASE [tests-migrate]\n    `)\n  } catch (e) {\n    console.warn(e)\n  }\n\n  if (dirname !== '') {\n    let schema = 'USE [tests-migrate]\\n'\n    schema += fs.readFileSync(path.join(dirname, 'setup.sql'), 'utf-8')\n    await connection.query(schema)\n  }\n\n  await connection.close()\n}\n\nexport async function tearDownMSSQL(options: SetupParams) {\n  const { connectionString } = options\n  const config = getMSSQLConfig(connectionString)\n  const connectionPool = new mssql.ConnectionPool(config)\n  const connection = await connectionPool.connect()\n\n  await connection.query(`\n    DROP DATABASE IF EXISTS \"tests-migrate-shadowdb\";\n    DROP DATABASE IF EXISTS \"tests-migrate\";\n`)\n  await connection.close()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,mBAAkB;AAClB,kBAAiB;AACjB,iBAAoB;AAMpB,wBAAwB,KAA2B;AACjD,QAAM,gBAAgB,IAAI,eAAI;AAC9B,SAAO;AAAA,IACL,MAAM,cAAc;AAAA,IACpB,UAAU,cAAc;AAAA,IACxB,QAAQ,cAAc;AAAA,IACtB,MAAM,OAAO,cAAc;AAAA,IAC3B,UAAU,cAAc,SAAS,UAAU;AAAA,IAC3C,MAAM;AAAA,MACJ,KAAK;AAAA;AAAA,IAEP,SAAS;AAAA,MACP,kBAAkB;AAAA,MAClB,wBAAwB;AAAA;AAAA;AAAA;AAK9B,0BAAiC,SAAqC;AACpE,QAAM,EAAE,qBAAqB;AAC7B,QAAM,EAAE,YAAY;AACpB,QAAM,SAAS,eAAe;AAC9B,QAAM,iBAAiB,IAAI,qBAAM,eAAe;AAChD,QAAM,aAAa,MAAM,eAAe;AAExC,MAAI;AACF,UAAM,WAAW,MAAM;AAAA;AAAA;AAAA;AAAA,WAIhB,GAAP;AACA,YAAQ,KAAK;AAAA;AAGf,MAAI,YAAY,IAAI;AAClB,QAAI,SAAS;AACb,cAAU,kBAAG,aAAa,oBAAK,KAAK,SAAS,cAAc;AAC3D,UAAM,WAAW,MAAM;AAAA;AAGzB,QAAM,WAAW;AAAA;AAGnB,6BAAoC,SAAsB;AACxD,QAAM,EAAE,qBAAqB;AAC7B,QAAM,SAAS,eAAe;AAC9B,QAAM,iBAAiB,IAAI,qBAAM,eAAe;AAChD,QAAM,aAAa,MAAM,eAAe;AAExC,QAAM,WAAW,MAAM;AAAA;AAAA;AAAA;AAIvB,QAAM,WAAW;AAAA;",
  "names": []
}
