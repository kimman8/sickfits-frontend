{
  "version": 3,
  "sources": ["../src/MigrateEngine.ts"],
  "sourcesContent": ["import Debug from '@prisma/debug'\nimport {\n  BinaryType,\n  ErrorArea,\n  resolveBinary,\n  RustPanic,\n  MigrateEngineLogLine,\n  MigrateEngineExitCode,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport { ChildProcess, spawn } from 'child_process'\nimport { EngineArgs, EngineResults } from './types'\nimport byline from './utils/byline'\nconst debugRpc = Debug('prisma:migrateEngine:rpc')\nconst debugStderr = Debug('prisma:migrateEngine:stderr')\nconst debugStdin = Debug('prisma:migrateEngine:stdin')\n\nexport interface MigrateEngineOptions {\n  projectDir: string\n  schemaPath: string\n  debug?: boolean\n  enabledPreviewFeatures?: string[]\n}\n\nexport interface RPCPayload {\n  id: number\n  jsonrpc: string\n  method: string\n  params: any\n}\n\nexport class EngineError extends Error {\n  public code: number\n  constructor(message: string, code: number) {\n    super(message)\n    this.code = code\n  }\n}\n\nlet messageId = 1\n\n/* tslint:disable */\nexport class MigrateEngine {\n  private projectDir: string\n  private debug: boolean\n  private child?: ChildProcess\n  private schemaPath: string\n  private listeners: { [key: string]: (result: any, err?: any) => any } = {}\n  /**  _All_ the logs from the engine process. */\n  private messages: string[] = []\n  private lastRequest?: any\n  /** The fields of the last engine log event with an `ERROR` level. */\n  private lastError: MigrateEngineLogLine['fields'] | null = null\n  private initPromise?: Promise<void>\n  private enabledPreviewFeatures?: string[]\n  constructor({\n    projectDir,\n    debug = false,\n    schemaPath,\n    enabledPreviewFeatures,\n  }: MigrateEngineOptions) {\n    this.projectDir = projectDir\n    this.schemaPath = schemaPath\n    if (debug) {\n      Debug.enable('MigrateEngine*')\n    }\n    this.debug = debug\n    this.enabledPreviewFeatures = enabledPreviewFeatures\n  }\n  public stop(): void {\n    this.child!.kill()\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-return */\n\n  // Runs dev diagnostic\n  public devDiagnostic(\n    args: EngineArgs.DevDiagnosticInput,\n  ): Promise<EngineResults.DevDiagnosticOutput> {\n    return this.runCommand(this.getRPCPayload('devDiagnostic', args))\n  }\n  // List migrations in migration directory.\n  public listMigrationDirectories(\n    args: EngineArgs.ListMigrationDirectoriesInput,\n  ): Promise<EngineResults.ListMigrationDirectoriesOutput> {\n    return this.runCommand(this.getRPCPayload('listMigrationDirectories', args))\n  }\n  // Mark the specified migration as applied in the migrations table. There are two possible cases:\n  // - The migration is already in the table, but in a failed state. In this case, we will mark it as rolled back, then create a new entry.\n  // - The migration is not in the table. We will create a new entry in the migrations table. The `started_at` and `finished_at` will be the same.\n  // - If it is already applied, we return a user-facing error.\n  public markMigrationApplied(\n    args: EngineArgs.MarkMigrationAppliedInput,\n  ): Promise<void> {\n    return this.runCommand(this.getRPCPayload('markMigrationApplied', args))\n  }\n  // Mark an existing failed migration as rolled back in the migrations table. It will still be there, but ignored for all purposes except as audit trail.\n  public markMigrationRolledBack(\n    args: EngineArgs.MarkMigrationRolledBackInput,\n  ): Promise<void> {\n    return this.runCommand(this.getRPCPayload('markMigrationRolledBack', args))\n  }\n  public diagnoseMigrationHistory(\n    args: EngineArgs.DiagnoseMigrationHistoryInput,\n  ): Promise<EngineResults.DiagnoseMigrationHistoryOutput> {\n    return this.runCommand(this.getRPCPayload('diagnoseMigrationHistory', args))\n  }\n  public planMigration(\n    args: EngineArgs.PlanMigrationInput,\n  ): Promise<EngineResults.PlanMigrationOutput> {\n    return this.runCommand(this.getRPCPayload('planMigration', args))\n  }\n  public evaluateDataLoss(\n    args: EngineArgs.EvaluateDataLossInput,\n  ): Promise<EngineResults.EvaluateDataLossOutput> {\n    return this.runCommand(this.getRPCPayload('evaluateDataLoss', args))\n  }\n  public createMigration(\n    args: EngineArgs.CreateMigrationInput,\n  ): Promise<EngineResults.CreateMigrationOutput> {\n    return this.runCommand(this.getRPCPayload('createMigration', args))\n  }\n  public applyMigrations(\n    args: EngineArgs.ApplyMigrationsInput,\n  ): Promise<EngineResults.ApplyMigrationsOutput> {\n    return this.runCommand(this.getRPCPayload('applyMigrations', args))\n  }\n  public reset(): Promise<void> {\n    return this.runCommand(this.getRPCPayload('reset', undefined))\n  }\n  public getDatabaseVersion(): Promise<string> {\n    return this.runCommand(this.getRPCPayload('getDatabaseVersion', undefined))\n  }\n  public schemaPush(\n    args: EngineArgs.SchemaPush,\n  ): Promise<EngineResults.SchemaPush> {\n    return this.runCommand(this.getRPCPayload('schemaPush', args))\n  }\n  public debugPanic(): Promise<any> {\n    return this.runCommand(this.getRPCPayload('debugPanic', undefined))\n  }\n\n  /* eslint-enable @typescript-eslint/no-unsafe-return */\n  private rejectAll(err: any): void {\n    Object.entries(this.listeners).map(([id, listener]) => {\n      listener(null, err)\n      delete this.listeners[id]\n    })\n  }\n  private registerCallback(\n    id: number,\n    callback: (result: any, err?: Error) => any,\n  ): void {\n    this.listeners[id] = callback\n  }\n  private handleResponse(response: any): void {\n    let result\n    try {\n      result = JSON.parse(response)\n    } catch (e) {\n      console.error(\n        `Could not parse migration engine response: ${response.slice(0, 200)}`,\n      )\n    }\n    if (result) {\n      if (result.id) {\n        if (!this.listeners[result.id]) {\n          console.error(`Got result for unknown id ${result.id}`)\n        }\n        if (this.listeners[result.id]) {\n          this.listeners[result.id](result)\n          delete this.listeners[result.id]\n        }\n      } else {\n        // If the error happens before the JSON-RPC sever starts, the error doesn't have an id\n        if (result.is_panic) {\n          throw new Error(`Response: ${result.message}`)\n        } else if (result.message) {\n          console.error(chalk.red(`Response: ${result.message}`))\n        } else {\n          console.error(chalk.red(`Response: ${JSON.stringify(result)}`))\n        }\n      }\n    }\n  }\n  private init(): Promise<void> {\n    if (!this.initPromise) {\n      this.initPromise = this.internalInit()\n    }\n\n    return this.initPromise\n  }\n  private internalInit(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { PWD, ...rest } = process.env\n        const binaryPath = await resolveBinary(BinaryType.migrationEngine)\n        debugRpc('starting migration engine with binary: ' + binaryPath)\n        const args = ['-d', this.schemaPath]\n        if (\n          this.enabledPreviewFeatures &&\n          Array.isArray(this.enabledPreviewFeatures) &&\n          this.enabledPreviewFeatures.length > 0\n        ) {\n          args.push(\n            ...[\n              '--enabled-preview-features',\n              this.enabledPreviewFeatures.join(','),\n            ],\n          )\n        }\n        this.child = spawn(binaryPath, args, {\n          cwd: this.projectDir,\n          stdio: ['pipe', 'pipe', this.debug ? process.stderr : 'pipe'],\n          env: {\n            ...rest,\n            SERVER_ROOT: this.projectDir,\n            RUST_LOG: 'info',\n            RUST_BACKTRACE: '1',\n          },\n        })\n\n        this.child.on('error', (err) => {\n          console.error('[migration-engine] error: %s', err)\n          this.rejectAll(err)\n          reject(err)\n        })\n\n        this.child.on('exit', (code: number | null): void => {\n          const exitWithErr = (err: RustPanic | Error): void => {\n            this.rejectAll(err)\n            reject(err)\n          }\n          const engineMessage =\n            this.lastError?.message || this.messages.join('\\n')\n          const handlePanic = () => {\n            const stackTrace = this.messages.join('\\n')\n            exitWithErr(\n              new RustPanic(\n                serializePanic(engineMessage),\n                stackTrace,\n                this.lastRequest,\n                ErrorArea.LIFT_CLI,\n                this.schemaPath,\n              ),\n            )\n          }\n\n          switch (code) {\n            case MigrateEngineExitCode.Success:\n              break\n            case MigrateEngineExitCode.Error:\n              exitWithErr(\n                new Error(`Error in migration engine: ${engineMessage}`),\n              )\n              break\n            case MigrateEngineExitCode.Panic:\n              handlePanic()\n              break\n            // treat unknown error codes as panics\n            default:\n              handlePanic()\n          }\n        })\n\n        this.child.stdin!.on('error', (err) => {\n          debugStdin(err)\n        })\n\n        byline(this.child.stderr).on('data', (msg) => {\n          const data = String(msg)\n          debugStderr(data)\n\n          try {\n            const json: MigrateEngineLogLine = JSON.parse(data)\n\n            if (json.fields?.migrate_action === 'log') {\n              // TODO uncomment in a separate PR and update snapshots\n              //console.info(json.fields.message)\n            }\n\n            this.messages.push(json.fields.message)\n\n            if (json.level === 'ERROR') {\n              this.lastError = json.fields\n            }\n          } catch (e) {\n            //\n          }\n        })\n\n        byline(this.child.stdout).on('data', (line) => {\n          this.handleResponse(String(line))\n        })\n\n        setImmediate(() => {\n          resolve()\n        })\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n  private async runCommand(request: RPCPayload): Promise<any> {\n    if (process.env.FORCE_PANIC_MIGRATION_ENGINE) {\n      request = this.getRPCPayload('debugPanic', undefined)\n    }\n    await this.init()\n    if (this.child?.killed) {\n      throw new Error(\n        `Can't execute ${JSON.stringify(\n          request,\n        )} because migration engine already exited.`,\n      )\n    }\n    return new Promise((resolve, reject) => {\n      this.registerCallback(request.id, (response, err) => {\n        if (err) {\n          return reject(err)\n        }\n        // can be null, for reset RPC for example\n        if (response.result !== undefined) {\n          resolve(response.result)\n        } else {\n          if (response.error) {\n            debugRpc(response)\n            if (response.error.data?.is_panic) {\n              // if (response.error.data && response.error.data.message) {\n              const message =\n                response.error.data?.error?.message ?? response.error.message\n              reject(\n                // Handle error and displays the interactive dialog to send panic error\n                new RustPanic(\n                  message,\n                  response.error.data.message,\n                  this.lastRequest,\n                  ErrorArea.LIFT_CLI,\n                  this.schemaPath,\n                ),\n              )\n            } else if (response.error.data?.message) {\n              // Print known error code & message from engine\n              // See known errors at https://github.com/prisma/specs/tree/master/errors#prisma-sdk\n              let message = `${chalk.redBright(response.error.data.message)}\\n`\n              if (response.error.data?.error_code) {\n                message =\n                  chalk.redBright(`${response.error.data.error_code}\\n\\n`) +\n                  message\n                reject(new EngineError(message, response.error.data.error_code))\n              } else {\n                reject(new Error(message))\n              }\n            } else {\n              reject(\n                new Error(\n                  `${chalk.redBright(\n                    'Error in RPC',\n                  )}\\n Request: ${JSON.stringify(\n                    request,\n                    null,\n                    2,\n                  )}\\nResponse: ${JSON.stringify(response, null, 2)}\\n${\n                    response.error.message\n                  }\\n`,\n                ),\n              )\n            }\n          } else {\n            reject(\n              new Error(\n                `Got invalid RPC response without .result property: ${JSON.stringify(\n                  response,\n                )}`,\n              ),\n            )\n          }\n        }\n      })\n      if (this.child!.stdin!.destroyed) {\n        throw new Error(\n          `Can't execute ${JSON.stringify(\n            request,\n          )} because migration engine is destroyed.`,\n        )\n      }\n      debugRpc('SENDING RPC CALL', JSON.stringify(request))\n      this.child!.stdin!.write(JSON.stringify(request) + '\\n')\n      this.lastRequest = request\n    })\n  }\n\n  private getRPCPayload(method: string, params: any): RPCPayload {\n    return {\n      id: messageId++,\n      jsonrpc: '2.0',\n      method,\n      params: {\n        ...params,\n      },\n    }\n  }\n}\n\n/** The full message with context we return to the user in case of engine panic. */\nfunction serializePanic(log: string): string {\n  return `${chalk.red.bold('Error in migration engine.\\nReason: ')}${chalk.red(\n    `${log}`,\n  )}\n\nPlease create an issue with your \\`schema.prisma\\` at\n${chalk.underline('https://github.com/prisma/prisma/issues/new')}\\n`\n}\n"],
  "mappings": "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",
  "names": []
}
