var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  MigrateStatus: () => MigrateStatus
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_path = __toModule(require("path"));
var import_ensureDatabaseExists = __toModule(require("../utils/ensureDatabaseExists"));
var import_Migrate = __toModule(require("../Migrate"));
var import_flagErrors = __toModule(require("../utils/flagErrors"));
var import_errors = __toModule(require("../utils/errors"));
var import_debug = __toModule(require("@prisma/debug"));
var import_detectOldMigrate = __toModule(require("../utils/detectOldMigrate"));
var import_printDatasource = __toModule(require("../utils/printDatasource"));
const debug = (0, import_debug.default)("prisma:migrate:status");
const _MigrateStatus = class {
  static new() {
    return new _MigrateStatus();
  }
  async parse(argv) {
    var _a, _b;
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--experimental": Boolean,
      "--early-access-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    }, false);
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithNewMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithNewMigrateError();
    }
    const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    console.info(import_chalk.default.dim(`Prisma schema loaded from ${import_path.default.relative(process.cwd(), schemaPath)}`));
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const migrate = new import_Migrate.Migrate(schemaPath);
    try {
      await (0, import_ensureDatabaseExists.ensureCanConnectToDatabase)(schemaPath);
    } catch (e) {
      console.info();
      return import_chalk.default.red(`Database connection error:

${e.message}`);
    }
    let diagnoseResult;
    let listMigrationDirectoriesResult;
    try {
      diagnoseResult = await migrate.diagnoseMigrationHistory({
        optInToShadowDatabase: false
      });
      debug({ diagnoseResult: JSON.stringify(diagnoseResult, null, 2) });
      listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
      debug({ listMigrationDirectoriesResult });
    } finally {
      migrate.stop();
    }
    console.log();
    if (listMigrationDirectoriesResult.migrations.length > 0) {
      const migrations = listMigrationDirectoriesResult.migrations;
      console.info(`${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations
`);
    } else {
      console.info(`No migration found in prisma/migrations
`);
    }
    let unappliedMigrations = [];
    if (((_a = diagnoseResult.history) == null ? void 0 : _a.diagnostic) === "databaseIsBehind") {
      unappliedMigrations = diagnoseResult.history.unappliedMigrationNames;
      console.info(`Following migration${unappliedMigrations.length > 1 ? "s" : ""} have not yet been applied:
${unappliedMigrations.join("\n")}

To apply migrations in development run ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate dev`))}.
To apply migrations in production run ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate deploy`))}.`);
    } else if (((_b = diagnoseResult.history) == null ? void 0 : _b.diagnostic) === "historiesDiverge") {
      return `Your local migration history and the migrations table from your database are different:

The last common migration is: ${diagnoseResult.history.lastCommonMigrationName}

The migration${diagnoseResult.history.unappliedMigrationNames.length > 1 ? "s" : ""} have not yet been applied:
${diagnoseResult.history.unappliedMigrationNames.join("\n")}

The migration${diagnoseResult.history.unpersistedMigrationNames.length > 1 ? "s" : ""} from the database are not found locally in prisma/migrations:
${diagnoseResult.history.unpersistedMigrationNames.join("\n")}`;
    }
    if (!diagnoseResult.hasMigrationsTable) {
      if (listMigrationDirectoriesResult.migrations.length === 0) {
        return new import_errors.HowToBaselineError().message;
      } else {
        const migrationId = listMigrationDirectoriesResult.migrations.shift();
        return `The current database is not managed by Prisma Migrate.

If you want to keep the current database structure and data and create new migrations, baseline this database with the migration "${migrationId}":
${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate resolve --applied "${migrationId}"`))}

Read more about how to baseline an existing production database:
https://pris.ly/d/migrate-baseline`;
      }
    } else if (diagnoseResult.failedMigrationNames.length > 0) {
      const failedMigrations = diagnoseResult.failedMigrationNames;
      console.info(`Following migration${failedMigrations.length > 1 ? "s" : ""} have failed:
${failedMigrations.join("\n")}

During development if the failed migration(s) have not been deployed to a production database you can then fix the migration(s) and run ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate dev`))}.
`);
      return `The failed migration(s) can be marked as rolled back or applied:
      
- If you rolled back the migration(s) manually:
${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate resolve --rolled-back "${failedMigrations[0]}"`))}

- If you fixed the database manually (hotfix):
${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate resolve --applied "${failedMigrations[0]}"`))}

Read more about how to resolve migration issues in a production database:
https://pris.ly/d/migrate-resolve`;
    } else {
      console.info();
      if (unappliedMigrations.length > 0) {
        return ``;
      } else {
        return `Database schema is up to date!`;
      }
    }
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateStatus.help}`);
    }
    return _MigrateStatus.help;
  }
};
let MigrateStatus = _MigrateStatus;
MigrateStatus.help = (0, import_sdk.format)(`
Check the status of your database migrations

  ${import_chalk.default.bold("Usage")}

    ${import_chalk.default.dim("$")} prisma migrate status [options]
    
  ${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

  ${import_chalk.default.bold("Examples")}

  Check the status of your database migrations
  ${import_chalk.default.dim("$")} prisma migrate status

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate status --schema=./schema.prisma
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateStatus
});
