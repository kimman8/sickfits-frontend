{
  "version": 3,
  "sources": ["../../src/utils/ensureDatabaseExists.ts"],
  "sourcesContent": ["import { getSchema, getSchemaDir } from '@prisma/sdk'\nimport { getConfig } from '@prisma/sdk'\nimport chalk from 'chalk'\nimport {\n  DatabaseCredentials,\n  uriToCredentials,\n  createDatabase,\n  canConnectToDatabase,\n} from '@prisma/sdk'\nimport prompt from 'prompts'\nimport execa from 'execa'\n\nexport type MigrateAction = 'create' | 'apply' | 'unapply' | 'dev' | 'push'\nexport type DbType = 'MySQL' | 'PostgreSQL' | 'SQLite' | 'SQL Server'\n\nexport async function getDbInfo(schemaPath?: string): Promise<{\n  name: string\n  url: string\n  schemaWord: 'database'\n  dbLocation?: string\n  dbType?: DbType\n  dbName?: string\n  schema?: string\n}> {\n  const datamodel = await getSchema(schemaPath)\n  const config = await getConfig({ datamodel })\n  const activeDatasource = config.datasources[0]\n  const url = activeDatasource.url.value\n\n  if (activeDatasource.provider === 'sqlserver') {\n    return {\n      name: activeDatasource.name,\n      schemaWord: 'database',\n      dbType: 'SQL Server',\n      dbName: undefined,\n      dbLocation: undefined,\n      url: activeDatasource.url.value,\n    }\n  }\n\n  try {\n    const credentials = uriToCredentials(url)\n    const dbLocation = getDbLocation(credentials)\n    const dbinfoFromCredentials = getDbinfoFromCredentials(credentials)\n\n    return {\n      name: activeDatasource.name,\n      dbLocation,\n      ...dbinfoFromCredentials,\n      url,\n      schema: credentials.schema,\n    }\n  } catch (e) {\n    return {\n      name: activeDatasource.name,\n      schemaWord: 'database',\n      dbType: undefined,\n      dbName: undefined,\n      dbLocation: undefined,\n      url,\n    }\n  }\n}\n\nexport async function ensureCanConnectToDatabase(\n  schemaPath?: string,\n): Promise<Boolean | Error> {\n  const datamodel = await getSchema(schemaPath)\n  const config = await getConfig({ datamodel })\n  const activeDatasource = config.datasources[0]\n\n  if (!activeDatasource) {\n    throw new Error(`Couldn't find a datasource in the schema.prisma file`)\n  }\n\n  if (activeDatasource.provider === 'mongodb') {\n    throw new Error(\n      `\"mongodb\" provider is not supported with this command. For more info see https://www.prisma.io/docs/concepts/database-connectors/mongodb`,\n    )\n  }\n\n  const schemaDir = (await getSchemaDir(schemaPath))!\n\n  const canConnect = await canConnectToDatabase(\n    activeDatasource.url.value,\n    schemaDir,\n  )\n\n  if (canConnect === true) {\n    return true\n  } else {\n    const { code, message } = canConnect\n    throw new Error(`${code}: ${message}`)\n  }\n}\n\nexport async function ensureDatabaseExists(\n  action: MigrateAction,\n  forceCreate = false,\n  schemaPath?: string,\n) {\n  const datamodel = await getSchema(schemaPath)\n  const config = await getConfig({ datamodel })\n  const activeDatasource = config.datasources[0]\n\n  if (!activeDatasource) {\n    throw new Error(`Couldn't find a datasource in the schema.prisma file`)\n  }\n\n  if (activeDatasource.provider === 'mongodb') {\n    throw new Error(\n      `\"mongodb\" provider is not supported with this command. For more info see https://www.prisma.io/docs/concepts/database-connectors/mongodb`,\n    )\n  }\n\n  const schemaDir = (await getSchemaDir(schemaPath))!\n\n  const canConnect = await canConnectToDatabase(\n    activeDatasource.url.value,\n    schemaDir,\n  )\n  if (canConnect === true) {\n    return\n  }\n  const { code, message } = canConnect\n\n  if (code !== 'P1003') {\n    throw new Error(`${code}: ${message}`)\n  }\n\n  // last case: status === 'DatabaseDoesNotExist'\n\n  if (!schemaDir) {\n    throw new Error(`Could not locate ${schemaPath || 'schema.prisma'}`)\n  }\n  if (forceCreate) {\n    if (await createDatabase(activeDatasource.url.value, schemaDir)) {\n      // URI parsing is not implemented for SQL server yet\n      if (activeDatasource.provider === 'sqlserver') {\n        return `SQL Server database created.\\n`\n      }\n\n      const credentials = uriToCredentials(activeDatasource.url.value)\n      const { schemaWord, dbType, dbName } =\n        getDbinfoFromCredentials(credentials)\n      if (dbType && dbType !== 'SQL Server') {\n        return `${dbType} ${schemaWord} ${chalk.bold(\n          dbName,\n        )} created at ${chalk.bold(getDbLocation(credentials))}\\n`\n      } else {\n        return `${schemaWord} created.\\n`\n      }\n    }\n  } else {\n    await interactivelyCreateDatabase(\n      activeDatasource.url.value,\n      action,\n      schemaDir,\n    )\n  }\n\n  return undefined\n}\n\nexport async function interactivelyCreateDatabase(\n  connectionString: string,\n  action: MigrateAction,\n  schemaDir: string,\n): Promise<void> {\n  await askToCreateDb(connectionString, action, schemaDir)\n}\n\nexport async function askToCreateDb(\n  connectionString: string,\n  action: MigrateAction,\n  schemaDir: string,\n): Promise<execa.ExecaReturnValue | undefined | void> {\n  const credentials = uriToCredentials(connectionString)\n  const { schemaWord, dbType, dbName } = getDbinfoFromCredentials(credentials)\n  const dbLocation = getDbLocation(credentials)\n  let message: string\n\n  if (dbName && dbLocation) {\n    message = `You are trying to ${action} a migration for ${dbType} ${schemaWord} ${chalk.bold(\n      dbName,\n    )}.\\nA ${schemaWord} with that name doesn't exist at ${chalk.bold(\n      dbLocation,\n    )}.\\n`\n  } else {\n    message = `You are trying to ${action} a migration for ${dbType} ${schemaWord}.\\nThe ${schemaWord} doesn't exist.\\n`\n  }\n\n  // empty line\n  console.info()\n  const response = await prompt({\n    type: 'select',\n    name: 'value',\n    message: message,\n    initial: 0,\n    choices: [\n      {\n        title: 'Yes',\n        value: true,\n        description: `Create new ${dbType} ${schemaWord} ${chalk.bold(dbName)}`,\n      },\n      {\n        title: 'No',\n        value: false,\n        description: `Don't create the ${schemaWord}`,\n      },\n    ],\n  })\n\n  if (response.value) {\n    await createDatabase(connectionString, schemaDir)\n  } else {\n    process.exit(0)\n  }\n}\n\nexport function getDbLocation(credentials: DatabaseCredentials): string {\n  if (credentials.type === 'sqlite') {\n    return credentials.uri!\n  }\n\n  if (!credentials.port) {\n    switch (credentials.type) {\n      case 'mysql':\n        credentials.port = 3306\n        break\n      case 'postgresql':\n        credentials.port = 5432\n        break\n      case 'sqlserver':\n        credentials.port = 1433\n        break\n    }\n  }\n\n  return `${credentials.host}:${credentials.port}`\n}\n\nexport function getDbinfoFromCredentials(credentials: DatabaseCredentials): {\n  dbName: string | undefined\n  dbType: DbType\n  schemaWord: 'database'\n} {\n  const dbName = credentials.database\n\n  let dbType\n  switch (credentials.type) {\n    case 'mysql':\n      dbType = `MySQL`\n      break\n    case 'postgresql':\n      dbType = `PostgreSQL`\n      break\n    case 'sqlite':\n      dbType = `SQLite`\n      break\n    case 'sqlserver':\n      dbType = `SQL Server`\n      break\n  }\n\n  const schemaWord = 'database'\n\n  return {\n    dbName,\n    dbType,\n    schemaWord,\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
