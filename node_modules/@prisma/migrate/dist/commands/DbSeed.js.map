{
  "version": 3,
  "sources": ["../../src/commands/DbSeed.ts"],
  "sourcesContent": ["import {\n  arg,\n  Command,\n  format,\n  HelpError,\n  isError,\n  link,\n  getSchemaPath,\n} from '@prisma/sdk'\nimport path from 'path'\nimport chalk from 'chalk'\nimport { PreviewFlagError } from '../utils/flagErrors'\nimport { NoSchemaFoundError } from '../utils/errors'\nimport { tryToRunSeed } from '../utils/seed'\n\nexport class DbSeed implements Command {\n  public static new(): DbSeed {\n    return new DbSeed()\n  }\n\n  private static help = format(`\n${process.platform === 'win32' ? '' : chalk.bold('\uD83D\uDE4C  ')}Seed your database\n\n${chalk.bold.yellow('WARNING')} ${chalk.bold(\n    `Prisma db seed is currently in Preview (${link(\n      'https://pris.ly/d/preview',\n    )}).\nThere may be bugs and it's not recommended to use it in production environments.`,\n  )}\n${chalk.dim(\n  'When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.',\n)}\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma db seed [options] --preview-feature\n\n${chalk.bold('Options')}\n\n    -h, --help   Display this help message\n      --schema   Custom path to your Prisma schema\n\n${chalk.bold('Examples')}\n\n  Specify a schema\n  ${chalk.dim('$')} prisma db seed --preview-feature --schema=./schema.prisma\n`)\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(\n      argv,\n      {\n        '--help': Boolean,\n        '-h': '--help',\n        '--preview-feature': Boolean,\n        '--schema': String,\n        '--telemetry-information': String,\n      },\n      false,\n    )\n\n    if (isError(args)) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (!args['--preview-feature']) {\n      throw new PreviewFlagError()\n    }\n\n    const schemaPath = await getSchemaPath(args['--schema'])\n\n    if (!schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    console.log(\n      chalk.dim(\n        `Prisma schema loaded from ${path.relative(process.cwd(), schemaPath)}`,\n      ),\n    )\n\n    await tryToRunSeed(schemaPath)\n\n    return `\\n${\n      process.platform === 'win32' ? '' : '\uD83C\uDF31  '\n    }Your database has been seeded.`\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(`\\n${chalk.bold.red(`!`)} ${error}\\n${DbSeed.help}`)\n    }\n    return DbSeed.help\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAQO;AACP,kBAAiB;AACjB,mBAAkB;AAClB,wBAAiC;AACjC,oBAAmC;AACnC,kBAA6B;AAEtB,sBAAgC;AAAA,SACvB,MAAc;AAC1B,WAAO,IAAI;AAAA;AAAA,QA+BA,MAAM,MAAyC;AAC1D,UAAM,OAAO,oBACX,MACA;AAAA,MACE,UAAU;AAAA,MACV,MAAM;AAAA,MACN,qBAAqB;AAAA,MACrB,YAAY;AAAA,MACZ,2BAA2B;AAAA,OAE7B;AAGF,QAAI,wBAAQ,OAAO;AACjB,aAAO,KAAK,KAAK,KAAK;AAAA;AAGxB,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA;AAGd,QAAI,CAAC,KAAK,sBAAsB;AAC9B,YAAM,IAAI;AAAA;AAGZ,UAAM,aAAa,MAAM,8BAAc,KAAK;AAE5C,QAAI,CAAC,YAAY;AACf,YAAM,IAAI;AAAA;AAGZ,YAAQ,IACN,qBAAM,IACJ,6BAA6B,oBAAK,SAAS,QAAQ,OAAO;AAI9D,UAAM,8BAAa;AAEnB,WAAO;AAAA,EACL,QAAQ,aAAa,UAAU,KAAK;AAAA;AAAA,EAIjC,KAAK,OAAoC;AAC9C,QAAI,OAAO;AACT,aAAO,IAAI,qBAAU;AAAA,EAAK,qBAAM,KAAK,IAAI,QAAQ;AAAA,EAAU,QAAO;AAAA;AAEpE,WAAO,QAAO;AAAA;AAAA;AAjFX;AAKU,AALV,OAKU,OAAO,uBAAO;AAAA,EAC7B,QAAQ,aAAa,UAAU,KAAK,qBAAM,KAAK;AAAA;AAAA,EAE/C,qBAAM,KAAK,OAAO,cAAc,qBAAM,KACpC,2CAA2C,qBACzC;AAAA;AAAA,EAIJ,qBAAM,IACN;AAAA;AAAA,EAGA,qBAAM,KAAK;AAAA;AAAA,IAET,qBAAM,IAAI;AAAA;AAAA,EAEZ,qBAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,qBAAM,KAAK;AAAA;AAAA;AAAA,IAGT,qBAAM,IAAI;AAAA;",
  "names": []
}
