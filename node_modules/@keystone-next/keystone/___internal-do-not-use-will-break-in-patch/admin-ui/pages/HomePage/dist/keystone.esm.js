import _extends from '@babel/runtime/helpers/esm/extends';
import { useMemo, useState } from 'react';
import { jsx, Heading, Center, Inline, useTheme, VisuallyHidden } from '@keystone-ui/core';
import { PlusIcon } from '@keystone-ui/icons/icons/PlusIcon';
import { DrawerController } from '@keystone-ui/modals';
import { LoadingDots } from '@keystone-ui/loading';
import { m as makeDataGetter } from '../../../../../dist/dataGetter-ec7ff440.esm.js';
import '@babel/runtime/helpers/objectSpread2';
import '../../../../../dist/getRootGraphQLFieldsFromFieldController-0b023a9c.esm.js';
import 'fast-deep-equal';
import { C as CreateItemDrawer } from '../../../../../dist/CreateItemDrawer-2616a2c2.esm.js';
import { P as PageContainer, H as HEADER_HEIGHT } from '../../../../../dist/PageContainer-9addc774.esm.js';
import { gql, useQuery } from '@apollo/client';
import { useKeystone, useList } from '../../../../../admin-ui/context/dist/keystone.esm.js';
import { Link } from '../../../../../admin-ui/router/dist/keystone.esm.js';
import { useRouter } from 'next/router';
import '@emotion/weak-memoize';
import 'graphql';
import '@keystone-ui/toast';
import '../../../../../dist/Fields-81cbbfb4.esm.js';
import '../../../../../dist/GraphQLErrorNotice-6b520996.esm.js';
import '@keystone-ui/notice';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@keystone-ui/button';
import '@keystone-ui/popover';
import '@keystone-ui/icons/icons/MoreHorizontalIcon';
import '@keystone-ui/icons/icons/ChevronRightIcon';
import '../../../../../dist/SignoutButton-ca318e88.esm.js';
import 'next/link';
import 'apollo-upload-client';
import '@emotion/hash';
import '../../../../../dist/core-3f0f7b15.esm.js';
import '../../../../../dist/sqlite-943cbaa7.esm.js';
import 'decimal.js';
import '@graphql-ts/schema/api-without-context';
import '@graphql-ts/schema';
import 'graphql-type-json';
import 'graphql-upload/public/GraphQLUpload.js';
import '@graphql-ts/schema/api-with-context';
import '../../../../../dist/admin-meta-graphql-c4fe434c.esm.js';

const ListCard = ({
  listKey,
  count
}) => {
  const {
    colors,
    palette,
    radii,
    spacing
  } = useTheme();
  const list = useList(listKey);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const router = useRouter();
  return jsx("div", {
    css: {
      position: 'relative'
    }
  }, jsx(Link, {
    href: `/${list.path}`,
    css: {
      backgroundColor: colors.background,
      borderColor: colors.border,
      borderRadius: radii.medium,
      borderWidth: 1,
      // boxShadow: shadow.s100,
      display: 'inline-block',
      minWidth: 280,
      padding: spacing.large,
      textDecoration: 'none',
      ':hover': {
        borderColor: palette.blue400
      },
      ':hover h3': {
        textDecoration: 'underline'
      }
    }
  }, jsx("h3", {
    css: {
      margin: `0 0 ${spacing.small}px 0`
    }
  }, list.label, " "), count.type === 'success' ? jsx("span", {
    css: {
      color: colors.foreground,
      textDecoration: 'none'
    }
  }, count.count, " item", count.count !== 1 ? 's' : '') : count.type === 'error' ? count.message : count.type === 'loading' ? jsx(LoadingDots, {
    label: `Loading count of ${list.plural}`,
    size: "small",
    tone: "passive"
  }) : 'No access'), jsx(CreateButton, {
    title: `Create ${list.singular}`,
    disabled: isCreateModalOpen,
    onClick: () => {
      setIsCreateModalOpen(true);
    }
  }, jsx(PlusIcon, {
    size: "large"
  }), jsx(VisuallyHidden, null, "Create ", list.singular)), jsx(DrawerController, {
    isOpen: isCreateModalOpen
  }, jsx(CreateItemDrawer, {
    listKey: list.key,
    onCreate: ({
      id
    }) => {
      router.push(`/${list.path}/${id}`);
    },
    onClose: () => {
      setIsCreateModalOpen(false);
    }
  })));
};

const CreateButton = props => {
  const theme = useTheme();
  return jsx("button", _extends({
    css: {
      alignItems: 'center',
      backgroundColor: theme.palette.neutral400,
      border: 0,
      borderRadius: theme.radii.xsmall,
      color: 'white',
      cursor: 'pointer',
      display: 'flex',
      height: 32,
      justifyContent: 'center',
      outline: 0,
      position: 'absolute',
      right: theme.spacing.large,
      top: theme.spacing.large,
      transition: 'background-color 80ms linear',
      width: 32,
      '&:hover, &:focus': {
        backgroundColor: theme.tones.positive.fill[0]
      }
    }
  }, props));
};

const HomePage = () => {
  const {
    adminMeta: {
      lists
    },
    visibleLists
  } = useKeystone();
  const query = useMemo(() => gql`
    query {
      keystone {
        adminMeta {
          lists {
            key
            fields {
              path
              createView {
                fieldMode
              }
            }
          }
        }
      }
      ${Object.entries(lists).map(([listKey, list]) => `${listKey}: ${list.gqlNames.listQueryCountName}`).join('\n')}
    }`, [lists]);
  let {
    data,
    error
  } = useQuery(query, {
    errorPolicy: 'all'
  });
  const dataGetter = makeDataGetter(data, error === null || error === void 0 ? void 0 : error.graphQLErrors);
  return jsx(PageContainer, {
    header: jsx(Heading, {
      type: "h3"
    }, "Dashboard")
  }, visibleLists.state === 'loading' ? jsx(Center, {
    css: {
      height: `calc(100vh - ${HEADER_HEIGHT}px)`
    }
  }, jsx(LoadingDots, {
    label: "Loading lists",
    size: "large",
    tone: "passive"
  })) : jsx(Inline, {
    as: "ul",
    gap: "large",
    paddingY: "xlarge",
    css: {
      paddingLeft: '0px',
      marginBottom: '0px'
    }
  }, (() => {
    if (visibleLists.state === 'error') {
      return jsx("span", {
        css: {
          color: 'red'
        }
      }, visibleLists.error instanceof Error ? visibleLists.error.message : visibleLists.error[0].message);
    }

    return Object.keys(lists).map(key => {
      var _result$errors;

      if (!visibleLists.lists.has(key)) {
        return null;
      }

      const result = dataGetter.get(key); // TODO: Checking based on the message is bad, but we need to revisit GraphQL errors in
      // Keystone to fix it and that's a whole other can of worms...

      if (((_result$errors = result.errors) === null || _result$errors === void 0 ? void 0 : _result$errors[0].message) === 'You do not have access to this resource') {
        return jsx(ListCard, {
          count: {
            type: 'no-access'
          },
          key: key,
          listKey: key
        });
      }

      return jsx(ListCard, {
        count: data ? result.errors ? {
          type: 'error',
          message: result.errors[0].message
        } : {
          type: 'success',
          count: data[key]
        } : {
          type: 'loading'
        },
        key: key,
        listKey: key
      });
    });
  })()));
};

export { HomePage };
