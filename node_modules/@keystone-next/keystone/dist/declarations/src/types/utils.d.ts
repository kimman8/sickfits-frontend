export declare type BaseGeneratedListTypes = {
    key: string;
    fields: string;
    backing: BackingTypeForItem;
    inputs: {
        create: GraphQLInput;
        update: GraphQLInput;
        where: GraphQLInput;
        uniqueWhere: {
            readonly id?: string | null;
        } & GraphQLInput;
    };
    args: {
        listQuery: {
            readonly where?: GraphQLInput | null;
            readonly take?: number | null;
            readonly skip?: number;
            readonly orderBy?: Record<string, 'asc' | 'desc' | null> | readonly Record<string, 'asc' | 'desc' | null>[];
        };
    };
};
declare type BackingTypeForItem = any;
declare type GraphQLInput = Record<string, any>;
export declare type JSONValue = string | number | boolean | null | Array<JSONValue> | {
    [key: string]: JSONValue;
};
export declare type GqlNames = {
    outputTypeName: string;
    itemQueryName: string;
    listQueryName: string;
    listQueryCountName: string;
    listOrderName: string;
    deleteMutationName: string;
    updateMutationName: string;
    createMutationName: string;
    deleteManyMutationName: string;
    updateManyMutationName: string;
    createManyMutationName: string;
    whereInputName: string;
    whereUniqueInputName: string;
    updateInputName: string;
    createInputName: string;
    updateManyInputName: string;
    relateToManyForCreateInputName: string;
    relateToManyForUpdateInputName: string;
    relateToOneForCreateInputName: string;
    relateToOneForUpdateInputName: string;
};
export declare type MaybePromise<T> = T | Promise<T>;
export {};
