import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { f as fieldType, o as orderDirectionEnum, U as Upload, J as JSON } from '../../dist/sqlite-943cbaa7.esm.js';
import { f as filters, r as resolveCommon, j as jsonFieldTypePolyfilledForSQLite, a as resolveString } from '../../dist/json-field-type-polyfill-for-sqlite-f1450e5e.esm.js';
import Path__default from 'path';
import { p as packagePath } from '../../dist/package-path-7ba957ae.esm.js';
import { arg, Int, Boolean, String, inputObject, nonNull, Float, enum as enum$1, enumValues, ID, list } from '@graphql-ts/schema/api-without-context';
import { field, fields, interface as interface$1, object } from '@graphql-ts/schema/api-with-context';
import Decimal from 'decimal.js';
import { getFileRef } from '../types/file/utils/dist/keystone.esm.js';
import { SUPPORTED_IMAGE_EXTENSIONS, getImageRef } from '../types/image/utils/dist/keystone.esm.js';
import bcryptjs from 'bcryptjs';
import dumbPasswords from 'dumb-passwords';
import inflection from 'inflection';
import '@graphql-ts/schema';
import 'graphql-type-json';
import 'graphql-upload/public/GraphQLUpload.js';

const resolveView = pathname => Path__default.join(packagePath, 'fields', 'types', pathname);

const _excluded$d = ["isRequired", "defaultValue", "isIndexed"];
const autoIncrement = (_ref = {}) => {
  let {
    isRequired,
    defaultValue,
    isIndexed
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$d);

  return meta => {
    return fieldType({
      kind: 'scalar',
      mode: 'optional',
      scalar: 'Int',
      default: {
        kind: 'autoincrement'
      },
      index: isIndexed === true ? 'index' : isIndexed || undefined
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        // create
        create: {
          arg: arg({
            type: Int
          })
        },
        // update
        update: {
          arg: arg({
            type: Int
          })
        },
        // filter
        where: {
          arg: arg({
            type: filters[meta.provider].Int.optional
          }),
          resolve: resolveCommon
        },
        uniqueWhere: isIndexed === 'unique' ? {
          arg: arg({
            type: Int
          })
        } : undefined,
        // orderBy
        orderBy: {
          arg: arg({
            type: orderDirectionEnum
          })
        }
      },
      // read
      output: field({
        type: Int
      }),
      views: resolveView('integer/views'),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded$c = ["isRequired", "defaultValue"];
const checkbox = (_ref = {}) => {
  let {
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$c);

  return meta => {
    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type checkbox");
    }

    return fieldType({
      kind: 'scalar',
      mode: 'optional',
      scalar: 'Boolean'
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        where: {
          arg: arg({
            type: filters[meta.provider].Boolean.optional
          }),
          resolve: resolveCommon
        },
        create: {
          arg: arg({
            type: Boolean
          })
        },
        update: {
          arg: arg({
            type: Boolean
          })
        },
        orderBy: {
          arg: arg({
            type: orderDirectionEnum
          })
        }
      },
      output: field({
        type: Boolean
      }),
      views: resolveView('checkbox/views'),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded$b = ["isIndexed", "precision", "scale", "isRequired", "defaultValue"];
const decimal = (_ref = {}) => {
  let {
    isIndexed,
    precision = 18,
    scale = 4,
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$b);

  return meta => {
    if (meta.provider === 'sqlite') {
      throw new Error('The decimal field does not support sqlite');
    }

    if (!Number.isInteger(scale)) {
      throw new Error(`The scale for decimal fields must be an integer but the scale for the decimal field at ${meta.listKey}.${meta.fieldKey} is not an integer`);
    }

    if (!Number.isInteger(precision)) {
      throw new Error(`The precision for decimal fields must be an integer but the precision for the decimal field at ${meta.listKey}.${meta.fieldKey} is not an integer`);
    }

    if (scale > precision) {
      throw new Error(`The scale configured for decimal field at ${meta.listKey}.${meta.fieldKey} (${scale}) ` + `must not be larger than the field's precision (${precision})`);
    }

    const index = isIndexed === true ? 'index' : isIndexed || undefined;
    const dbField = {
      kind: 'scalar',
      mode: 'optional',
      scalar: 'Decimal',
      nativeType: `Decimal(${precision}, ${scale})`,
      index
    };
    return fieldType(dbField)(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        where: {
          arg: arg({
            type: filters[meta.provider].Decimal.optional
          }),
          resolve: resolveCommon
        },
        create: {
          arg: arg({
            type: String
          }),

          resolve(val) {
            if (val == null) return val;
            return new Decimal(val);
          }

        },
        update: {
          arg: arg({
            type: String
          }),

          resolve(val) {
            if (val == null) return val;
            return new Decimal(val);
          }

        },
        orderBy: {
          arg: arg({
            type: orderDirectionEnum
          })
        }
      },
      output: field({
        type: String,

        resolve({
          value
        }) {
          if (value === null) return null;
          return value.toFixed(scale);
        }

      }),
      views: resolveView('decimal/views'),
      getAdminMeta: () => ({
        precision,
        scale
      }),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded$a = ["isRequired", "defaultValue"];
const FileFieldInput = inputObject({
  name: 'FileFieldInput',
  fields: {
    upload: arg({
      type: Upload
    }),
    ref: arg({
      type: String
    })
  }
});
const fileFields = fields()({
  filename: field({
    type: nonNull(String)
  }),
  filesize: field({
    type: nonNull(Int)
  }),
  ref: field({
    type: nonNull(String),

    resolve(data) {
      return getFileRef(data.mode, data.filename);
    }

  }),
  src: field({
    type: nonNull(String),

    resolve(data, args, context) {
      if (!context.files) {
        throw new Error('File context is undefined, this most likely means that you havent configurd keystone with a file config, see https://keystonejs.com/docs/apis/config#files for details');
      }

      return context.files.getSrc(data.mode, data.filename);
    }

  })
});
const FileFieldOutput = interface$1()({
  name: 'FileFieldOutput',
  fields: fileFields,
  resolveType: () => 'LocalFileFieldOutput'
});
const LocalFileFieldOutput = object()({
  name: 'LocalFileFieldOutput',
  interfaces: [FileFieldOutput],
  fields: fileFields
});

async function inputResolver$1(data, context) {
  if (data === null || data === undefined) {
    return {
      mode: data,
      filename: data,
      filesize: data
    };
  }

  if (data.ref) {
    if (data.upload) {
      throw new Error('Only one of ref and upload can be passed to FileFieldInput');
    }

    return context.files.getDataFromRef(data.ref);
  }

  if (!data.upload) {
    throw new Error('Either ref or upload must be passed to FileFieldInput');
  }

  const upload = await data.upload;
  return context.files.getDataFromStream(upload.createReadStream(), upload.filename);
}

const file = (_ref = {}) => {
  let {
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$a);

  return () => {
    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type file");
    }

    return fieldType({
      kind: 'multi',
      fields: {
        filesize: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        mode: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        },
        filename: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        }
      }
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: arg({
            type: FileFieldInput
          }),
          resolve: inputResolver$1
        },
        update: {
          arg: arg({
            type: FileFieldInput
          }),
          resolve: inputResolver$1
        }
      },
      output: field({
        type: FileFieldOutput,

        resolve({
          value: {
            filesize,
            filename,
            mode
          }
        }) {
          if (filesize === null || filename === null || mode === null || mode !== 'local' && mode !== 'keystone-cloud') {
            return null;
          }

          return {
            mode,
            filename,
            filesize
          };
        }

      }),
      unreferencedConcreteInterfaceImplementations: [LocalFileFieldOutput],
      views: resolveView('file/views'),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded$9 = ["isIndexed", "isRequired", "defaultValue"];
const float = (_ref = {}) => {
  let {
    isIndexed,
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$9);

  return meta => fieldType({
    kind: 'scalar',
    mode: 'optional',
    scalar: 'Float',
    index: isIndexed === true ? 'index' : isIndexed || undefined
  })(_objectSpread(_objectSpread({}, config), {}, {
    input: {
      where: {
        arg: arg({
          type: filters[meta.provider].Float.optional
        }),
        resolve: resolveCommon
      },
      create: {
        arg: arg({
          type: Float
        })
      },
      update: {
        arg: arg({
          type: Float
        })
      },
      orderBy: {
        arg: arg({
          type: orderDirectionEnum
        })
      }
    },
    output: field({
      type: Float
    }),
    views: resolveView('float/views'),
    __legacy: {
      isRequired,
      defaultValue
    }
  }));
};

const _excluded$8 = ["isIndexed", "isRequired", "defaultValue"];
const integer = (_ref = {}) => {
  let {
    isIndexed,
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$8);

  return meta => fieldType({
    kind: 'scalar',
    mode: 'optional',
    scalar: 'Int',
    index: isIndexed === true ? 'index' : isIndexed || undefined
  })(_objectSpread(_objectSpread({}, config), {}, {
    input: {
      uniqueWhere: isIndexed === 'unique' ? {
        arg: arg({
          type: Int
        })
      } : undefined,
      where: {
        arg: arg({
          type: filters[meta.provider].Int.optional
        }),
        resolve: resolveCommon
      },
      create: {
        arg: arg({
          type: Int
        })
      },
      update: {
        arg: arg({
          type: Int
        })
      },
      orderBy: {
        arg: arg({
          type: orderDirectionEnum
        })
      }
    },
    output: field({
      type: Int
    }),
    views: resolveView('integer/views'),
    __legacy: {
      isRequired,
      defaultValue
    }
  }));
};

const _excluded$7 = ["isRequired", "defaultValue"];
const ImageExtensionEnum = enum$1({
  name: 'ImageExtension',
  values: enumValues(SUPPORTED_IMAGE_EXTENSIONS)
});
const ImageFieldInput = inputObject({
  name: 'ImageFieldInput',
  fields: {
    upload: arg({
      type: Upload
    }),
    ref: arg({
      type: String
    })
  }
});
const imageOutputFields = fields()({
  id: field({
    type: nonNull(ID)
  }),
  filesize: field({
    type: nonNull(Int)
  }),
  width: field({
    type: nonNull(Int)
  }),
  height: field({
    type: nonNull(Int)
  }),
  extension: field({
    type: nonNull(ImageExtensionEnum)
  }),
  ref: field({
    type: nonNull(String),

    resolve(data) {
      return getImageRef(data.mode, data.id, data.extension);
    }

  }),
  src: field({
    type: nonNull(String),

    resolve(data, args, context) {
      if (!context.images) {
        throw new Error('Image context is undefined');
      }

      return context.images.getSrc(data.mode, data.id, data.extension);
    }

  })
});
const ImageFieldOutput = interface$1()({
  name: 'ImageFieldOutput',
  fields: imageOutputFields,
  resolveType: () => 'LocalImageFieldOutput'
});
const LocalImageFieldOutput = object()({
  name: 'LocalImageFieldOutput',
  interfaces: [ImageFieldOutput],
  fields: imageOutputFields
});

async function inputResolver(data, context) {
  if (data === null || data === undefined) {
    return {
      extension: data,
      filesize: data,
      height: data,
      id: data,
      mode: data,
      width: data
    };
  }

  if (data.ref) {
    if (data.upload) {
      throw new Error('Only one of ref and upload can be passed to ImageFieldInput');
    }

    return context.images.getDataFromRef(data.ref);
  }

  if (!data.upload) {
    throw new Error('Either ref or upload must be passed to ImageFieldInput');
  }

  return context.images.getDataFromStream((await data.upload).createReadStream());
}

const extensionsSet = new Set(SUPPORTED_IMAGE_EXTENSIONS);

function isValidImageExtension(extension) {
  return extensionsSet.has(extension);
}

const image = (_ref = {}) => {
  let {
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$7);

  return () => {
    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type image");
    }

    return fieldType({
      kind: 'multi',
      fields: {
        filesize: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        extension: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        },
        width: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        height: {
          kind: 'scalar',
          scalar: 'Int',
          mode: 'optional'
        },
        mode: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        },
        id: {
          kind: 'scalar',
          scalar: 'String',
          mode: 'optional'
        }
      }
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: arg({
            type: ImageFieldInput
          }),
          resolve: inputResolver
        },
        update: {
          arg: arg({
            type: ImageFieldInput
          }),
          resolve: inputResolver
        }
      },
      output: field({
        type: ImageFieldOutput,

        resolve({
          value: {
            extension,
            filesize,
            height,
            id,
            mode,
            width
          }
        }) {
          if (extension === null || !isValidImageExtension(extension) || filesize === null || height === null || width === null || id === null || mode === null || mode !== 'local' && mode !== 'keystone-cloud') {
            return null;
          }

          return {
            mode,
            extension,
            filesize,
            height,
            width,
            id
          };
        }

      }),
      unreferencedConcreteInterfaceImplementations: [LocalImageFieldOutput],
      views: resolveView('image/views'),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded$6 = ["isRequired", "defaultValue"];
const json = (_ref = {}) => {
  let {
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$6);

  return meta => {
    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type json");
    }

    return jsonFieldTypePolyfilledForSQLite(meta.provider, _objectSpread(_objectSpread({}, config), {}, {
      input: {
        create: {
          arg: arg({
            type: JSON
          })
        },
        update: {
          arg: arg({
            type: JSON
          })
        }
      },
      output: field({
        type: JSON
      }),
      views: resolveView('json/views'),
      __legacy: {
        defaultValue,
        isRequired
      }
    }));
  };
};

const _excluded$5 = ["bcrypt", "minLength", "workFactor", "rejectCommon", "isRequired", "defaultValue"];
const PasswordState = object()({
  name: 'PasswordState',
  fields: {
    isSet: field({
      type: nonNull(Boolean)
    })
  }
});
const PasswordFilter = inputObject({
  name: 'PasswordFilter',
  fields: {
    isSet: arg({
      type: nonNull(Boolean)
    })
  }
});
const bcryptHashRegex = /^\$2[aby]?\$\d{1,2}\$[.\/A-Za-z0-9]{53}$/;
const password = (_ref = {}) => {
  let {
    bcrypt = bcryptjs,
    minLength = 8,
    workFactor = 10,
    rejectCommon = false,
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$5);

  return meta => {
    // TODO: we should just throw not automatically fix it, yeah?
    workFactor = Math.min(Math.max(workFactor, 4), 31);

    if (workFactor < 6) {
      console.warn(`The workFactor for ${meta.listKey}.${meta.fieldKey} is very low! ` + `This will cause weak hashes!`);
    }

    function inputResolver(val) {
      if (val === '') {
        return null;
      }

      if (typeof val === 'string') {
        if (rejectCommon && dumbPasswords.check(val)) {
          throw new Error(`[password:rejectCommon:${meta.listKey}:${meta.fieldKey}] Common and frequently-used passwords are not allowed.`);
        }

        if (val.length < minLength) {
          throw new Error(`[password:minLength:${meta.listKey}:${meta.fieldKey}] Value must be at least ${minLength} characters long.`);
        }

        return bcrypt.hash(val, workFactor);
      }

      return val;
    }

    if (config.isIndexed === 'unique') {
      throw Error("isIndexed: 'unique' is not a supported option for field type password");
    }

    return fieldType({
      kind: 'scalar',
      scalar: 'String',
      mode: 'optional'
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        where: {
          arg: arg({
            type: PasswordFilter
          }),

          resolve(val) {
            if (val === null) {
              throw new Error('Password filters cannot be set to null');
            }

            if (val.isSet) {
              return {
                not: null
              };
            }

            return null;
          }

        },
        create: {
          arg: arg({
            type: String
          }),
          resolve: inputResolver
        },
        update: {
          arg: arg({
            type: String
          }),
          resolve: inputResolver
        }
      },
      views: resolveView('password/views'),
      getAdminMeta: () => ({
        minLength: minLength
      }),
      output: field({
        type: PasswordState,

        resolve(val) {
          return {
            isSet: val.value !== null && bcryptHashRegex.test(val.value)
          };
        },

        extensions: {
          keystoneSecretField: {
            generateHash: async secret => {
              return bcrypt.hash(secret, workFactor);
            },
            compare: (secret, hash) => {
              return bcrypt.compare(secret, hash);
            }
          }
        }
      }),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded$4 = ["many", "ref", "defaultValue", "withMeta"];

const relationship = _ref => {
  let {
    many = false,
    ref,
    defaultValue,
    withMeta = true
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$4);

  return meta => {
    const [foreignListKey, foreignFieldKey] = ref.split('.');

    const commonConfig = _objectSpread(_objectSpread({}, config), {}, {
      views: resolveView('relationship/views'),
      getAdminMeta: adminMetaRoot => {
        var _config$ui, _config$ui$hideCreate, _config$ui2, _config$ui3, _config$ui$linkToItem, _config$ui$removeMode, _config$ui$inlineCrea3, _config$ui$inlineEdit3, _config$ui$inlineConn, _config$ui4;

        if (!meta.lists[foreignListKey]) {
          throw new Error(`The ref [${ref}] on relationship [${meta.listKey}.${meta.fieldKey}] is invalid`);
        }

        if (((_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.displayMode) === 'cards') {
          // we're checking whether the field which will be in the admin meta at the time that getAdminMeta is called.
          // in newer versions of keystone, it will be there and it will not be there for older versions of keystone.
          // this is so that relationship fields doesn't break in confusing ways
          // if people are using a slightly older version of keystone
          const currentField = adminMetaRoot.listsByKey[meta.listKey].fields.find(x => x.path === meta.fieldKey);

          if (currentField) {
            const allForeignFields = new Set(adminMetaRoot.listsByKey[foreignListKey].fields.map(x => x.path));

            for (const [configOption, foreignFields] of [['ui.cardFields', config.ui.cardFields], ['ui.inlineCreate.fields', (_config$ui$inlineCrea = (_config$ui$inlineCrea2 = config.ui.inlineCreate) === null || _config$ui$inlineCrea2 === void 0 ? void 0 : _config$ui$inlineCrea2.fields) !== null && _config$ui$inlineCrea !== void 0 ? _config$ui$inlineCrea : []], ['ui.inlineEdit.fields', (_config$ui$inlineEdit = (_config$ui$inlineEdit2 = config.ui.inlineEdit) === null || _config$ui$inlineEdit2 === void 0 ? void 0 : _config$ui$inlineEdit2.fields) !== null && _config$ui$inlineEdit !== void 0 ? _config$ui$inlineEdit : []]]) {
              var _config$ui$inlineCrea, _config$ui$inlineCrea2, _config$ui$inlineEdit, _config$ui$inlineEdit2;

              for (const foreignField of foreignFields) {
                if (!allForeignFields.has(foreignField)) {
                  throw new Error(`The ${configOption} option on the relationship field at ${meta.listKey}.${meta.fieldKey} includes the "${foreignField}" field but that field does not exist on the "${foreignListKey}" list`);
                }
              }
            }
          }
        }

        return _objectSpread({
          refListKey: foreignListKey,
          many,
          hideCreate: (_config$ui$hideCreate = (_config$ui2 = config.ui) === null || _config$ui2 === void 0 ? void 0 : _config$ui2.hideCreate) !== null && _config$ui$hideCreate !== void 0 ? _config$ui$hideCreate : false
        }, ((_config$ui3 = config.ui) === null || _config$ui3 === void 0 ? void 0 : _config$ui3.displayMode) === 'cards' ? {
          displayMode: 'cards',
          cardFields: config.ui.cardFields,
          linkToItem: (_config$ui$linkToItem = config.ui.linkToItem) !== null && _config$ui$linkToItem !== void 0 ? _config$ui$linkToItem : false,
          removeMode: (_config$ui$removeMode = config.ui.removeMode) !== null && _config$ui$removeMode !== void 0 ? _config$ui$removeMode : 'disconnect',
          inlineCreate: (_config$ui$inlineCrea3 = config.ui.inlineCreate) !== null && _config$ui$inlineCrea3 !== void 0 ? _config$ui$inlineCrea3 : null,
          inlineEdit: (_config$ui$inlineEdit3 = config.ui.inlineEdit) !== null && _config$ui$inlineEdit3 !== void 0 ? _config$ui$inlineEdit3 : null,
          inlineConnect: (_config$ui$inlineConn = config.ui.inlineConnect) !== null && _config$ui$inlineConn !== void 0 ? _config$ui$inlineConn : false,
          refLabelField: adminMetaRoot.listsByKey[foreignListKey].labelField
        } : ((_config$ui4 = config.ui) === null || _config$ui4 === void 0 ? void 0 : _config$ui4.displayMode) === 'count' ? {
          displayMode: 'count'
        } : {
          displayMode: 'select',
          refLabelField: adminMetaRoot.listsByKey[foreignListKey].labelField
        });
      }
    });

    if (!meta.lists[foreignListKey]) {
      throw new Error(`Unable to resolve related list '${foreignListKey}' from ${meta.listKey}.${meta.fieldKey}`);
    }

    const listTypes = meta.lists[foreignListKey].types;

    if (many) {
      return fieldType({
        kind: 'relation',
        mode: 'many',
        list: foreignListKey,
        field: foreignFieldKey
      })(_objectSpread(_objectSpread({}, commonConfig), {}, {
        input: {
          where: {
            arg: arg({
              type: listTypes.relateTo.many.where
            }),

            resolve(value, context, resolve) {
              return resolve(value);
            }

          },
          create: listTypes.relateTo.many.create && {
            arg: arg({
              type: listTypes.relateTo.many.create
            }),

            async resolve(value, context, resolve) {
              return resolve(value);
            }

          },
          update: listTypes.relateTo.many.update && {
            arg: arg({
              type: listTypes.relateTo.many.update
            }),

            async resolve(value, context, resolve) {
              return resolve(value);
            }

          }
        },
        output: field({
          args: listTypes.findManyArgs,
          type: list(nonNull(listTypes.output)),

          resolve({
            value
          }, args) {
            return value.findMany(args);
          }

        }),
        extraOutputFields: withMeta ? {
          [`${meta.fieldKey}Count`]: field({
            type: Int,
            args: {
              where: arg({
                type: nonNull(listTypes.where),
                defaultValue: {}
              })
            },

            resolve({
              value
            }, args) {
              return value.count({
                where: args.where
              });
            }

          })
        } : {},
        __legacy: {
          defaultValue
        }
      }));
    }

    return fieldType({
      kind: 'relation',
      mode: 'one',
      list: foreignListKey,
      field: foreignFieldKey
    })(_objectSpread(_objectSpread({}, commonConfig), {}, {
      input: {
        where: {
          arg: arg({
            type: listTypes.where
          }),

          resolve(value, context, resolve) {
            return resolve(value);
          }

        },
        create: listTypes.relateTo.one.create && {
          arg: arg({
            type: listTypes.relateTo.one.create
          }),

          async resolve(value, context, resolve) {
            return resolve(value);
          }

        },
        update: listTypes.relateTo.one.update && {
          arg: arg({
            type: listTypes.relateTo.one.update
          }),

          async resolve(value, context, resolve) {
            return resolve(value);
          }

        }
      },
      output: field({
        type: listTypes.output,

        resolve({
          value
        }) {
          return value();
        }

      }),
      __legacy: {
        defaultValue
      }
    }));
  };
};

const _excluded$3 = ["displayMode"],
      _excluded2 = ["isIndexed", "ui", "isRequired", "defaultValue"];
const select = _ref => {
  let {
    isIndexed,
    ui: {
      displayMode = 'select'
    } = {},
    isRequired,
    defaultValue
  } = _ref,
      ui = _objectWithoutProperties(_ref.ui, _excluded$3),
      config = _objectWithoutProperties(_ref, _excluded2);

  return meta => {
    const commonConfig = _objectSpread(_objectSpread({}, config), {}, {
      ui,
      views: resolveView('select/views'),
      getAdminMeta: () => {
        var _config$dataType;

        return {
          options: config.options,
          dataType: (_config$dataType = config.dataType) !== null && _config$dataType !== void 0 ? _config$dataType : 'string',
          displayMode: displayMode
        };
      }
    });

    const index = isIndexed === true ? 'index' : isIndexed || undefined;

    if (config.dataType === 'integer') {
      return fieldType({
        kind: 'scalar',
        scalar: 'Int',
        mode: 'optional',
        index
      })(_objectSpread(_objectSpread({}, commonConfig), {}, {
        input: {
          where: {
            arg: arg({
              type: filters[meta.provider].Int.optional
            }),
            resolve: resolveCommon
          },
          create: {
            arg: arg({
              type: Int
            })
          },
          update: {
            arg: arg({
              type: Int
            })
          },
          orderBy: {
            arg: arg({
              type: orderDirectionEnum
            })
          }
        },
        output: field({
          type: Int
        }),
        __legacy: {
          defaultValue,
          isRequired
        }
      }));
    }

    if (config.dataType === 'enum') {
      const enumName = `${meta.listKey}${inflection.classify(meta.fieldKey)}Type`;
      const graphQLType = enum$1({
        name: enumName,
        values: enumValues(config.options.map(x => x.value))
      }); // i do not like this "let's just magically use strings on sqlite"

      return fieldType(meta.provider === 'sqlite' ? {
        kind: 'scalar',
        scalar: 'String',
        mode: 'optional',
        index
      } : {
        kind: 'enum',
        values: config.options.map(x => x.value),
        mode: 'optional',
        name: enumName,
        index
      })(_objectSpread(_objectSpread({}, commonConfig), {}, {
        input: {
          where: {
            arg: arg({
              type: filters[meta.provider].enum(graphQLType).optional
            }),
            resolve: resolveCommon
          },
          create: {
            arg: arg({
              type: graphQLType
            })
          },
          update: {
            arg: arg({
              type: graphQLType
            })
          },
          orderBy: {
            arg: arg({
              type: orderDirectionEnum
            })
          }
        },
        output: field({
          type: graphQLType
        }),
        __legacy: {
          defaultValue,
          isRequired
        }
      }));
    }

    return fieldType({
      kind: 'scalar',
      scalar: 'String',
      mode: 'optional',
      index
    })(_objectSpread(_objectSpread({}, commonConfig), {}, {
      input: {
        where: {
          arg: arg({
            type: filters[meta.provider].String.optional
          }),
          resolve: resolveString
        },
        create: {
          arg: arg({
            type: String
          })
        },
        update: {
          arg: arg({
            type: String
          })
        },
        orderBy: {
          arg: arg({
            type: orderDirectionEnum
          })
        }
      },
      output: field({
        type: String
      }),
      __legacy: {
        defaultValue,
        isRequired
      }
    }));
  };
};

const _excluded$2 = ["isIndexed", "isRequired", "defaultValue"];
const text = (_ref = {}) => {
  let {
    isIndexed,
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$2);

  return meta => fieldType({
    kind: 'scalar',
    mode: 'optional',
    scalar: 'String',
    index: isIndexed === true ? 'index' : isIndexed || undefined
  })(_objectSpread(_objectSpread({}, config), {}, {
    input: {
      uniqueWhere: isIndexed === 'unique' ? {
        arg: arg({
          type: String
        })
      } : undefined,
      where: {
        arg: arg({
          type: filters[meta.provider].String.optional
        }),
        resolve: resolveString
      },
      create: {
        arg: arg({
          type: String
        })
      },
      update: {
        arg: arg({
          type: String
        })
      },
      orderBy: {
        arg: arg({
          type: orderDirectionEnum
        })
      }
    },
    output: field({
      type: String
    }),
    views: resolveView('text/views'),

    getAdminMeta() {
      var _config$ui$displayMod, _config$ui;

      return {
        displayMode: (_config$ui$displayMod = (_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.displayMode) !== null && _config$ui$displayMod !== void 0 ? _config$ui$displayMod : 'input',
        shouldUseModeInsensitive: meta.provider === 'postgresql'
      };
    },

    __legacy: {
      defaultValue,
      isRequired
    }
  }));
};

const _excluded$1 = ["isIndexed", "isRequired", "defaultValue"];
const timestamp = (_ref = {}) => {
  let {
    isIndexed,
    isRequired,
    defaultValue
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded$1);

  return meta => {
    const inputResolver = value => {
      if (value === null || value === undefined) {
        return value;
      }

      return new Date(value);
    };

    return fieldType({
      kind: 'scalar',
      mode: 'optional',
      scalar: 'DateTime',
      index: isIndexed === true ? 'index' : isIndexed || undefined
    })(_objectSpread(_objectSpread({}, config), {}, {
      input: {
        where: {
          arg: arg({
            type: filters[meta.provider].DateTime.optional
          }),
          resolve: resolveCommon
        },
        create: {
          arg: arg({
            type: String
          }),
          resolve: inputResolver
        },
        update: {
          arg: arg({
            type: String
          }),
          resolve: inputResolver
        },
        orderBy: {
          arg: arg({
            type: orderDirectionEnum
          })
        }
      },
      output: field({
        type: String,

        resolve({
          value
        }) {
          if (value === null) return null;
          return value.toISOString();
        }

      }),
      views: resolveView('timestamp/views'),
      __legacy: {
        isRequired,
        defaultValue
      }
    }));
  };
};

const _excluded = ["graphQLReturnFragment", "field"];
const virtual = _ref => {
  let {
    graphQLReturnFragment = '',
    field: field$1
  } = _ref,
      config = _objectWithoutProperties(_ref, _excluded);

  return meta => {
    const usableField = typeof field$1 === 'function' ? field$1(meta.lists) : field$1;
    return fieldType({
      kind: 'none'
    })(_objectSpread(_objectSpread({}, config), {}, {
      output: field(_objectSpread(_objectSpread({}, usableField), {}, {
        resolve({
          item
        }, ...args) {
          return usableField.resolve(item, ...args);
        }

      })),
      views: resolveView('virtual/views'),
      getAdminMeta: () => ({
        graphQLReturnFragment
      })
    }));
  };
};

export { autoIncrement, checkbox, decimal, file, float, image, integer, json, password, relationship, select, text, timestamp, virtual };
