var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  DbNeedsForceError: () => DbNeedsForceError,
  DbPushForceFlagRenamedError: () => DbPushForceFlagRenamedError,
  DbPushIgnoreWarningsWithFlagError: () => DbPushIgnoreWarningsWithFlagError,
  HowToBaselineError: () => HowToBaselineError,
  MigrateDevEnvNonInteractiveError: () => MigrateDevEnvNonInteractiveError,
  MigrateNeedsForceError: () => MigrateNeedsForceError,
  MigrateResetEnvNonInteractiveError: () => MigrateResetEnvNonInteractiveError,
  NoSchemaFoundError: () => NoSchemaFoundError,
  OldMigrateDetectedError: () => OldMigrateDetectedError
});
var import_chalk = __toModule(require("chalk"));
var import_sdk = __toModule(require("@prisma/sdk"));
class NoSchemaFoundError extends Error {
  constructor() {
    super(`Could not find a ${import_chalk.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${import_chalk.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${import_chalk.default.greenBright("./prisma/schema.prisma")} ${(0, import_sdk.link)("https://pris.ly/d/prisma-schema-location")}`);
  }
}
class OldMigrateDetectedError extends Error {
  constructor() {
    super(`The migrations folder contains migration files from an older version of Prisma Migrate which is not compatible.

Read more about how to upgrade to the new version of Migrate:
${(0, import_sdk.link)("https://pris.ly/d/migrate-upgrade")}`);
  }
}
class HowToBaselineError extends Error {
  constructor() {
    super(`Read more about how to baseline an existing production database:
${(0, import_sdk.link)("https://pris.ly/d/migrate-baseline")}`);
  }
}
class DbPushForceFlagRenamedError extends Error {
  constructor() {
    super(`The --force flag was renamed to --accept-data-loss in 2.17.0, use ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)("prisma db push --accept-data-loss"))}`);
  }
}
class DbPushIgnoreWarningsWithFlagError extends Error {
  constructor() {
    super(`Use the --accept-data-loss flag to ignore the data loss warnings like ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)("prisma db push --accept-data-loss"))}`);
  }
}
class MigrateNeedsForceError extends Error {
  constructor(subcommand) {
    super(`Use the --force flag to use the ${subcommand} command in an unnattended environment like ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma migrate ${subcommand} --force`))}`);
  }
}
class MigrateResetEnvNonInteractiveError extends Error {
  constructor() {
    super(`Prisma Migrate has detected that the environment is non-interactive. It is recommended to run this command in an interactive environment.

Use ${import_chalk.default.bold.greenBright(`--force`)} to run this command without user interaction.
See ${(0, import_sdk.link)("https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-reset")}`);
  }
}
class MigrateDevEnvNonInteractiveError extends Error {
  constructor() {
    super(`Prisma Migrate has detected that the environment is non-interactive, which is not supported.

\`prisma migrate dev\` is an interactive command designed to create new migrations and evolve the database in development.
To apply existing migrations in deployments, use ${import_chalk.default.bold.greenBright(`prisma migrate deploy`)}.
See ${(0, import_sdk.link)("https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-deploy")}`);
  }
}
class DbNeedsForceError extends Error {
  constructor(subcommand) {
    super(`Use the --force flag to use the ${subcommand} command in an unnattended environment like ${import_chalk.default.bold.greenBright((0, import_sdk.getCommandWithExecutor)(`prisma db ${subcommand} --force --preview-feature`))}`);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbNeedsForceError,
  DbPushForceFlagRenamedError,
  DbPushIgnoreWarningsWithFlagError,
  HowToBaselineError,
  MigrateDevEnvNonInteractiveError,
  MigrateNeedsForceError,
  MigrateResetEnvNonInteractiveError,
  NoSchemaFoundError,
  OldMigrateDetectedError
});
