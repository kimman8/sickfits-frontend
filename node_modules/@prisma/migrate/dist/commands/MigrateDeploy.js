var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  MigrateDeploy: () => MigrateDeploy
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
var import_path = __toModule(require("path"));
var import_Migrate = __toModule(require("../Migrate"));
var import_ensureDatabaseExists = __toModule(require("../utils/ensureDatabaseExists"));
var import_flagErrors = __toModule(require("../utils/flagErrors"));
var import_errors = __toModule(require("../utils/errors"));
var import_printFiles = __toModule(require("../utils/printFiles"));
var import_detectOldMigrate = __toModule(require("../utils/detectOldMigrate"));
var import_printDatasource = __toModule(require("../utils/printDatasource"));
var import_debug = __toModule(require("@prisma/debug"));
const debug = (0, import_debug.default)("prisma:migrate:deploy");
const _MigrateDeploy = class {
  static new() {
    return new _MigrateDeploy();
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--experimental": Boolean,
      "--early-access-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    }, false);
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithNewMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithNewMigrateError();
    }
    const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    console.info(import_chalk.default.dim(`Prisma schema loaded from ${import_path.default.relative(process.cwd(), schemaPath)}`));
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const migrate = new import_Migrate.Migrate(schemaPath);
    const wasDbCreated = await (0, import_ensureDatabaseExists.ensureDatabaseExists)("apply", true, schemaPath);
    if (wasDbCreated) {
      console.info();
      console.info(wasDbCreated);
    }
    const diagnoseResult = await migrate.diagnoseMigrationHistory({
      optInToShadowDatabase: false
    });
    debug({ diagnoseResult: JSON.stringify(diagnoseResult, null, 2) });
    const listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
    debug({ listMigrationDirectoriesResult });
    console.info();
    if (listMigrationDirectoriesResult.migrations.length > 0) {
      const migrations = listMigrationDirectoriesResult.migrations;
      console.info(`${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations`);
    } else {
      console.info(`No migration found in prisma/migrations`);
    }
    const editedMigrationNames = diagnoseResult.editedMigrationNames;
    if (editedMigrationNames.length > 0) {
      console.info(`${import_chalk.default.yellow("WARNING The following migrations have been modified since they were applied:")}
${editedMigrationNames.join("\n")}`);
    }
    let migrationIds;
    try {
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      migrate.stop();
    }
    console.info();
    if (migrationIds.length === 0) {
      return import_chalk.default.greenBright(`No pending migrations to apply.`);
    } else {
      return `The following migration${migrationIds.length > 1 ? "s" : ""} have been applied:

${(0, import_chalk.default)((0, import_printFiles.printFilesFromMigrationIds)("migrations", migrationIds, {
        "migration.sql": ""
      }))}
      
${import_chalk.default.greenBright("All migrations have been successfully applied.")}`;
    }
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateDeploy.help}`);
    }
    return _MigrateDeploy.help;
  }
};
let MigrateDeploy = _MigrateDeploy;
MigrateDeploy.help = (0, import_sdk.format)(`
Apply pending migrations to update the database schema in production/staging

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate deploy [options]

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${import_chalk.default.bold("Examples")}

  Deploy your pending migrations to your production/staging database
  ${import_chalk.default.dim("$")} prisma migrate deploy

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate deploy --schema=./schema.prisma

`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateDeploy
});
