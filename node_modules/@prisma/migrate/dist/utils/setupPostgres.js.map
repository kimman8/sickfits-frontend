{
  "version": 3,
  "sources": ["../../src/utils/setupPostgres.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport path from 'path'\nimport { createDatabase, uriToCredentials, credentialsToUri } from '@prisma/sdk'\nimport { Client } from 'pg'\n\nexport type SetupParams = {\n  connectionString: string\n  dirname: string\n}\n\nexport async function setupPostgres(options: SetupParams): Promise<void> {\n  const { connectionString } = options\n  const { dirname } = options\n  const credentials = uriToCredentials(connectionString)\n\n  let schema = `\n  SELECT 'CREATE DATABASE tests-migrate-shadowdb' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'tests-migrate-shadowdb');\n  SELECT 'CREATE DATABASE ${credentials.database}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${credentials.database}');\n  `\n  if (dirname !== '') {\n    schema += fs.readFileSync(path.join(dirname, 'setup.sql'), 'utf-8')\n  }\n\n  await createDatabase(connectionString).catch((e) => console.error(e))\n\n  const db = new Client({\n    connectionString: connectionString,\n  })\n\n  await db.connect()\n  await db.query(schema)\n  await db.end()\n}\n\nexport async function tearDownPostgres(options: SetupParams) {\n  const { connectionString } = options\n  const credentials = uriToCredentials(connectionString)\n  const credentialsClone = { ...credentials }\n  credentialsClone.database = 'postgres'\n  credentialsClone.schema = ''\n  const connectionStringCopy = credentialsToUri(credentialsClone)\n\n  const db = new Client({\n    connectionString: connectionStringCopy,\n  })\n\n  await db.connect()\n  await db.query(`\n    DROP DATABASE IF EXISTS \"${credentials.database}\";\n  `)\n  await db.end()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AACjB,iBAAmE;AACnE,gBAAuB;AAOvB,6BAAoC,SAAqC;AACvE,QAAM,EAAE,qBAAqB;AAC7B,QAAM,EAAE,YAAY;AACpB,QAAM,cAAc,iCAAiB;AAErC,MAAI,SAAS;AAAA;AAAA,4BAEa,YAAY,wEAAwE,YAAY;AAAA;AAE1H,MAAI,YAAY,IAAI;AAClB,cAAU,kBAAG,aAAa,oBAAK,KAAK,SAAS,cAAc;AAAA;AAG7D,QAAM,+BAAe,kBAAkB,MAAM,CAAC,MAAM,QAAQ,MAAM;AAElE,QAAM,KAAK,IAAI,iBAAO;AAAA,IACpB;AAAA;AAGF,QAAM,GAAG;AACT,QAAM,GAAG,MAAM;AACf,QAAM,GAAG;AAAA;AAGX,gCAAuC,SAAsB;AAC3D,QAAM,EAAE,qBAAqB;AAC7B,QAAM,cAAc,iCAAiB;AACrC,QAAM,mBAAmB,KAAK;AAC9B,mBAAiB,WAAW;AAC5B,mBAAiB,SAAS;AAC1B,QAAM,uBAAuB,iCAAiB;AAE9C,QAAM,KAAK,IAAI,iBAAO;AAAA,IACpB,kBAAkB;AAAA;AAGpB,QAAM,GAAG;AACT,QAAM,GAAG,MAAM;AAAA,+BACc,YAAY;AAAA;AAEzC,QAAM,GAAG;AAAA;",
  "names": []
}
