{
  "version": 3,
  "sources": ["../../src/utils/seed.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport path from 'path'\nimport execa from 'execa'\nimport resolvePkg from 'resolve-pkg'\nimport hasYarn from 'has-yarn'\nimport chalk from 'chalk'\nimport globalDirectories from 'global-dirs'\nimport pkgUp from 'pkg-up'\nimport { promisify } from 'util'\n\nconst readFileAsync = promisify(fs.readFile)\n\nexport function isPackageInstalledGlobally(\n  packageName: string,\n): 'npm' | 'yarn' | false {\n  try {\n    const usingGlobalYarn = fs.existsSync(\n      path.join(globalDirectories.yarn.packages, packageName),\n    )\n    const usingGlobalNpm = fs.existsSync(\n      path.join(globalDirectories.npm.packages, packageName),\n    )\n\n    if (usingGlobalNpm) {\n      return 'npm'\n    }\n    if (usingGlobalYarn) {\n      return 'yarn'\n    } else {\n      false\n    }\n  } catch (e) {\n    //\n  }\n  return false\n}\n\nexport function detectSeedFiles(schemaPath) {\n  let parentDirectory = path.relative(\n    process.cwd(),\n    path.join(process.cwd(), 'prisma'),\n  )\n  if (schemaPath) {\n    parentDirectory = path.relative(process.cwd(), path.dirname(schemaPath))\n  }\n\n  const seedPath = path.join(parentDirectory, 'seed.')\n\n  const detected = {\n    seedPath,\n    numberOfSeedFiles: 0,\n    js: '',\n    ts: '',\n    sh: '',\n  }\n\n  const extensions = ['js', 'ts', 'sh']\n  for (const extension of extensions) {\n    const fullPath = seedPath + extension\n    if (!fs.existsSync(fullPath)) {\n      continue\n    }\n    detected[extension] = fullPath\n    detected.numberOfSeedFiles++\n  }\n\n  return detected\n}\n\nfunction getSeedScript(type: 'TS' | 'JS', seedFilepath: string) {\n  let script = `\nconsole.info('Result:')\n\nconst __seed = require('./${seedFilepath}')\nconst __keys = Object.keys(__seed)\n\nasync function runSeed() {\n  // Execute \"seed\" named export or default export\n  if (__keys && __keys.length) {\n    if (__keys.indexOf('seed') !== -1) {\n      return __seed.seed()\n    } else if (__keys.indexOf('default') !== -1) {\n      return __seed.default()\n    }\n  }\n}\n\nrunSeed()\n  .then(function (result) {\n    if (result) {\n      console.log(result)\n    }\n  })\n  .catch(function (e) {\n    console.error('Error from seed:')\n    throw e\n  })\n`\n\n  if (type === 'TS') {\n    script = `\n// @ts-ignore\ndeclare const require: any\n\n${script}\n\nexport {}\n`\n  }\n\n  return script\n}\n\nexport async function tryToRunSeed(schemaPath: string | null) {\n  const detected = detectSeedFiles(schemaPath)\n\n  if (detected.numberOfSeedFiles === 0) {\n    throw new Error(`No seed file found.\nCreate a \\`seed.ts\\`, \\`.js\\` or \\`.sh\\` file in the prisma directory.`)\n  } else if (detected.numberOfSeedFiles > 1) {\n    throw new Error(\n      `More than one seed file was found in \\`${path.relative(\n        process.cwd(),\n        path.dirname(detected.seedPath),\n      )}\\` directory.\nThis command only supports one seed file: Use \\`seed.ts\\`, \\`.js\\` or \\`.sh\\`.`,\n    )\n  } else {\n    if (detected.js) {\n      console.info(`Running seed from ${chalk.bold(`\"${detected.js}\"`)} ...`)\n\n      // -e (Evaluate the following argument as JavaScript.)\n      return await execa('node', [`-e \"${getSeedScript('JS', detected.js)}\"`], {\n        shell: true,\n        stdio: 'inherit',\n      })\n    } else if (detected.ts) {\n      const hasTypescriptPkg =\n        resolvePkg('typescript') || isPackageInstalledGlobally('typescript')\n      const hasTsNodePkg =\n        resolvePkg('ts-node') || isPackageInstalledGlobally('ts-node')\n      const hasTypesNodePkg = resolvePkg('@types/node')\n\n      const missingPkgs: string[] = []\n      if (!hasTypescriptPkg) {\n        missingPkgs.push('typescript')\n      }\n      if (!hasTsNodePkg) {\n        missingPkgs.push('ts-node')\n      }\n      if (!hasTypesNodePkg) {\n        missingPkgs.push('@types/node')\n      }\n\n      if (missingPkgs.length > 0) {\n        const packageManager = hasYarn() ? 'yarn add -D' : 'npm i -D'\n        console.info(`We detected a seed file at \\`${\n          detected.ts\n        }\\` but it seems that you do not have the following dependencies installed:\n${missingPkgs.map((name) => `- ${name}`).join('\\n')}\n\nTo install them run: ${chalk.green(\n          `${packageManager} ${missingPkgs.join(' ')}`,\n        )}\\n`)\n      }\n\n      // Check package.json for a \"ts-node\" script (so users can customize flags)\n      const scripts = await getScriptsFromPackageJson()\n      let tsNodeCommand = 'ts-node'\n      let tsNodeArgs = `--eval \"${getSeedScript('TS', detected.ts)}\"`\n\n      // User can customize the `ts-node` command from the package script\n      if (scripts?.['ts-node']) {\n        tsNodeCommand = scripts['ts-node']\n        tsNodeArgs = `\"${detected.ts}\"`\n        console.info(\n          `Running seed: ${chalk.bold(`${tsNodeCommand} ${tsNodeArgs}`)} ...`,\n        )\n      } else {\n        console.info(`Running seed from ${chalk.bold(`${detected.ts}`)} ...`)\n      }\n\n      return await execa(tsNodeCommand, [tsNodeArgs], {\n        shell: true,\n        stdio: 'inherit',\n      })\n    } else if (detected.sh) {\n      console.info(`Running seed: ${chalk.bold(`sh \"${detected.sh}\"`)} ...`)\n      return await execa('sh', [`\"${detected.sh}\"`], {\n        shell: true,\n        stdio: 'inherit',\n      })\n    }\n  }\n\n  return undefined\n}\n\nexport async function getScriptsFromPackageJson(cwd: string = process.cwd()) {\n  interface PkgJSON {\n    scripts: PkgJSONScripts\n  }\n  interface PkgJSONScripts {\n    [key: string]: string\n  }\n\n  try {\n    const pkgJsonPath = await pkgUp({ cwd })\n\n    if (!pkgJsonPath) {\n      return null\n    }\n\n    const pkgJsonString = await readFileAsync(pkgJsonPath, 'utf-8')\n\n    const pkgJson: PkgJSON = JSON.parse(pkgJsonString)\n\n    // Pick and return only items we need\n    const { 'ts-node': tsnode } = pkgJson.scripts\n\n    return { 'ts-node': tsnode }\n  } catch {\n    return null\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
