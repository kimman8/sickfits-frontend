{
  "version": 3,
  "sources": ["../../src/commands/DbPull.ts"],
  "sourcesContent": ["import {\n  Command,\n  format,\n  HelpError,\n  getSchemaPath,\n  arg,\n  link,\n  drawBox,\n  getCommandWithExecutor,\n} from '@prisma/sdk'\nimport chalk from 'chalk'\nimport path from 'path'\nimport {\n  IntrospectionEngine,\n  IntrospectionWarnings,\n  IntrospectionSchemaVersion,\n} from '@prisma/sdk'\nimport { formatms } from '../utils/formatms'\nimport fs from 'fs'\nimport { protocolToConnectorType } from '@prisma/sdk/dist/convertCredentials'\nimport { printDatasources } from '../utils/printDatasources'\nimport { removeDatasource } from '../utils/removeDatasource'\nimport { NoSchemaFoundError } from '../utils/errors'\nimport { printDatasource } from '../utils/printDatasource'\n\nexport class DbPull implements Command {\n  public static new(): DbPull {\n    return new DbPull()\n  }\n\n  private static help = format(`\nPull the state from the database to the Prisma schema using introspection\n\n${chalk.bold('Usage')}\n\n  ${chalk.dim('$')} prisma db pull [options]\n\n${chalk.bold('Options')}\n\n  -h, --help   Display this help message\n    --schema   Custom path to your Prisma schema\n     --force   Ignore current Prisma schema file\n     --print   Print the introspected Prisma schema to stdout\n\n${chalk.bold('Examples')}\n\nWith an existing Prisma schema\n  ${chalk.dim('$')} prisma db pull\n\nOr specify a Prisma schema path\n  ${chalk.dim('$')} prisma db pull --schema=./schema.prisma\n\nInstead of saving the result to the filesystem, you can also print it to stdout\n  ${chalk.dim('$')} prisma db pull --print\n\n`)\n\n  private printUrlAsDatasource(url: string): string {\n    const provider = protocolToConnectorType(`${url.split(':')[0]}:`)\n\n    return printDatasources([\n      {\n        config: {},\n        provider: provider,\n        name: 'db',\n        url,\n      },\n    ])\n  }\n\n  public async parse(argv: string[]): Promise<string | Error> {\n    const args = arg(argv, {\n      '--help': Boolean,\n      '-h': '--help',\n      '--url': String,\n      '--print': Boolean,\n      '--schema': String,\n      '--force': Boolean,\n      // deprecated\n      '--experimental-reintrospection': Boolean,\n      '--clean': Boolean,\n    })\n\n    const log = (...messages): void => {\n      if (!args['--print']) {\n        console.info(...messages)\n      }\n    }\n\n    if (args instanceof Error) {\n      return this.help(args.message)\n    }\n\n    if (args['--help']) {\n      return this.help()\n    }\n\n    if (args['--clean'] || args['--experimental-reintrospection']) {\n      const renamedMessages: string[] = []\n      if (args['--experimental-reintrospection']) {\n        renamedMessages.push(\n          `The ${chalk.redBright(\n            '--experimental-reintrospection',\n          )} flag has been removed and is now the default behavior of ${chalk.greenBright(\n            'prisma db pull',\n          )}.`,\n        )\n      }\n\n      if (args['--clean']) {\n        renamedMessages.push(\n          `The ${chalk.redBright(\n            '--clean',\n          )} flag has been renamed to ${chalk.greenBright('--force')}.`,\n        )\n      }\n\n      console.error(`\\n${renamedMessages.join('\\n')}\\n`)\n      process.exit(1)\n    }\n\n    const url: string | undefined = args['--url']\n    let schemaPath = await getSchemaPath(args['--schema'])\n\n    // Do not print if --print is passed to only have the schema in stdout\n    if (schemaPath && !args['--print']) {\n      console.info(\n        chalk.dim(\n          `Prisma schema loaded from ${path.relative(\n            process.cwd(),\n            schemaPath,\n          )}`,\n        ),\n      )\n\n      await printDatasource(schemaPath)\n    }\n\n    if (!url && !schemaPath) {\n      throw new NoSchemaFoundError()\n    }\n\n    let schema: string | null = null\n\n    if (url && schemaPath) {\n      schema = this.printUrlAsDatasource(url)\n      const rawSchema = fs.readFileSync(schemaPath, 'utf-8')\n      schema += removeDatasource(rawSchema)\n    } else if (url) {\n      schema = this.printUrlAsDatasource(url)\n    } else if (schemaPath) {\n      schema = fs.readFileSync(schemaPath, 'utf-8')\n    } else {\n      throw new Error('Could not find a `schema.prisma` file')\n    }\n\n    const engine = new IntrospectionEngine({\n      cwd: schemaPath ? path.dirname(schemaPath) : undefined,\n    })\n\n    const basedOn =\n      !args['--url'] && schemaPath\n        ? ` based on datasource defined in ${chalk.underline(\n            path.relative(process.cwd(), schemaPath),\n          )}`\n        : ''\n    log(`\\nIntrospecting${basedOn} \u2026`)\n\n    const before = Date.now()\n    let introspectionSchema = ''\n    let introspectionWarnings: IntrospectionWarnings[]\n    let introspectionSchemaVersion: IntrospectionSchemaVersion\n    try {\n      const introspectionResult = await engine.introspect(\n        schema,\n        args['--force'],\n      )\n\n      introspectionSchema = introspectionResult.datamodel\n      introspectionWarnings = introspectionResult.warnings\n      introspectionSchemaVersion = introspectionResult.version\n    } catch (e) {\n      if (e.code === 'P4001') {\n        if (introspectionSchema.trim() === '') {\n          throw new Error(`\\n${chalk.red.bold('P4001 ')}${chalk.red(\n            'The introspected database was empty:',\n          )} ${url ? chalk.underline(url) : ''}\n\n${chalk.bold(\n  'prisma db pull',\n)} could not create any models in your ${chalk.bold(\n            'schema.prisma',\n          )} file and you will not be able to generate Prisma Client with the ${chalk.bold(\n            getCommandWithExecutor('prisma generate'),\n          )} command.\n\n${chalk.bold('To fix this, you have two options:')}\n\n- manually create a table in your database (using SQL).\n- make sure the database connection URL inside the ${chalk.bold(\n            'datasource',\n          )} block in ${chalk.bold(\n            'schema.prisma',\n          )} points to a database that is not empty (it must contain at least one table).\n\nThen you can run ${chalk.green(\n            getCommandWithExecutor('prisma db pull'),\n          )} again. \n`)\n        }\n      } else if (e.code === 'P1012') {\n        // Schema Parsing Error\n        console.info() // empty line\n        throw new Error(`${chalk.red(\n          `${e.code} Introspection failed as your current Prisma schema file is invalid`,\n        )}\\n\nPlease fix your current schema manually, use ${chalk.green(\n          getCommandWithExecutor('prisma validate'),\n        )} to confirm it is valid and then run this command again.\nOr run this command with the ${chalk.green(\n          '--force',\n        )} flag to ignore your current schema and overwrite it. All local modifications will be lost.\\n`)\n      }\n\n      throw e\n    }\n\n    function getWarningMessage(\n      warnings: IntrospectionWarnings[],\n    ): string | undefined {\n      if (warnings.length > 0) {\n        let message = `\\n*** WARNING ***\\n`\n\n        for (const warning of warnings) {\n          message += `\\n${warning.message}\\n`\n\n          if (warning.code === 0) {\n            // affected === null\n          } else if (warning.code === 1) {\n            message += warning.affected\n              .map((it) => `- \"${it.model}\"`)\n              .join('\\n')\n          } else if (warning.code === 2) {\n            const modelsGrouped: {\n              [key: string]: string[]\n            } = warning.affected.reduce((acc, it) => {\n              if (!acc[it.model]) {\n                acc[it.model] = []\n              }\n              acc[it.model].push(it.field)\n              return acc\n            }, {})\n            message += Object.entries(modelsGrouped)\n              .map(\n                ([model, fields]) =>\n                  `- Model: \"${model}\"\\n  Field(s): \"${fields.join('\", \"')}\"`,\n              )\n              .join('\\n')\n          } else if (warning.code === 3) {\n            message += warning.affected\n              .map(\n                (it) =>\n                  `- Model \"${it.model}\", field: \"${it.field}\", original data type: \"${it.tpe}\"`,\n              )\n              .join('\\n')\n          } else if (warning.code === 4) {\n            message += warning.affected\n              .map((it) => `- Enum \"${it.enm}\", value: \"${it.value}\"`)\n              .join('\\n')\n          } else if (\n            warning.code === 5 ||\n            warning.code === 6 ||\n            warning.code === 8 ||\n            warning.code === 11 ||\n            warning.code === 12 ||\n            warning.code === 13\n          ) {\n            message += warning.affected\n              .map((it) => `- Model \"${it.model}\", field: \"${it.field}\"`)\n              .join('\\n')\n          } else if (warning.code === 7) {\n            message += warning.affected\n              .map((it) => `- Model \"${it.model}\"`)\n              .join('\\n')\n          } else if (warning.code === 9 || warning.code === 10) {\n            message += warning.affected\n              .map((it) => `- Enum \"${it.enm}\"`)\n              .join('\\n')\n          } else if (warning.affected) {\n            // Output unhandled warning\n            message += `Code ${warning.code}\\n${JSON.stringify(\n              warning.affected,\n              null,\n              2,\n            )}`\n          }\n\n          message += `\\n`\n        }\n        return message\n      }\n\n      return undefined\n    }\n\n    const introspectionWarningsMessage =\n      getWarningMessage(introspectionWarnings) || ''\n\n    const prisma1UpgradeMessage = introspectionSchemaVersion.includes('Prisma1')\n      ? `\\n${chalk.bold('Upgrading from Prisma 1 to Prisma 2?')}\n      \\nThe database you introspected could belong to a Prisma 1 project.\n\nPlease run the following command to upgrade to Prisma 2.0:\n${chalk.green(\n  'npx prisma-upgrade [path-to-prisma-yml] [path-to-schema-prisma]',\n)}\n\nNote: \\`prisma.yml\\` and \\`schema.prisma\\` paths are optional.\n \nLearn more about the upgrade process in the docs:\\n${link(\n          'https://pris.ly/d/upgrading-to-prisma2',\n        )}\n`\n      : ''\n\n    if (args['--print']) {\n      console.log(introspectionSchema)\n      introspectionSchemaVersion &&\n        console.log(\n          `\\n// introspectionSchemaVersion: ${introspectionSchemaVersion}`,\n          prisma1UpgradeMessage.replace(/(\\n)/gm, '\\n// '),\n        )\n      if (introspectionWarningsMessage.trim().length > 0) {\n        // Replace make it a // comment block\n        console.error(introspectionWarningsMessage.replace(/(\\n)/gm, '\\n// '))\n      }\n    } else {\n      schemaPath = schemaPath || 'schema.prisma'\n      fs.writeFileSync(schemaPath, introspectionSchema)\n\n      const modelsCount = (introspectionSchema.match(/^model\\s+/gm) || [])\n        .length\n\n      const prisma1UpgradeMessageBox = prisma1UpgradeMessage\n        ? '\\n\\n' +\n          drawBox({\n            height: 16,\n            width: 74,\n            str:\n              prisma1UpgradeMessage +\n              '\\nOnce you upgraded your database schema to Prisma 2.0, \\ncontinue with the instructions below.\\n',\n            horizontalPadding: 2,\n          })\n        : ''\n\n      log(`\\n\u2714 Introspected ${modelsCount} ${\n        modelsCount > 1 ? 'models and wrote them' : 'model and wrote it'\n      } into ${chalk.underline(\n        path.relative(process.cwd(), schemaPath),\n      )} in ${chalk.bold(\n        formatms(Date.now() - before),\n      )}${prisma1UpgradeMessageBox}\n      ${chalk.keyword('orange')(introspectionWarningsMessage)}\n${`Run ${chalk.green(\n  getCommandWithExecutor('prisma generate'),\n)} to generate Prisma Client.`}`)\n    }\n\n    engine.stop()\n\n    return ''\n  }\n\n  public help(error?: string): string | HelpError {\n    if (error) {\n      return new HelpError(`\\n${chalk.bold.red(`!`)} ${error}\\n${DbPull.help}`)\n    }\n    return DbPull.help\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
