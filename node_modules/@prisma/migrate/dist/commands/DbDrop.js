var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  DbDrop: () => DbDrop
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_path = __toModule(require("path"));
var import_chalk = __toModule(require("chalk"));
var import_prompts = __toModule(require("prompts"));
var import_ensureDatabaseExists = __toModule(require("../utils/ensureDatabaseExists"));
var import_flagErrors = __toModule(require("../utils/flagErrors"));
var import_errors = __toModule(require("../utils/errors"));
var import_printDatasource = __toModule(require("../utils/printDatasource"));
const _DbDrop = class {
  static new() {
    return new _DbDrop();
  }
  async parse(argv) {
    var _a;
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--force": Boolean,
      "-f": "--force",
      "--schema": String,
      "--telemetry-information": String
    });
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (!args["--preview-feature"]) {
      throw new import_flagErrors.PreviewFlagError();
    }
    const schemaPath = await (0, import_sdk.getSchemaPath)(args["--schema"]);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    console.info(import_chalk.default.dim(`Prisma schema loaded from ${import_path.default.relative(process.cwd(), schemaPath)}`));
    await (0, import_printDatasource.printDatasource)(schemaPath);
    const dbInfo = await (0, import_ensureDatabaseExists.getDbInfo)(schemaPath);
    const schemaDir = await (0, import_sdk.getSchemaDir)(schemaPath);
    console.info();
    if (!args["--force"]) {
      if ((0, import_sdk.isCi)() && Boolean((_a = import_prompts.default._injected) == null ? void 0 : _a.length) === false) {
        throw new import_errors.DbNeedsForceError("drop");
      }
      const confirmation = await (0, import_prompts.default)({
        type: "text",
        name: "value",
        message: `Enter the ${dbInfo.dbType} ${dbInfo.schemaWord} name "${dbInfo.dbName}" to drop it.
Location: "${dbInfo.dbLocation}".
${import_chalk.default.red("All data will be lost")}.`
      });
      console.info();
      if (!confirmation.value) {
        console.info("Drop cancelled.");
        process.exit(0);
      } else if (confirmation.value !== dbInfo.dbName) {
        throw Error(`The ${dbInfo.schemaWord} name entered "${confirmation.value}" doesn't match "${dbInfo.dbName}".`);
      }
    }
    if (await (0, import_sdk.dropDatabase)(dbInfo.url, schemaDir)) {
      return `${process.platform === "win32" ? "" : "\u{1F680}  "}The ${dbInfo.dbType} ${dbInfo.schemaWord} "${dbInfo.dbName}" from "${dbInfo.dbLocation}" was successfully dropped.
`;
    } else {
      return "";
    }
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbDrop.help}`);
    }
    return _DbDrop.help;
  }
};
let DbDrop = _DbDrop;
DbDrop.help = (0, import_sdk.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F4A3}  ")}Drop the database

${import_chalk.default.bold.yellow("WARNING")} ${import_chalk.default.bold(`Prisma db drop is currently in Preview (${(0, import_sdk.link)("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`)}
${import_chalk.default.dim("When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.")}

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db drop [options] --preview-feature

${import_chalk.default.bold("Options")}

   -h, --help   Display this help message
     --schema   Custom path to your Prisma schema
  -f, --force   Skip the confirmation prompt

${import_chalk.default.bold("Examples")}

  Drop the database
  ${import_chalk.default.dim("$")} prisma db drop --preview-feature

  Specify a schema
  ${import_chalk.default.dim("$")} prisma db drop --preview-feature --schema=./schema.prisma

  Use --force to skip the confirmation prompt
  ${import_chalk.default.dim("$")} prisma db drop --preview-feature --force
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbDrop
});
