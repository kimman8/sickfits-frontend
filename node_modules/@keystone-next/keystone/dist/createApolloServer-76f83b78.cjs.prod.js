'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var apolloServerMicro = require('apollo-server-micro');
var apolloServerExpress = require('apollo-server-express');
var session_dist_keystone = require('../session/dist/keystone.cjs.prod.js');

const createApolloServerMicro = ({
  graphQLSchema,
  createContext,
  sessionStrategy,
  graphqlConfig,
  connectionPromise
}) => {
  const context = async ({
    req,
    res
  }) => {
    await connectionPromise;
    return createContext({
      sessionContext: sessionStrategy ? await session_dist_keystone.createSessionContext(sessionStrategy, req, res, createContext) : undefined,
      req
    });
  };

  const serverConfig = _createApolloServerConfig({
    graphQLSchema,
    graphqlConfig
  });

  return new apolloServerMicro.ApolloServer(_objectSpread(_objectSpread({}, serverConfig), {}, {
    context
  }));
};
const createApolloServerExpress = ({
  graphQLSchema,
  createContext,
  sessionStrategy,
  graphqlConfig
}) => {
  const context = async ({
    req,
    res
  }) => createContext({
    sessionContext: sessionStrategy ? await session_dist_keystone.createSessionContext(sessionStrategy, req, res, createContext) : undefined,
    req
  });

  const serverConfig = _createApolloServerConfig({
    graphQLSchema,
    graphqlConfig
  });

  return new apolloServerExpress.ApolloServer(_objectSpread(_objectSpread({}, serverConfig), {}, {
    context
  }));
};

const _createApolloServerConfig = ({
  graphQLSchema,
  graphqlConfig
}) => {
  // Playground config
  const apolloConfig = graphqlConfig === null || graphqlConfig === void 0 ? void 0 : graphqlConfig.apolloConfig;
  const apolloConfigPlayground = apolloConfig === null || apolloConfig === void 0 ? void 0 : apolloConfig.playground;
  let playground;
  const settings = {
    'request.credentials': 'same-origin'
  };

  if (typeof apolloConfigPlayground === 'boolean' && !apolloConfigPlayground) {
    // graphql.apolloConfig.playground === false (playground not accessible in all cases)
    playground = false;
  } else if (typeof apolloConfigPlayground === 'boolean') {
    // graphql.apolloConfig.playground === true (playground accessible in all cases)
    playground = {
      settings
    };
  } else if (apolloConfigPlayground) {
    // graphql.apolloConfig.playground === { settings: ... } (playground accessible in all cases with further customisation - https://www.apollographql.com/docs/apollo-server/testing/graphql-playground)
    playground = _objectSpread(_objectSpread({}, apolloConfigPlayground), {}, {
      settings: _objectSpread(_objectSpread({}, settings), apolloConfigPlayground.settings)
    });
  } else {
    // process.env.NODE_ENV === 'production' (playground not accessible in production)
    playground = undefined;
  }

  const apolloConfigIntrospection = apolloConfig === null || apolloConfig === void 0 ? void 0 : apolloConfig.introspection;
  let introspection;

  if (typeof apolloConfigIntrospection === 'boolean' && !apolloConfigIntrospection) {
    // graphql.apolloConfig.introspection === false (introspection not accessible in all cases)
    introspection = false;
  } else if (typeof apolloConfigIntrospection === 'boolean') {
    // graphql.apolloConfig.introspection === true (introspection accessible in all cases)
    introspection = true;
  } else {
    // process.env.NODE_ENV === 'production' (introspection not accessible in production)
    introspection = undefined;
  }

  return _objectSpread(_objectSpread({
    uploads: false,
    schema: graphQLSchema,
    debug: graphqlConfig === null || graphqlConfig === void 0 ? void 0 : graphqlConfig.debug
  }, apolloConfig), {}, {
    formatError: formatError(graphqlConfig),
    // Carefully inject the playground and introspection variables
    playground,
    introspection // FIXME: Support for file handling configuration
    // maxFileSize: 200 * 1024 * 1024,
    // maxFiles: 5,

  });
};

const formatError = graphqlConfig => {
  return err => {
    var _graphqlConfig$apollo;

    let debug = graphqlConfig === null || graphqlConfig === void 0 ? void 0 : graphqlConfig.debug;

    if (debug === undefined) {
      debug =         "production" !== 'production';
    }

    if (!debug && err.extensions) {
      // Strip out any `debug` extensions
      delete err.extensions.debug;
      delete err.extensions.exception;
    }

    if (graphqlConfig !== null && graphqlConfig !== void 0 && (_graphqlConfig$apollo = graphqlConfig.apolloConfig) !== null && _graphqlConfig$apollo !== void 0 && _graphqlConfig$apollo.formatError) {
      return graphqlConfig.apolloConfig.formatError(err);
    } else {
      return err;
    }
  };
};

exports.createApolloServerExpress = createApolloServerExpress;
exports.createApolloServerMicro = createApolloServerMicro;
