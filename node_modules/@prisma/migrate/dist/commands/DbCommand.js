var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  DbCommand: () => DbCommand
});
var import_sdk = __toModule(require("@prisma/sdk"));
var import_chalk = __toModule(require("chalk"));
const _DbCommand = class {
  constructor(cmds) {
    this.cmds = cmds;
  }
  static new(cmds) {
    return new _DbCommand(cmds);
  }
  async parse(argv) {
    const args = (0, import_sdk.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--telemetry-information": String
    });
    if ((0, import_sdk.isError)(args)) {
      return this.help(args.message);
    }
    if (args._.length === 0 || args["--help"]) {
      return this.help();
    }
    const cmd = this.cmds[args._[0]];
    if (cmd) {
      const argsForCmd = args["--preview-feature"] ? [...args._.slice(1), `--preview-feature`] : args._.slice(1);
      return cmd.parse(argsForCmd);
    }
    return (0, import_sdk.unknownCommand)(_DbCommand.help, args._[0]);
  }
  help(error) {
    if (error) {
      return new import_sdk.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbCommand.help}`);
    }
    return _DbCommand.help;
  }
};
let DbCommand = _DbCommand;
DbCommand.help = (0, import_sdk.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F3CB}\uFE0F  ")}Manage your database schema and lifecycle during development.

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db [command] [options]

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${import_chalk.default.bold("Commands")}
        pull   Pull the state from the database to the Prisma schema using introspection
        push   Push the state from Prisma schema to the database during prototyping
        seed   Seed your database ${import_chalk.default.dim("(preview)")} 

${import_chalk.default.bold("Examples")}

  Using prisma db pull
  ${import_chalk.default.dim("$")} prisma db pull

  Using prisma db push
  ${import_chalk.default.dim("$")} prisma db push

  Using prisma db seed
  ${import_chalk.default.dim("$")} prisma db seed --preview-feature
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbCommand
});
